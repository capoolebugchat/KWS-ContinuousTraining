components:
  comp-init-artifacts:
    executorLabel: exec-init-artifacts
    inputDefinitions:
      parameters:
        config_path:
          parameterType: STRING
        dataset_path:
          parameterType: STRING
        version:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        train_config:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train:
    executorLabel: exec-train
    inputDefinitions:
      artifacts:
        config:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        model_S3_bucket:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-init-artifacts:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - init_artifacts
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.0-beta.4'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)

          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef init_artifacts(\n    config_path: str,\n    dataset_path: str,\n\
          \    version: Optional[str],\n    train_config: Output[Artifact],\n    train_dataset:\
          \ Output[Dataset],\n) -> None:\n\n    import logging\n\n    logging.info(\"\
          dataset.path:\"+train_dataset.path)\n    logging.info(train_dataset.metadata)\n\
          \    logging.info(\"config.path:\"+train_config.path)\n    logging.info(train_config.metadata)\n\
          \n    train_config.metadata = {\"version\":version, \"local_path\":config_path}\n\
          \    train_dataset.metadata= {\"version\":version, \"local_path\":dataset_path}\n\
          \n    import os\n    os.system(\"printenv\")\n\n"
        image: python:3.7
    exec-train:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.0-beta.4'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)

          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train(\n    model_S3_bucket: str,\n    dataset: Input[Dataset],\n\
          \    config: Input[Artifact],\n    model: Output[Model]\n):\n\n    import\
          \ logging\n    import glob\n    import yaml\n    import os\n\n    logging.info(\"\
          model.path:\"+model.path)\n    logging.info(config.metadata)\n\n    MINIO_SERVICE_HOST=\"\
          minio-service.kubeflow.svc.cluster.local\"\n    MINIO_SERVICE_PORT=\"9000\"\
          \n    #TODO: change these to using Kubeflow's Minio Secrets\n    MINIO_SERVICE_ACCESS_KEY=\"\
          minio\"\n    MINIO_SERVICE_SECRET_KEY=\"minio123\"\n    MINIO_SERVICE_SECURITY_OPTION=False\n\
          \n    from minio import Minio\n    minio_client = Minio(\n        f\"{MINIO_SERVICE_HOST+':'+MINIO_SERVICE_PORT}\"\
          ,\n        access_key = MINIO_SERVICE_ACCESS_KEY,\n        secret_key =\
          \ MINIO_SERVICE_SECRET_KEY,\n        secure     = MINIO_SERVICE_SECURITY_OPTION\n\
          \    )\n\n    logging.info(f\"connected to Minio Server at minio-service.kubeflow.svc.cluster.local:9000\"\
          )\n\n    def _yaml_to_env(yaml_file, env_file, data_path):\n\n        yaml_f\
          \ = open(yaml_file,'r')\n        env_f = open(env_file,'w')\n        hyperparams\
          \ = yaml.safe_load(yaml_f)\n        hyperparams['data_path'] = data_path\n\
          \        logging.info(\"Loading hyperparams:\")\n        print(\"Loading\
          \ hyperparams:\")\n        for key in hyperparams:\n            logging.info(f\"\
          {key} = {hyperparams[key]}\")\n            print(f\"{key} = {hyperparams[key]}\"\
          )\n            if isinstance(hyperparams[key], str):\n                env_f.write(f\"\
          {key} = '{hyperparams[key]}'\\n\")\n            else: env_f.write(f\"{key}\
          \ = {hyperparams[key]}\\n\")\n\n    def _train():\n        logging.info(\"\
          Traning commencing.\")\n        os.system(\"python3 -m kws_streaming.train.model_train_eval\
          \ ds_tc_resnet --alsologtostderr\")\n        logging.info(\"Training completed.\"\
          )\n\n    def _upload_local_directory_to_minio(local_path, bucket_name, minio_path):\n\
          \        assert os.path.isdir(local_path)\n        for local_file in glob.glob(local_path\
          \ + '/**'):\n            local_file = local_file.replace(os.sep, \"/\")\
          \ # Replace \\ with / on Windows\n            if not os.path.isfile(local_file):\n\
          \                _upload_local_directory_to_minio(\n                   \
          \ local_file, bucket_name, minio_path + \"/\" + os.path.basename(local_file))\n\
          \            else:\n                remote_path = os.path.join(\n      \
          \              minio_path, local_file[1 + len(local_path):])\n         \
          \       remote_path = remote_path.replace(\n                    os.sep,\
          \ \"/\")  # Replace \\ with / on Windows\n                minio_client.fput_object(bucket_name,\
          \ remote_path, local_file)\n\n    model.metadata = {\n        \"version\"\
          :\"v0.1.1\",\n        \"S3_URI\":f\"S3://{model_S3_bucket}/saved_model\"\
          \n        }\n\n    _yaml_to_env(\n        yaml_file = config.metadata[\"\
          local_path\"],\n        env_file = \"hparam.env\",\n        data_path =\
          \ dataset.metadata[\"local_path\"])\n    _train()\n    _upload_local_directory_to_minio(\n\
          \        local_path = \"./train_res/ds_tc_resnet/non_stream\",\n       \
          \ bucket_name = model_S3_bucket,\n        minio_path = \"saved_model/1\"\
          )\n\n    logging.info(\"Model uploaded to minio bucket.\")\n\n"
        image: capoolebugchat/kws-training:v0.6.0
pipelineInfo:
  name: kws-ct-pipeline
root:
  dag:
    tasks:
      init-artifacts:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-init-artifacts
        inputs:
          parameters:
            config_path:
              componentInputParameter: config_file_url
            dataset_path:
              componentInputParameter: dataset_path
            version:
              runtimeValue:
                constant: v0.0.1
        taskInfo:
          name: init-artifacts
      train:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train
        dependentTasks:
        - init-artifacts
        inputs:
          artifacts:
            config:
              taskOutputArtifact:
                outputArtifactKey: train_config
                producerTask: init-artifacts
            dataset:
              taskOutputArtifact:
                outputArtifactKey: train_dataset
                producerTask: init-artifacts
          parameters:
            model_S3_bucket:
              componentInputParameter: model_s3_bucket
        taskInfo:
          name: train
  inputDefinitions:
    parameters:
      config_file_url:
        defaultValue: h_param.yaml
        parameterType: STRING
      dataset_path:
        defaultValue: test_dataset
        parameterType: STRING
      model_s3_bucket:
        defaultValue: mlpipeline
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.0.0-beta.4
