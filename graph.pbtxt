node {
  name: "data/wav_filename"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ReadFile"
  op: "ReadFile"
  input: "data/wav_filename"
}
node {
  name: "data/DecodeWav"
  op: "DecodeWav"
  input: "data/ReadFile"
  attr {
    key: "desired_channels"
    value {
      i: 1
    }
  }
  attr {
    key: "desired_samples"
    value {
      i: 16000
    }
  }
}
node {
  name: "data/foreground_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/ExpandDims"
  op: "ExpandDims"
  input: "data/DecodeWav"
  input: "data/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/ExpandDims_1"
  op: "ExpandDims"
  input: "data/ExpandDims"
  input: "data/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200>\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "data/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice"
  op: "StridedSlice"
  input: "data/Shape"
  input: "data/strided_slice/stack"
  input: "data/strided_slice/stack_1"
  input: "data/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/Cast"
  op: "Cast"
  input: "data/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/mul"
  op: "Mul"
  input: "data/Cast"
  input: "data/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Cast_1"
  op: "Cast"
  input: "data/mul"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize/size/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize/size"
  op: "Pack"
  input: "data/Cast_1"
  input: "data/resize/size/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "data/ExpandDims_1"
  input: "data/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape"
  op: "Shape"
  input: "data/resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/Shape"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency"
  op: "Identity"
  input: "data/resize/ResizeBilinear"
  input: "^data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/sub/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Neg"
  op: "Neg"
  input: "data/resize_image_with_crop_or_pad/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/Neg"
  input: "data/resize_image_with_crop_or_pad/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv"
  input: "data/resize_image_with_crop_or_pad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/sub"
  input: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv_1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum"
  op: "Minimum"
  input: "data/resize_image_with_crop_or_pad/Minimum/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  op: "AddV2"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack:1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_2"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_3"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_3"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency_1"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "data/Squeeze"
  op: "Squeeze"
  input: "data/resize_image_with_crop_or_pad/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 3
      }
    }
  }
}
node {
  name: "data/Mul_1"
  op: "Mul"
  input: "data/Squeeze"
  input: "data/foreground_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/time_shift_padding"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/time_shift_offset"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/Pad"
  op: "Pad"
  input: "data/Mul_1"
  input: "data/time_shift_padding"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200>\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "data/Slice"
  op: "Slice"
  input: "data/Pad"
  input: "data/time_shift_offset"
  input: "data/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/background_data"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16000
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "data/background_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Mul_2"
  op: "Mul"
  input: "data/background_data"
  input: "data/background_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Add"
  op: "AddV2"
  input: "data/Mul_2"
  input: "data/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value/Minimum"
  op: "Minimum"
  input: "data/Add"
  input: "data/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value"
  op: "Maximum"
  input: "data/clip_by_value/Minimum"
  input: "data/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Squeeze_1"
  op: "Squeeze"
  input: "data/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 16000
        }
      }
    }
  }
}
node {
  name: "speech_features/lambda_1/lambda_1/Identity"
  op: "Identity"
  input: "input_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/lambda/lambda/Identity"
  op: "Identity"
  input: "speech_features/lambda_1/lambda_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/data_frame/lambda_2/lambda_2/Identity"
  op: "Identity"
  input: "speech_features/lambda/lambda/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/data_frame/frame/frame_length"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 160
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/frame_step"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 160
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200>\000\000"
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Size/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Size_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Size_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/sub"
  op: "Sub"
  input: "speech_features/data_frame/frame/sub/x"
  input: "speech_features/data_frame/frame/frame_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/floordiv"
  op: "FloorDiv"
  input: "speech_features/data_frame/frame/sub"
  input: "speech_features/data_frame/frame/frame_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/add"
  op: "AddV2"
  input: "speech_features/data_frame/frame/add/x"
  input: "speech_features/data_frame/frame/floordiv"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Maximum"
  op: "Maximum"
  input: "speech_features/data_frame/frame/Maximum/x"
  input: "speech_features/data_frame/frame/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/gcd/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 160
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 160
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/floordiv_1"
  op: "FloorDiv"
  input: "speech_features/data_frame/frame/frame_length"
  input: "speech_features/data_frame/frame/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 160
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/floordiv_2"
  op: "FloorDiv"
  input: "speech_features/data_frame/frame/frame_step"
  input: "speech_features/data_frame/frame/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat/values_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat/values_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat"
  op: "ConcatV2"
  input: "speech_features/data_frame/frame/concat/values_0"
  input: "speech_features/data_frame/frame/concat/values_1"
  input: "speech_features/data_frame/frame/concat/values_2"
  input: "speech_features/data_frame/frame/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_1/values_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_1/values_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_1"
  op: "ConcatV2"
  input: "speech_features/data_frame/frame/concat_1/values_0"
  input: "speech_features/data_frame/frame/concat_1/values_1"
  input: "speech_features/data_frame/frame/concat_1/values_2"
  input: "speech_features/data_frame/frame/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/zeros_like/tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200>\000\000"
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/ones_like/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/ones_like"
  op: "Fill"
  input: "speech_features/data_frame/frame/ones_like/Shape"
  input: "speech_features/data_frame/frame/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/StridedSlice"
  op: "StridedSlice"
  input: "speech_features/data_frame/lambda_2/lambda_2/Identity"
  input: "speech_features/data_frame/frame/zeros_like"
  input: "speech_features/data_frame/frame/concat"
  input: "speech_features/data_frame/frame/ones_like"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape"
  op: "Reshape"
  input: "speech_features/data_frame/frame/StridedSlice"
  input: "speech_features/data_frame/frame/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/range"
  op: "Range"
  input: "speech_features/data_frame/frame/range/start"
  input: "speech_features/data_frame/frame/Maximum"
  input: "speech_features/data_frame/frame/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/mul"
  op: "Mul"
  input: "speech_features/data_frame/frame/range"
  input: "speech_features/data_frame/frame/floordiv_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_1/shape"
  op: "Pack"
  input: "speech_features/data_frame/frame/Maximum"
  input: "speech_features/data_frame/frame/Reshape_1/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_1"
  op: "Reshape"
  input: "speech_features/data_frame/frame/mul"
  input: "speech_features/data_frame/frame/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/range_1"
  op: "Range"
  input: "speech_features/data_frame/frame/range_1/start"
  input: "speech_features/data_frame/frame/floordiv_1"
  input: "speech_features/data_frame/frame/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_2/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_2/shape"
  op: "Pack"
  input: "speech_features/data_frame/frame/Reshape_2/shape/0"
  input: "speech_features/data_frame/frame/floordiv_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_2"
  op: "Reshape"
  input: "speech_features/data_frame/frame/range_1"
  input: "speech_features/data_frame/frame/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/add_1"
  op: "AddV2"
  input: "speech_features/data_frame/frame/Reshape_1"
  input: "speech_features/data_frame/frame/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/GatherV2"
  op: "GatherV2"
  input: "speech_features/data_frame/frame/Reshape"
  input: "speech_features/data_frame/frame/add_1"
  input: "speech_features/data_frame/frame/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_2/values_1"
  op: "Pack"
  input: "speech_features/data_frame/frame/Maximum"
  input: "speech_features/data_frame/frame/frame_length"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_2/values_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speech_features/data_frame/frame/concat_2"
  op: "ConcatV2"
  input: "speech_features/data_frame/frame/concat_2/values_0"
  input: "speech_features/data_frame/frame/concat_2/values_1"
  input: "speech_features/data_frame/frame/concat_2/values_2"
  input: "speech_features/data_frame/frame/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/data_frame/frame/Reshape_3"
  op: "Reshape"
  input: "speech_features/data_frame/frame/GatherV2"
  input: "speech_features/data_frame/frame/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/lambda_3/lambda_3/Identity"
  op: "Identity"
  input: "speech_features/data_frame/frame/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/lambda_4/lambda_4/Identity"
  op: "Identity"
  input: "speech_features/lambda_3/lambda_3/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/windowing/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        tensor_content: "\000\000\000\000\201\032\3129\217\006\312:\377!c;\330\266\311;0h\035<zXb<\212\310\231<\366x\310<\025+\375<\014\345\033=o\037<=\3717_=h\220\202=\177\345\226=;\223\254=\r\221\303=\341\325\333=#X\365=\341\006\010>\032\366\025>;t$>\214{3>\036\006C>\320\rS>L\214c>\021{t>\270\351\202>G\307\213>\267\322\224>u\010\236>\337d\247>C\344\260>\341\202\272>\355<\304>\220\016\316>\351\363\327>\022\351\341>\033\352\353>\022\363\365>\000\000\000?w\006\005?\363\n\n?w\013\017?\013\006\024?\270\370\030?\212\341\035?\220\276\"?\336\215\'?\220M,?\305\3730?\244\2265?\\\034:?$\213>?<\341B?\355\034G?\214<K?x>O?\035!S?\361\342V?z\202Z?H\376]?\374Ta?D\205d?\336\215g?\231mj?P#m?\363\255o?\200\014r?\t>t?\257Av?\247\026x?8\274y?\2741{?\236v|?_\212}?\222l~?\336\034\177?\375\232\177?\275\346\177?\000\000\200?\275\346\177?\375\232\177?\336\034\177?\222l~?_\212}?\236v|?\2741{?8\274y?\247\026x?\257Av?\t>t?\200\014r?\363\255o?P#m?\231mj?\336\215g?D\205d?\374Ta?H\376]?z\202Z?\361\342V?\035!S?x>O?\214<K?\355\034G?<\341B?$\213>?\\\034:?\244\2265?\305\3730?\220M,?\336\215\'?\220\276\"?\212\341\035?\270\370\030?\013\006\024?w\013\017?\363\n\n?w\006\005?\000\000\000?\022\363\365>\033\352\353>\022\351\341>\351\363\327>\220\016\316>\355<\304>\341\202\272>C\344\260>\337d\247>u\010\236>\267\322\224>G\307\213>\270\351\202>\021{t>L\214c>\320\rS>\036\006C>\214{3>;t$>\032\366\025>\341\006\010>#X\365=\341\325\333=\r\221\303=;\223\254=\177\345\226=h\220\202=\3717_=o\037<=\014\345\033=\025+\375<\366x\310<\212\310\231<zXb<0h\035<\330\266\311;\377!c;\217\006\312:\201\032\3129"
      }
    }
  }
}
node {
  name: "speech_features/windowing/mul"
  op: "Mul"
  input: "speech_features/lambda_4/lambda_4/Identity"
  input: "speech_features/windowing/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 122
          }
          dim {
            size: 80
          }
        }
        tensor_content|t\314=pqfnaql?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000nB\311>\311^\033?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\354\314J?O\314T>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z`pk8oe>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\377\010?\373\000\356>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\206\255>\347<)?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\313<>,\315P?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000W\265\214=Uin}q?\262\334drKn?\233\247\215=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\271\226r?h~?>1\356;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=M\204=Xvorxc{q~{?\310G\213<\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300\010\214>\240\3739?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\3321\024?L\234\327>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&\006fnmo?d\ni?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037~h?\ntemmgvs\247=\205\021k?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\236\325\021?\305T\334>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\267\334\205=iDok`?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\334&\'?H\262\261>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{jC>anx}\350>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\324\377=~\005`d?ig?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\303\2274?zaonut\267=\313\036iad\351<\330\264xt\346\255>\306\014)?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\254\tley~kvgn(\367>\311kc\n9>gad-\331>Ni{{c\024?axc\276xyiws?\242lB=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030_0?\317A\237>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244\332\332>\256\222\022?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007,>@\376T?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000M\032i
      }
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
          dim {
            size: 122
          }
        }
        tensor_contentmN\177?m\304~?$\023~?\254:}?(;|?\276\024{?\235\307y?\370Sx?\007\272v?\013\372t?G\024s?\010\tq?\236\330n?^\203l?\247\tj?\330kg?Y\252d?\230\305a?\005\276^?\032\224[?SHX?1\333T?=MQ?\002\237M?\022\321I?\003\344E?p\330A?\371\256=?Bh9?\363\0045?\273\2050?J\353+?V6\'?\231g\"?\321\177\035?\300\177\030?*h\023?\3329\016?\233\365\010?=\234\003?\']\374>\352Z\361>u3\346>\200\350\332>\312{\317>\025\357\303>*D\270>\324|\254>\345\232\240>1\240\224>\223\216\210>\314\317x>\023\\`>\302\305G>\242\020/>\203@\026>s\262\372=6\275\310=\005\251\226=0\373H=\260\n\311<21\215$\260\n\311\2740\373H\275\005\251\226\2756\275\310\275s\262\372\275\203@\026\276\242\020/\276\302\305G\276\023\\`\276\314\317x\276\223\216\210\2761\240\224\276\345\232\240\276\324|\254\276*D\270\276\025\357\303\276\312{\317\276\200\350\332\276u3\346\276\352Z\361\276\']\374\276=\234\003\277\233\365\010\277\3329\016\277*h\023\277\300\177\030\277\321\177\035\277\231g\"\277V6\'\277J\353+\277\273\2050\277\363\0045\277Bh9\277\371\256=\277p\330A\277\003\344E\277\022\321I\277\002\237M\277=MQ\2771\333T\277SHX\277\032\224[\277\005\276^\277\230\305a\277Y\252d\277\330kg\277\247\tj\277^\203l\277\236\330n\277\010\tq\277G\024s\277\013\372t\277\007\272v\277\370Sx\277\235\307y\277\276\024{\277(;|\277\000\000\200?\017\261\177?m\304~?\254:}?\276\024{?\370Sx?\013\372t?\010\tq?^\203l?\330kg?\230\305a?\032\224[?1\333T?\002\237M?\003\344E?\371\256=?\363\0045?J\353+?\231g\"?\300\177\030?\3329\016?=\234\003?\352Z\361>\200\350\332>\025\357\303>\324|\254>1\240\224>\314\317x>\302\305G>\203@\026>6\275\310=0\373H=21\215$0\373H\2756\275\310\275\203@\026\276\302\305G\276\314\317x\2761\240\224\276\324|\254\276\025\357\303\276\200\350\332\276\352Z\361\276=\234\003\277\3329\016\277\300\177\030\277\231g\"\277J\353+\277\363\0045\277\371\256=\277\003\344E\277\002\237M\2771\333T\277\032\224[\277\230\305a\277\330kg\277^\203l\277\010\tq\277\013\372t\277\370Sx\277\276\024{\277\254:}\277m\304~\277\017\261\177\277\000\000\200\277\017\261\177\277m\304~\277\254:}\277\276\024{\277\370Sx\277\013\372t\277\010\tq\277^\203l\277\330kg\277\230\305a\277\032\224[\2771\333T\277\002\237M\277\003\344E\277\371\256=\277\363\0045\277J\353+\277\231g\"\277\300\177\030\277\3329\016\277=\234\003\277\352Z\361\276\200\350\332\276\025\357\303\276\324|\254\2761\240\224\276\314\317x\276\302\305G\276\203@\026\2766\275\310\2750\373H\275\312\311S\2450\373H=6\275\310=\203@\026>\302\305G>\314\317x>1\240\224>\324|\254>\025\357\303>\200\350\332>\352Z\361>=\234\003?\3329\016?\300\177\030?\231g\"?J\353+?\363\0045?\371\256=?\003\344E?\002\237M?1\333T?\032\224[?\230\305a?\330kg?^\203l?\010\tq?\000\000\200?mN\177?\254:}?\235\307y?\013\372t?\236\330n?\330kg?\005\276^?1\333T?\022\321I?\371\256=?\273\2050?\231g\"?*h\023?=\234\003?u3\346>\025\357\303>\345\232\240>\314\317x>\242\020/>6\275\310=\260\n\311<0\373H\275s\262\372\275\302\305G\276\223\216\210\276\324|\254\276\312{\317\276\352Z\361\276\233\365\010\277\300\177\030\277V6\'\277\363\0045\277p\330A\277\002\237M\277SHX\277\230\305a\277\247\tj\277\010\tq\277\007\272v\277\276\024{\277$\023~\277\017\261\177\277C\354\177\277m\304~\277(;|\277\370Sx\277G\024s\277^\203l\277Y\252d\277\032\224[\277=MQ\277\003\344E\277Bh9\277J\353+\277\321\177\035\277\3329\016\277\']\374\276\200\350\332\276*D\270\2761\240\224\276\023\\`\276\203@\026\276\005\251\226\275\312\311S\245\005\251\226=\203@\026>\023\\`>1\240\224>*D\270>\200\350\332>\']\374>\3329\016?\321\177\035?J\353+?Bh9?\003\344E?=MQ?\032\224[?Y\252d?^\203l?G\024s?\370Sx?(;|?m\304~?C\354\177?\017\261\177?$\023~?\276\024{?\007\272v?\010\tq?\247\tj?\230\305a?SHX?\002\237M?p\330A?\363\0045?V6\'?\300\177\030?\233\365\010?\352Z\361>\312{\317>\324|\254>\223\216\210>\302\305G>s\262\372=0\373H=\260\n\311\2746\275\310\275\242\020/\276\314\317x\276\345\232\240\276\025\357\303\276u3\346\276=\234\003\277*h\023\277\231g\"\277\273\2050\277\371\256=\277\022\321I\2771\333T\277\005\276^\277\000\000\200?m\304~?\276\024{?\013\372t?^\203l?\230\305a?1\333T?\003\344E?\363\0045?\231g\"?\3329\016?\352Z\361>\025\357\303>1\240\224>\302\305G>6\275\310=21\215$6\275\310\275\302\305G\2761\240\224\276\025\357\303\276\352Z\361\276\3329\016\277\231g\"\277\363\0045\277\003\344E\2771\333T\277\230\305a\277^\203l\277\013\372t\277\276\024{\277m\304~\277\000\000\200\277m\304~\277\276\024{\277\013\372t\277^\203l\277\230\305a\2771\333T\277\003\344E\277\363\0045\277\231g\"\277\3329\016\277\352Z\361\276\025\357\303\2761\240\224\276\302\305G\2766\275\310\275\312\311S\2456\275\310=\302\305G>1\240\224>\025\357\303>\352Z\361>\3329\016?\231g\"?\363\0045?\003\344E?1\333T?\230\305a?^\203l?\013\372t?\276\024{?m\304~?\000\000\200?m\304~?\276\024{?\013\372t?^\203l?\230\305a?1\333T?\003\344E?\363\0045?\231g\"?\3329\016?\352Z\361>\025\357\303>1\240\224>\302\305G>6\275\310=~}\260%6\275\310\275\302\305G\2761\240\224\276\025\357\303\276\352Z\361\276\3329\016\277\231g\"\277\363\0045\277\003\344E\2771\333T\277\230\305a\277^\203l\277\013\372t\277\276\024{\277m\304~\277\000\000\200\277m\304~\277\276\024{\277\013\372t\277^\203l\277\230\305a\2771\333T\277\003\344E\277\363\0045\277\231g\"\277\3329\016\277\352Z\361\276\025\357\303\2761\240\224\276\302\305G\2766\275\310\275\027\026\367\2456\275\310=\302\305G>1\240\224>\025\357\303>\352Z\361>\3329\016?\231g\"?\363\0045?\003\344E?\000\000\200?$\023~?\370Sx?\236\330n?\230\305a?=MQ?\371\256=?V6\'?\3329\016?u3\346>\324|\254>\023\\`>6\275\310=\260\n\311\274\203@\026\276\223\216\210\276\025\357\303\276\']\374\276\300\177\030\277\273\2050\277\003\344E\277SHX\277\330kg\277G\024s\277\276\024{\277mN\177\277\017\261\177\277(;|\277\013\372t\277\247\tj\277\032\224[\277\022\321I\277\363\0045\277\321\177\035\277=\234\003\277\312{\317\2761\240\224\276\242\020/\2760\373H\275\005\251\226=\302\305G>\345\232\240>\200\350\332>\233\365\010?\231g\"?Bh9?\002\237M?\005\276^?^\203l?\007\272v?\254:}?C\354\177?m\304~?\235\307y?\010\tq?Y\252d?1\333T?p\330A?J\353+?*h\023?\352Z\361>*D\270>\314\317x>s\262\372=~}\260%s\262\372\275\314\317x\276*D\270\276\352Z\361\276*h\023\277J\353+\277p\330A\2771\333T\277Y\252d\277\010\tq\277\235\307y\277m\304~\277C\354\177\277\254:}\277\007\272v\277^\203l\277\005\276^\277\002\237M\277Bh9\277\231g\"\277\233\365\010\277\200\350\332\276\345\232\240\276\302\305G\276\005\251\226\2750\373H=\242\020/>1\240\224>\312{\317>=\234\003?\321\177\035?\363\0045?\022\321I?\032\224[?\247\tj?\013\372t?(;|?\017\261\177?mN\177?\276\024{?G\024s?\330kg?SHX?\003\344E?\273\2050?\300\177\030?\']\374>\025\357\303>\223\216\210>\203@\026>\260\n\311<6\275\310\275\023\\`\276\324|\254\276u3\346\276\3329\016\277V6\'\277\000\000\200?\254:}?\013\372t?\330kg?1\333T?\371\256=?\231g\"?=\234\003?\025\357\303>\314\317x>6\275\310=0\373H\275\302\305G\276\324|\254\276\352Z\361\276\300\177\030\277\363\0045\277\002\237M\277\230\305a\277\010\tq\277\276\024{\277\017\261\177\277m\304~\277\370Sx\277^\203l\277\032\224[\277\003\344E\277J\353+\277\3329\016\277\200\350\332\2761\240\224\276\203@\026\276\312\311S\245\203@\026>1\240\224>\200\350\332>\3329\016?J\353+?\003\344E?\032\224[?^\203l?\370Sx?m\304~?\017\261\177?\276\024{?\010\tq?\230\305a?\002\237M?\363\0045?\300\177\030?\352Z\361>\324|\254>\302\305G>0\373H=6\275\310\275\314\317x\276\025\357\303\276=\234\003\277\231g\"\277\371\256=\2771\333T\277\330kg\277\013\372t\277\254:}\277\000\000\200\277\254:}\277\013\372t\277\330kg\2771\333T\277\371\256=\277\231g\"\277=\234\003\277\025\357\303\276\314\317x\2766\275\310\2750\373H=\302\305G>\324|\254>\352Z\361>\300\177\030?\363\0045?\002\237M?\230\305a?\010\tq?\276\024{?\017\261\177?m\304~?\370Sx?^\203l?\032\224[?\003\344E?J\353+?\3329\016?\200\350\332>1\240\224>\203@\026>X\327\036&\203@\026\2761\240\224\276\200\350\332\276\3329\016\277J\353+\277\003\344E\277\032\224[\277^\203l\277\370Sx\277m\304~\277\017\261\177\277\276\024{\277\010\tq\277\230\305a\277\002\237M\277\363\0045\277\300\177\030\277\352Z\361\276\324|\254\276\302\305G\2760\373H\2756\275\310=\314\317x>\025\357\303>=\234\003?\000\000\200?(;|?\010\tq?\005\276^?\003\344E?V6\'?=\234\003?*D\270>\302\305G>\260\n\311<\203@\026\276\345\232\240\276\352Z\361\276\321\177\035\277\371\256=\277SHX\277^\203l\277\235\307y\277\017\261\177\277$\023~\277\013\372t\277Y\252d\277\002\237M\277\273\2050\277\3329\016\277\312{\317\276\314\317x\276\005\251\226\2756\275\310=\223\216\210>\200\350\332>*h\023?\363\0045?=MQ?\330kg?\007\272v?m\304~?mN\177?\370Sx?\247\tj?1\333T?Bh9?\300\177\030?u3\346>1\240\224>s\262\372=0\373H\275\023\\`\276\025\357\303\276\233\365\010\277J\353+\277\022\321I\277\230\305a\277G\024s\277\254:}\277C\354\177\277\276\024{\277\236\330n\277\032\224[\277p\330A\277\231g\"\277\']\374\276\324|\254\276\242\020/\276\027\026\367\245\242\020/>\324|\254>\']\374>\231g\"?p\330A?\032\224[?\236\330n?\276\024{?C\354\177?\254:}?G\024s?\230\305a?\022\321I?J\353+?\233\365\010?\025\357\303>\023\\`>0\373H=s\262\372\2751\240\224\276u3\346\276\300\177\030\277Bh9\2771\333T\277\247\tj\277\370Sx\277mN\177\277m\304~\277\007\272v\277\330kg\277=MQ\277\363\0045\277*h\023\277\200\350\332\276\223\216\210\2766\275\310\275\005\251\226=\314\317x>\312{\317>\3329\016?\273\2050?\002\237M?Y\252d?\013\372t?$\023~?\017\261\177?\235\307y?^\203l?SHX?\371\256=?\321\177\035?\352Z\361>\345\232\240>\203@\026>\260\n\311\274\302\305G\276*D\270\276\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>21\215$\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276\312\311S\245\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>~}\260%\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276\027\026\367\245\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>X\327\036&\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276\351\2100\247\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>\010H\215\246\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276\017/B\247\302\305G>\000\000\200?\235\307y?\330kg?\022\321I?\231g\"?u3\346>\314\317x>\260\n\311<\302\305G\276\312{\317\276\300\177\030\277p\330A\277\230\305a\277\007\272v\277\017\261\177\277(;|\277^\203l\277=MQ\277J\353+\277\']\374\2761\240\224\276\005\251\226\275\203@\026>*D\270>\3329\016?Bh9?\032\224[?G\024s?m\304~?$\023~?\010\tq?SHX?\363\0045?\233\365\010?\324|\254>s\262\372=6\275\310\275\345\232\240\276=\234\003\277\273\2050\2771\333T\277\236\330n\277\254:}\277mN\177\277\013\372t\277\005\276^\277\371\256=\277*h\023\277\025\357\303\276\242\020/\2760\373H=\223\216\210>\352Z\361>V6\'?\002\237M?\247\tj?\276\024{?C\354\177?\370Sx?Y\252d?\003\344E?\321\177\035?\200\350\332>\023\\`>X\327\036&\023\\`\276\200\350\332\276\321\177\035\277\003\344E\277Y\252d\277\370Sx\277C\354\177\277\276\024{\277\247\tj\277\002\237M\277V6\'\277\352Z\361\276\223\216\210\2760\373H\275\242\020/>\025\357\303>*h\023?\371\256=?\005\276^?\013\372t?mN\177?\254:}?\236\330n?1\333T?\273\2050?=\234\003?\345\232\240>6\275\310=s\262\372\275\324|\254\276\233\365\010\277\363\0045\277SHX\277\010\tq\277$\023~\277m\304~\277G\024s\277\032\224[\277Bh9\277\3329\016\277*D\270\276\203@\026\276\005\251\226=1\240\224>\']\374>J\353+?=MQ?^\203l?(;|?\017\261\177?\007\272v?\230\305a?p\330A?\300\177\030?\312{\317>\302\305G>\260\n\311\274\000\000\200?\370Sx?\230\305a?\371\256=?\3329\016?\324|\254>6\275\310=\203@\026\276\025\357\303\276\300\177\030\277\003\344E\277\330kg\277\276\024{\277\017\261\177\277\013\372t\277\032\224[\277\363\0045\277=\234\003\2771\240\224\2760\373H\275\302\305G>\200\350\332>\231g\"?\002\237M?^\203l?\254:}?m\304~?\010\tq?1\333T?J\353+?\352Z\361>\314\317x>~}\260%\314\317x\276\352Z\361\276J\353+\2771\333T\277\010\tq\277m\304~\277\254:}\277^\203l\277\002\237M\277\231g\"\277\200\350\332\276\302\305G\2760\373H=1\240\224>=\234\003?\363\0045?\032\224[?\013\372t?\017\261\177?\276\024{?\330kg?\003\344E?\300\177\030?\025\357\303>\203@\026>6\275\310\275\324|\254\276\3329\016\277\371\256=\277\230\305a\277\370Sx\277\000\000\200\277\370Sx\277\230\305a\277\371\256=\277\3329\016\277\324|\254\2766\275\310\275\203@\026>\025\357\303>\300\177\030?\003\344E?\330kg?\276\024{?\017\261\177?\013\372t?\032\224[?\363\0045?=\234\003?1\240\224>0\373H=\302\305G\276\200\350\332\276\231g\"\277\002\237M\277^\203l\277\254:}\277m\304~\277\010\tq\2771\333T\277J\353+\277\352Z\361\276\314\317x\276\017/B\247\314\317x>\352Z\361>J\353+?1\333T?\010\tq?m\304~?\254:}?^\203l?\002\237M?\231g\"?\200\350\332>\302\305G>0\373H\2751\240\224\276=\234\003\277\363\0045\277\032\224[\277\013\372t\277\017\261\177\277\276\024{\277\330kg\277\003\344E\277\300\177\030\277\025\357\303\276\203@\026\276\000\000\200?\007\272v?\032\224[?\273\2050?\352Z\361>\023\\`>0\373H\275\345\232\240\276\3329\016\277p\330A\277\330kg\277(;|\277m\304~\277\236\330n\277\002\237M\277\321\177\035\277\025\357\303\276s\262\372\275\203@\026>\312{\317>\231g\"?=MQ?\010\tq?mN\177?\276\024{?Y\252d?\371\256=?\233\365\010?1\240\224>\260\n\311<\314\317x\276\']\374\276\363\0045\277\005\276^\277\370Sx\277C\354\177\277\013\372t\277SHX\277J\353+\277u3\346\276\302\305G\276\005\251\226=\324|\254>*h\023?\003\344E?\247\tj?\254:}?$\023~?^\203l?\022\321I?\300\177\030?*D\270>6\275\310=\242\020/\276\200\350\332\276V6\'\2771\333T\277G\024s\277\017\261\177\277\235\307y\277\230\305a\277Bh9\277=\234\003\277\223\216\210\276\351\2100\247\223\216\210>=\234\003?Bh9?\230\305a?\235\307y?\017\261\177?G\024s?1\333T?V6\'?\200\350\332>\242\020/>6\275\310\275*D\270\276\300\177\030\277\022\321I\277^\203l\277$\023~\277\254:}\277\247\tj\277\003\344E\277*h\023\277\324|\254\276\005\251\226\275\302\305G>u3\346>J\353+?SHX?\013\372t?C\354\177?\370Sx?\005\276^?\363\0045?\']\374>\314\317x>\260\n\311\2741\240\224\276\233\365\010\277\371\256=\277Y\252d\277\276\024{\277mN\177\277\010\tq\277=MQ\277\231g\"\277\312{\317\276\203@\026\276s\262\372=\025\357\303>\321\177\035?\002\237M?\236\330n?m\304~?(;|?\330kg?p\330A?\3329\016?\345\232\240>\000\000\200?\013\372t?1\333T?\231g\"?\025\357\303>6\275\310=\302\305G\276\352Z\361\276\363\0045\277\230\305a\277\276\024{\277m\304~\277^\203l\277\003\344E\277\3329\016\2771\240\224\276\312\311S\2451\240\224>\3329\016?\003\344E?^\203l?m\304~?\276\024{?\230\305a?\363\0045?\352Z\361>\302\305G>6\275\310\275\025\357\303\276\231g\"\2771\333T\277\013\372t\277\000\000\200\277\013\372t\2771\333T\277\231g\"\277\025\357\303\2766\275\310\275\302\305G>\352Z\361>\363\0045?\230\305a?\276\024{?m\304~?^\203l?\003\344E?\3329\016?1\240\224>X\327\036&1\240\224\276\3329\016\277\003\344E\277^\203l\277m\304~\277\276\024{\277\230\305a\277\363\0045\277\352Z\361\276\302\305G\2766\275\310=\025\357\303>\231g\"?1\333T?\013\372t?\000\000\200?\013\372t?1\333T?\231g\"?\025\357\303>6\275\310=\302\305G\276\352Z\361\276\363\0045\277\230\305a\277\276\024{\277m\304~\277^\203l\277\003\344E\277\3329\016\2771\240\224\276\017/B\2471\240\224>\3329\016?\003\344E?^\203l?m\304~?\276\024{?\230\305a?\363\0045?\352Z\361>\302\305G>6\275\310\275\025\357\303\276\231g\"\2771\333T\277\013\372t\277\000\000\200\277\013\372t\2771\333T\277\231g\"\277\025\357\303\2766\275\310\275\302\305G>\352Z\361>\363\0045?\230\305a?\276\024{?m\304~?^\203l?\003\344E?\3329\016?1\240\224>\336^\r\2461\240\224\276\3329\016\277\003\344E\277^\203l\277m\304~\277\276\024{\277\230\305a\277\363\0045\277\352Z\361\276\000\000\200?G\024s?\002\237M?*h\023?1\240\224>\260\n\311\274\324|\254\276\321\177\035\2771\333T\277\007\272v\277\017\261\177\277\236\330n\277\003\344E\277\233\365\010\277\314\317x\276\005\251\226=\025\357\303>V6\'?\032\224[?\235\307y?m\304~?\247\tj?\371\256=?\']\374>\302\305G>s\262\372\275\200\350\332\276\273\2050\277\230\305a\277(;|\277\254:}\277Y\252d\277\363\0045\277u3\346\276\203@\026\276\242\020/>\352Z\361>Bh9?\330kg?$\023~?\276\024{?\005\276^?J\353+?\312{\317>6\275\310=\023\\`\276=\234\003\277p\330A\277^\203l\277mN\177\277\370Sx\277SHX\277\231g\"\277*D\270\2760\373H\275\223\216\210>\3329\016?\022\321I?\010\tq?C\354\177?\013\372t?=MQ?\300\177\030?\345\232\240>\010H\215\246\345\232\240\276\300\177\030\277=MQ\277\013\372t\277C\354\177\277\010\tq\277\022\321I\277\3329\016\277\223\216\210\2760\373H=*D\270>\231g\"?SHX?\370Sx?mN\177?^\203l?p\330A?=\234\003?\023\\`>6\275\310\275\312{\317\276J\353+\277\005\276^\277\276\024{\277$\023~\277\330kg\277Bh9\277\352Z\361\276\242\020/\276\203@\026>u3\346>\363\0045?Y\252d?\254:}?(;|?\230\305a?\273\2050?\200\350\332>s\262\372=\302\305G\276\']\374\276\371\256=\277\247\tj\277m\304~\277\235\307y\277\032\224[\277V6\'\277\025\357\303\276\005\251\226\275\314\317x>\233\365\010?\003\344E?\236\330n?\017\261\177?\007\272v?1\333T?\321\177\035?\000\000\200?\010\tq?\003\344E?=\234\003?\302\305G>\203@\026\276\352Z\361\276\371\256=\277^\203l\277\017\261\177\277\013\372t\277\002\237M\277\3329\016\277\314\317x\2766\275\310=\200\350\332>\363\0045?\330kg?m\304~?\370Sx?1\333T?\300\177\030?1\240\224>0\373H\275\025\357\303\276J\353+\277\230\305a\277\254:}\277\276\024{\277\032\224[\277\231g\"\277\324|\254\276\027\026\367\245\324|\254>\231g\"?\032\224[?\276\024{?\254:}?\230\305a?J\353+?\025\357\303>0\373H=1\240\224\276\300\177\030\2771\333T\277\370Sx\277m\304~\277\330kg\277\363\0045\277\200\350\332\2766\275\310\275\314\317x>\3329\016?\002\237M?\013\372t?\017\261\177?^\203l?\371\256=?\352Z\361>\203@\026>\302\305G\276=\234\003\277\003\344E\277\010\tq\277\000\000\200\277\010\tq\277\003\344E\277=\234\003\277\302\305G\276\203@\026>\352Z\361>\371\256=?^\203l?\017\261\177?\013\372t?\002\237M?\3329\016?\314\317x>6\275\310\275\200\350\332\276\363\0045\277\330kg\277m\304~\277\370Sx\2771\333T\277\300\177\030\2771\240\224\2760\373H=\025\357\303>J\353+?\230\305a?\254:}?\276\024{?\032\224[?\231g\"?\324|\254>\336^\r\246\324|\254\276\231g\"\277\032\224[\277\276\024{\277\254:}\277\230\305a\277J\353+\277\025\357\303\2760\373H\2751\240\224>\300\177\030?1\333T?\370Sx?m\304~?\330kg?\363\0045?\200\350\332>6\275\310=\314\317x\276\3329\016\277\002\237M\277\013\372t\277\017\261\177\277^\203l\277\371\256=\277\000\000\200?\236\330n?\371\256=?u3\346>6\275\310=\223\216\210\276\300\177\030\277SHX\277\276\024{\277(;|\277\032\224[\277\321\177\035\2771\240\224\276\005\251\226=\200\350\332>Bh9?^\203l?C\354\177?\010\tq?p\330A?\352Z\361>s\262\372=\314\317x\276*h\023\2771\333T\277\235\307y\277\254:}\277\005\276^\277\231g\"\277\345\232\240\2760\373H=\312{\317>\363\0045?\247\tj?\017\261\177?G\024s?\003\344E?\']\374>\203@\026>\023\\`\276\3329\016\277=MQ\277\370Sx\277$\023~\277\230\305a\277V6\'\277\324|\254\276\260\n\311<\025\357\303>\273\2050?\330kg?mN\177?\013\372t?\022\321I?=\234\003?\242\020/>\302\305G\276\233\365\010\277\002\237M\277\007\272v\277m\304~\277Y\252d\277J\353+\277*D\270\276\017/B\247*D\270>J\353+?Y\252d?m\304~?\007\272v?\002\237M?\233\365\010?\302\305G>\242\020/\276=\234\003\277\022\321I\277\013\372t\277mN\177\277\330kg\277\273\2050\277\025\357\303\276\260\n\311\274\324|\254>V6\'?\230\305a?$\023~?\370Sx?=MQ?\3329\016?\023\\`>\203@\026\276\']\374\276\003\344E\277G\024s\277\017\261\177\277\247\tj\277\363\0045\277\312{\317\2760\373H\275\345\232\240>\231g\"?\005\276^?\254:}?\235\307y?1\333T?*h\023?\314\317x>s\262\372\275\352Z\361\276p\330A\277\010\tq\277C\354\177\277^\203l\277Bh9\277\200\350\332\276\005\251\226\2751\240\224>\321\177\035?\032\224[?(;|?\276\024{?SHX?\000\000\200?^\203l?\363\0045?\025\357\303>21\215$\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\312\311S\245\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>~}\260%\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\027\026\367\245\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>X\327\036&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\351\2100\247\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\010H\215\246\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\017/B\247\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>w\367S\246\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\2765\325S\247\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\336^\r\246\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\\{e\247\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\212\214\215\245\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\202!w\247\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\333\2606\241\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\000\000\200?\247\tj?J\353+?\345\232\240>6\275\310\275\']\374\276\002\237M\277\235\307y\277\276\024{\277=MQ\277=\234\003\277s\262\372\2751\240\224>V6\'?\330kg?C\354\177?^\203l?\273\2050?\324|\254>\005\251\226\275\352Z\361\276\022\321I\277\370Sx\277(;|\2771\333T\277\233\365\010\277\203@\026\276\223\216\210>\231g\"?Y\252d?\017\261\177?\236\330n?\363\0045?*D\270>0\373H\275u3\346\276\003\344E\277\007\272v\277\254:}\277SHX\277\3329\016\277\242\020/\276\314\317x>\321\177\035?\230\305a?mN\177?\010\tq?Bh9?\025\357\303>\260\n\311\274\200\350\332\276p\330A\277\013\372t\277$\023~\277\032\224[\277*h\023\277\302\305G\276\023\\`>\300\177\030?\005\276^?m\304~?G\024s?\371\256=?\312{\317>w\367S\246\312{\317\276\371\256=\277G\024s\277m\304~\277\005\276^\277\300\177\030\277\023\\`\276\302\305G>*h\023?\032\224[?$\023~?\013\372t?p\330A?\200\350\332>\260\n\311<\025\357\303\276Bh9\277\010\tq\277mN\177\277\230\305a\277\321\177\035\277\314\317x\276\242\020/>\3329\016?SHX?\254:}?\007\272v?\003\344E?u3\346>0\373H=*D\270\276\363\0045\277\236\330n\277\017\261\177\277Y\252d\277\231g\"\277\223\216\210\276\203@\026>\233\365\010?1\333T?(;|?\370Sx?\022\321I?\352Z\361>\005\251\226=\324|\254\276\273\2050\277^\203l\277C\354\177\277\330kg\277V6\'\2771\240\224\276s\262\372==\234\003?=MQ?\276\024{?\235\307y?\000\000\200?\330kg?\231g\"?\314\317x>\302\305G\276\300\177\030\277\230\305a\277\017\261\177\277^\203l\277J\353+\2771\240\224\276\203@\026>\3329\016?\032\224[?m\304~?\010\tq?\363\0045?\324|\254>6\275\310\275=\234\003\2771\333T\277\254:}\277\013\372t\277\371\256=\277\025\357\303\2760\373H=\352Z\361>\002\237M?\276\024{?\370Sx?\003\344E?\200\350\332>X\327\036&\200\350\332\276\003\344E\277\370Sx\277\276\024{\277\002\237M\277\352Z\361\2760\373H\275\025\357\303>\371\256=?\013\372t?\254:}?1\333T?=\234\003?6\275\310=\324|\254\276\363\0045\277\010\tq\277m\304~\277\032\224[\277\3329\016\277\203@\026\2761\240\224>J\353+?^\203l?\017\261\177?\230\305a?\300\177\030?\302\305G>\314\317x\276\231g\"\277\330kg\277\000\000\200\277\330kg\277\231g\"\277\314\317x\276\302\305G>\300\177\030?\230\305a?\017\261\177?^\203l?J\353+?1\240\224>\203@\026\276\3329\016\277\032\224[\277m\304~\277\010\tq\277\363\0045\277\324|\254\2766\275\310==\234\003?1\333T?\254:}?\013\372t?\371\256=?\025\357\303>0\373H\275\352Z\361\276\002\237M\277\276\024{\277\370Sx\277\003\344E\277\200\350\332\276\202!w\247\200\350\332>\003\344E?\370Sx?\276\024{?\002\237M?\352Z\361>0\373H=\025\357\303\276\371\256=\277\013\372t\277\254:}\2771\333T\277=\234\003\2776\275\310\275\324|\254>\363\0045?\010\tq?m\304~?\032\224[?\3329\016?\203@\026>1\240\224\276J\353+\277^\203l\277\017\261\177\277\000\000\200?Y\252d?\300\177\030?\242\020/>1\240\224\276\273\2050\277\010\tq\277$\023~\2771\333T\277\']\374\2760\373H\275\312{\317>\003\344E?\235\307y?\370Sx?p\330A?\025\357\303>\005\251\226\275=\234\003\277SHX\277m\304~\277\236\330n\277J\353+\277\223\216\210\276\302\305G>\321\177\035?\330kg?C\354\177?\230\305a?*h\023?\203@\026>\345\232\240\276\363\0045\277G\024s\277\254:}\277=MQ\277\352Z\361\276\260\n\311\274\200\350\332>\022\321I?\276\024{?\007\272v?\371\256=?*D\270>6\275\310\275\233\365\010\277\032\224[\277mN\177\277^\203l\277V6\'\277\314\317x\276\023\\`>\231g\"?\247\tj?\017\261\177?\005\276^?\3329\016?s\262\372=\324|\254\276Bh9\277\013\372t\277(;|\277\002\237M\277u3\346\2765\325S\247u3\346>\002\237M?(;|?\013\372t?Bh9?\324|\254>s\262\372\275\3329\016\277\005\276^\277\017\261\177\277\247\tj\277\231g\"\277\023\\`\276\314\317x>V6\'?^\203l?mN\177?\032\224[?\233\365\010?6\275\310=*D\270\276\371\256=\277\007\272v\277\276\024{\277\022\321I\277\200\350\332\276\260\n\311<\352Z\361>=MQ?\254:}?G\024s?\363\0045?\345\232\240>\203@\026\276*h\023\277\230\305a\277C\354\177\277\330kg\277\321\177\035\277\302\305G\276\223\216\210>J\353+?\236\330n?m\304~?SHX?=\234\003?\005\251\226=\025\357\303\276p\330A\277\370Sx\277\235\307y\277\003\344E\277\312{\317\2760\373H=\']\374>1\333T?$\023~?\000\000\200?\230\305a?\3329\016?6\275\310=\025\357\303\276\003\344E\277\276\024{\277\013\372t\277\363\0045\2771\240\224\276\302\305G>\231g\"?^\203l?m\304~?1\333T?\352Z\361>~}\260%\352Z\361\2761\333T\277m\304~\277^\203l\277\231g\"\277\302\305G\2761\240\224>\363\0045?\013\372t?\276\024{?\003\344E?\025\357\303>6\275\310\275\3329\016\277\230\305a\277\000\000\200\277\230\305a\277\3329\016\2776\275\310\275\025\357\303>\003\344E?\276\024{?\013\372t?\363\0045?1\240\224>\302\305G\276\231g\"\277^\203l\277m\304~\2771\333T\277\352Z\361\276\017/B\247\352Z\361>1\333T?m\304~?^\203l?\231g\"?\302\305G>1\240\224\276\363\0045\277\013\372t\277\276\024{\277\003\344E\277\025\357\303\2766\275\310=\3329\016?\230\305a?\000\000\200?\230\305a?\3329\016?6\275\310=\025\357\303\276\003\344E\277\276\024{\277\013\372t\277\363\0045\2771\240\224\276\302\305G>\231g\"?^\203l?m\304~?1\333T?\352Z\361>\212\214\215\245\352Z\361\2761\333T\277m\304~\277^\203l\277\231g\"\277\302\305G\2761\240\224>\363\0045?\013\372t?\276\024{?\003\344E?\025\357\303>6\275\310\275\3329\016\277\230\305a\277\000\000\200\277\230\305a\277\3329\016\2776\275\310\275\025\357\303>\003\344E?\276\024{?\013\372t?\363\0045?1\240\224>\302\305G\276\231g\"\277^\203l\277m\304~\2771\333T\277\352Z\361\276\3476\215\247\352Z\361>1\333T?m\304~?^\203l?\231g\"?\302\305G>1\240\224\276\363\0045\277\013\372t\277\000\000\200?\005\276^?=\234\003?\260\n\311<\352Z\361\276SHX\277\017\261\177\277Y\252d\277\3329\016\277\005\251\226\275\200\350\332>=MQ?m\304~?\247\tj?\300\177\030?s\262\372=\025\357\303\276\022\321I\277\254:}\277\236\330n\277\231g\"\277\242\020/\276\324|\254>p\330A?\276\024{?G\024s?J\353+?\023\\`>1\240\224\276Bh9\277\370Sx\277\007\272v\277\363\0045\277\223\216\210\276\314\317x>\273\2050?\013\372t?\235\307y?\371\256=?\345\232\240>\302\305G\276V6\'\277\010\tq\277(;|\277\003\344E\277*D\270\276\203@\026>\321\177\035?^\203l?$\023~?\002\237M?\312{\317>6\275\310\275*h\023\277\330kg\277mN\177\2771\333T\277u3\346\2760\373H=\233\365\010?\230\305a?C\354\177?\032\224[?\']\374>\336^\r\246\']\374\276\032\224[\277C\354\177\277\230\305a\277\233\365\010\2770\373H\275u3\346>1\333T?mN\177?\330kg?*h\023?6\275\310=\312{\317\276\002\237M\277$\023~\277^\203l\277\321\177\035\277\203@\026\276*D\270>\003\344E?(;|?\010\tq?V6\'?\302\305G>\345\232\240\276\371\256=\277\235\307y\277\013\372t\277\273\2050\277\314\317x\276\223\216\210>\363\0045?\007\272v?\370Sx?Bh9?1\240\224>\023\\`\276J\353+\277G\024s\277\276\024{\277p\330A\277\324|\254\276\242\020/>\231g\"?\236\330n?\254:}?\022\321I?\025\357\303>s\262\372\275\300\177\030\277\247\tj\277m\304~\277=MQ\277\200\350\332\276\005\251\226=\3329\016?Y\252d?\000\000\200?\032\224[?\352Z\361>0\373H\275\3329\016\277\330kg\277m\304~\277\002\237M\277\025\357\303\276\203@\026>\231g\"?\010\tq?\276\024{?\371\256=?1\240\224>\314\317x\276\363\0045\277\370Sx\277\013\372t\277J\353+\277\302\305G\276\324|\254>\003\344E?\254:}?^\203l?\300\177\030?6\275\310=\200\350\332\2761\333T\277\017\261\177\277\230\305a\277=\234\003\277\351\2100\247=\234\003?\230\305a?\017\261\177?1\333T?\200\350\332>6\275\310\275\300\177\030\277^\203l\277\254:}\277\003\344E\277\324|\254\276\302\305G>J\353+?\013\372t?\370Sx?\363\0045?\314\317x>1\240\224\276\371\256=\277\276\024{\277\010\tq\277\231g\"\277\203@\026\276\025\357\303>\002\237M?m\304~?\330kg?\3329\016?0\373H=\352Z\361\276\032\224[\277\000\000\200\277\032\224[\277\352Z\361\2760\373H=\3329\016?\330kg?m\304~?\002\237M?\025\357\303>\203@\026\276\231g\"\277\010\tq\277\276\024{\277\371\256=\2771\240\224\276\314\317x>\363\0045?\370Sx?\013\372t?J\353+?\302\305G>\324|\254\276\003\344E\277\254:}\277^\203l\277\300\177\030\2776\275\310\275\200\350\332>1\333T?\017\261\177?\230\305a?=\234\003?\331\325\214%=\234\003\277\230\305a\277\017\261\177\2771\333T\277\200\350\332\2766\275\310=\300\177\030?^\203l?\254:}?\003\344E?\324|\254>\302\305G\276J\353+\277\013\372t\277\370Sx\277\363\0045\277\314\317x\2761\240\224>\371\256=?\276\024{?\010\tq?\231g\"?\203@\026>\025\357\303\276\002\237M\277\000\000\200?SHX?\200\350\332>s\262\372\275\231g\"\277G\024s\277\370Sx\277\273\2050\277\302\305G\276*D\270>\002\237M?mN\177?\230\305a?\']\374>0\373H\275*h\023\277^\203l\277(;|\277\371\256=\277\223\216\210\2761\240\224>p\330A?\254:}?\247\tj?\3329\016?\260\n\311<=\234\003\277Y\252d\277m\304~\277\022\321I\277\324|\254\276\023\\`>\363\0045?\235\307y?\010\tq?\321\177\035?6\275\310=u3\346\276\032\224[\277C\354\177\2771\333T\277\312{\317\276\203@\026>V6\'?\013\372t?\007\272v?J\353+?\242\020/>\025\357\303\276=MQ\277\017\261\177\277\005\276^\277\352Z\361\276\005\251\226=\300\177\030?\236\330n?\276\024{?Bh9?\314\317x>\345\232\240\276\003\344E\277$\023~\277\330kg\277\233\365\010\277\\{e\247\233\365\010?\330kg?$\023~?\003\344E?\345\232\240>\314\317x\276Bh9\277\276\024{\277\236\330n\277\300\177\030\277\005\251\226\275\352Z\361>\005\276^?\017\261\177?=MQ?\025\357\303>\242\020/\276J\353+\277\007\272v\277\013\372t\277V6\'\277\203@\026\276\312{\317>1\333T?C\354\177?\032\224[?u3\346>6\275\310\275\321\177\035\277\010\tq\277\235\307y\277\363\0045\277\023\\`\276\324|\254>\022\321I?m\304~?Y\252d?=\234\003?\260\n\311\274\3329\016\277\247\tj\277\254:}\277p\330A\2771\240\224\276\223\216\210>\371\256=?(;|?^\203l?*h\023?0\373H=\']\374\276\230\305a\277mN\177\277\002\237M\277*D\270\276\302\305G>\273\2050?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\312\311S\245\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?X\327\036&\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\017/B\247\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?\336^\r\246\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\202!w\247\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?\331\325\214%\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\372\t\226\247\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?[\032\215&\3329\016\277\000\000\200?=MQ?\324|\254>\223\216\210\276\003\344E\277mN\177\277\032\224[\277\312{\317\276\302\305G>Bh9?\254:}?Y\252d?\352Z\361>s\262\372\275J\353+\277\235\307y\277^\203l\277\233\365\010\2770\373H=\321\177\035?\013\372t?G\024s?\300\177\030?\260\n\311<\3329\016\277\236\330n\277\370Sx\277V6\'\2776\275\310\275\']\374>\330kg?(;|?\363\0045?\242\020/>\200\350\332\276\005\276^\277m\304~\277p\330A\277\314\317x\276*D\270>1\333T?C\354\177?\002\237M?\345\232\240>1\240\224\276\022\321I\277\017\261\177\277SHX\277\025\357\303\276\023\\`>\371\256=?$\023~?\230\305a?u3\346>\203@\026\276\273\2050\277\276\024{\277\247\tj\277=\234\003\277\005\251\226=\231g\"?\007\272v?\010\tq?*h\023?\212\214\215\245*h\023\277\010\tq\277\007\272v\277\231g\"\277\005\251\226\275=\234\003?\247\tj?\276\024{?\273\2050?\203@\026>u3\346\276\230\305a\277$\023~\277\371\256=\277\023\\`\276\025\357\303>SHX?\017\261\177?\022\321I?1\240\224>\345\232\240\276\002\237M\277C\354\177\2771\333T\277*D\270\276\314\317x>p\330A?m\304~?\005\276^?\200\350\332>\242\020/\276\363\0045\277(;|\277\330kg\277\']\374\2766\275\310=V6\'?\370Sx?\236\330n?\3329\016?\260\n\311\274\300\177\030\277G\024s\277\013\372t\277\321\177\035\2770\373H\275\233\365\010?^\203l?\235\307y?J\353+?s\262\372=\352Z\361\276Y\252d\277\254:}\277Bh9\277\302\305G\276\312{\317>\000\000\200?\002\237M?1\240\224>\324|\254\2761\333T\277\017\261\177\277\003\344E\277\314\317x\276\025\357\303>\032\224[?m\304~?\371\256=?\302\305G>\200\350\332\276\230\305a\277\254:}\277\363\0045\277\203@\026\276\352Z\361>\330kg?\276\024{?J\353+?6\275\310==\234\003\277^\203l\277\370Sx\277\231g\"\2770\373H\275\3329\016?\010\tq?\013\372t?\300\177\030?\010H\215\246\300\177\030\277\013\372t\277\010\tq\277\3329\016\2770\373H=\231g\"?\370Sx?^\203l?=\234\003?6\275\310\275J\353+\277\276\024{\277\330kg\277\352Z\361\276\203@\026>\363\0045?\254:}?\230\305a?\200\350\332>\302\305G\276\371\256=\277m\304~\277\032\224[\277\025\357\303\276\314\317x>\003\344E?\017\261\177?1\333T?\324|\254>1\240\224\276\002\237M\277\000\000\200\277\002\237M\2771\240\224\276\324|\254>1\333T?\017\261\177?\003\344E?\314\317x>\025\357\303\276\032\224[\277m\304~\277\371\256=\277\302\305G\276\200\350\332>\230\305a?\254:}?\363\0045?\203@\026>\352Z\361\276\330kg\277\276\024{\277J\353+\2776\275\310\275=\234\003?^\203l?\370Sx?\231g\"?0\373H=\3329\016\277\010\tq\277\013\372t\277\300\177\030\277\372\t\226\247\300\177\030?\013\372t?\010\tq?\3329\016?0\373H\275\231g\"\277\370Sx\277^\203l\277=\234\003\2776\275\310=J\353+?\276\024{?\330kg?\352Z\361>\203@\026\276\363\0045\277\254:}\277\230\305a\277\200\350\332\276\302\305G>\371\256=?m\304~?\032\224[?\025\357\303>\314\317x\276\000\000\200?\022\321I?\314\317x>\312{\317\276\230\305a\277(;|\277J\353+\277\005\251\226\275\3329\016?G\024s?\010\tq?\233\365\010?6\275\310\275\273\2050\277\254:}\277\005\276^\277\025\357\303\276\223\216\210>\002\237M?C\354\177?\003\344E?\023\\`>\200\350\332\276Y\252d\277\276\024{\277V6\'\2770\373H\275*h\023?\013\372t?\236\330n?=\234\003?s\262\372\275\363\0045\277$\023~\277\032\224[\277*D\270\2761\240\224>=MQ?\017\261\177?p\330A?\302\305G>u3\346\276\330kg\277\235\307y\277\231g\"\277\260\n\311\274\300\177\030?\007\272v?^\203l?\']\374>\203@\026\276Bh9\277m\304~\277SHX\277\324|\254\276\345\232\240>1\333T?mN\177?\371\256=?\242\020/>\352Z\361\276\247\tj\277\370Sx\277\321\177\035\277\202!w\247\321\177\035?\370Sx?\247\tj?\352Z\361>\242\020/\276\371\256=\277mN\177\2771\333T\277\345\232\240\276\324|\254>SHX?m\304~?Bh9?\203@\026>\']\374\276^\203l\277\007\272v\277\300\177\030\277\260\n\311<\231g\"?\235\307y?\330kg?u3\346>\302\305G\276p\330A\277\017\261\177\277=MQ\2771\240\224\276*D\270>\032\224[?$\023~?\363\0045?s\262\372==\234\003\277\236\330n\277\013\372t\277*h\023\2770\373H=V6\'?\276\024{?Y\252d?\200\350\332>\023\\`\276\003\344E\277C\354\177\277\002\237M\277\223\216\210\276\025\357\303>\005\276^?\254:}?\273\2050?6\275\310=\233\365\010\277\010\tq\277G\024s\277\3329\016\277\005\251\226=\000\000\200?\003\344E?\302\305G>\352Z\361\276^\203l\277\013\372t\277\3329\016\2776\275\310=\363\0045?m\304~?1\333T?1\240\224>\025\357\303\276\230\305a\277\276\024{\277\231g\"\277\027\026\367\245\231g\"?\276\024{?\230\305a?\025\357\303>1\240\224\2761\333T\277m\304~\277\363\0045\2776\275\310\275\3329\016?\013\372t?^\203l?\352Z\361>\302\305G\276\003\344E\277\000\000\200\277\003\344E\277\302\305G\276\352Z\361>^\203l?\013\372t?\3329\016?6\275\310\275\363\0045\277m\304~\2771\333T\2771\240\224\276\025\357\303>\230\305a?\276\024{?\231g\"?\336^\r\246\231g\"\277\276\024{\277\230\305a\277\025\357\303\2761\240\224>1\333T?m\304~?\363\0045?6\275\310=\3329\016\277\013\372t\277^\203l\277\352Z\361\276\302\305G>\003\344E?\000\000\200?\003\344E?\302\305G>\352Z\361\276^\203l\277\013\372t\277\3329\016\2776\275\310=\363\0045?m\304~?1\333T?1\240\224>\025\357\303\276\230\305a\277\276\024{\277\231g\"\277\3476\215\247\231g\"?\276\024{?\230\305a?\025\357\303>1\240\224\2761\333T\277m\304~\277\363\0045\2776\275\310\275\3329\016?\013\372t?^\203l?\352Z\361>\302\305G\276\003\344E\277\000\000\200\277\003\344E\277\302\305G\276\352Z\361>^\203l?\013\372t?\3329\016?6\275\310\275\363\0045\277m\304~\2771\333T\2771\240\224\276\025\357\303>\230\305a?\276\024{?\231g\"?\325\014\026(\231g\"\277\276\024{\277\230\305a\277\025\357\303\2761\240\224>1\333T?m\304~?\363\0045?6\275\310=\000\000\200?p\330A?\203@\026>\233\365\010\277\013\372t\277\247\tj\277\200\350\332\276\223\216\210>1\333T?$\023~?J\353+?\260\n\311<\231g\"\277(;|\277\032\224[\277\345\232\240\276\025\357\303>Y\252d?\370Sx?*h\023?6\275\310\275Bh9\277\017\261\177\277\022\321I\277\302\305G\276\']\374>\010\tq?\236\330n?\352Z\361>\023\\`\276\002\237M\277mN\177\277\363\0045\277\005\251\226\275\300\177\030?\235\307y?\230\305a?*D\270>\324|\254\276\005\276^\277\276\024{\277\321\177\035\2770\373H=\273\2050?m\304~?=MQ?\314\317x>u3\346\276^\203l\277G\024s\277=\234\003\277\242\020/>\003\344E?C\354\177?\371\256=?s\262\372=\3329\016\277\007\272v\277\330kg\277\312{\317\2761\240\224>SHX?\254:}?V6\'?\333\2606\241V6\'\277\254:}\277SHX\2771\240\224\276\312{\317>\330kg?\007\272v?\3329\016?s\262\372\275\371\256=\277C\354\177\277\003\344E\277\242\020/\276=\234\003?G\024s?^\203l?u3\346>\314\317x\276=MQ\277m\304~\277\273\2050\2770\373H\275\321\177\035?\276\024{?\005\276^?\324|\254>*D\270\276\230\305a\277\235\307y\277\300\177\030\277\005\251\226=\363\0045?mN\177?\002\237M?\023\\`>\352Z\361\276\236\330n\277\010\tq\277\']\374\276\302\305G>\022\321I?\017\261\177?Bh9?6\275\310=*h\023\277\370Sx\277Y\252d\277\025\357\303\276\345\232\240>\032\224[?(;|?\231g\"?\260\n\311\274J\353+\277$\023~\2771\333T\277\223\216\210\276\000\000\200?\371\256=?6\275\310=\300\177\030\277\276\024{\277\032\224[\2771\240\224\276\200\350\332>^\203l?\010\tq?\352Z\361>\314\317x\2761\333T\277\254:}\277\231g\"\2770\373H=\363\0045?\017\261\177?\003\344E?\203@\026>\3329\016\277\370Sx\277\230\305a\277\324|\254\276\025\357\303>\330kg?\013\372t?=\234\003?\302\305G\276\002\237M\277m\304~\277J\353+\277\017/B\247J\353+?m\304~?\002\237M?\302\305G>=\234\003\277\013\372t\277\330kg\277\025\357\303\276\324|\254>\230\305a?\370Sx?\3329\016?\203@\026\276\003\344E\277\017\261\177\277\363\0045\2770\373H\275\231g\"?\254:}?1\333T?\314\317x>\352Z\361\276\010\tq\277^\203l\277\200\350\332\2761\240\224>\032\224[?\276\024{?\300\177\030?6\275\310\275\371\256=\277\000\000\200\277\371\256=\2776\275\310\275\300\177\030?\276\024{?\032\224[?1\240\224>\200\350\332\276^\203l\277\010\tq\277\352Z\361\276\314\317x>1\333T?\254:}?\231g\"?0\373H\275\363\0045\277\017\261\177\277\003\344E\277\203@\026\276\3329\016?\370Sx?\230\305a?\324|\254>\025\357\303\276\330kg\277\013\372t\277=\234\003\277\302\305G>\002\237M?m\304~?J\353+?[\032\215&J\353+\277m\304~\277\002\237M\277\302\305G\276=\234\003?\013\372t?\330kg?\025\357\303>\324|\254\276\230\305a\277\370Sx\277\3329\016\277\203@\026>\003\344E?\017\261\177?\363\0045?0\373H=\231g\"\277\254:}\2771\333T\277\314\317x\276\352Z\361>\010\tq?^\203l?\200\350\332>\000\000\200?Bh9?0\373H=V6\'\277m\304~\277\022\321I\277\203@\026\276*h\023?\276\024{?SHX?\314\317x>\']\374\276\013\372t\277Y\252d\277\324|\254\276\312{\317>^\203l?\236\330n?\200\350\332>\345\232\240\276\230\305a\277\007\272v\277=\234\003\277\023\\`>1\333T?(;|?\300\177\030?s\262\372\275\003\344E\277mN\177\277J\353+\277\260\n\311<\363\0045?C\354\177?\371\256=?\005\251\226=\231g\"\277$\023~\277\002\237M\277\242\020/\276\3329\016?\235\307y?\032\224[?\223\216\210>\352Z\361\276G\024s\277\330kg\277*D\270\276\025\357\303>\247\tj?\010\tq?u3\346>1\240\224\276\005\276^\277\370Sx\277\233\365\010\277\302\305G>=MQ?\254:}?\321\177\035?6\275\310\275p\330A\277\017\261\177\277\273\2050\277\324c\204\247\273\2050?\017\261\177?p\330A?6\275\310=\321\177\035\277\254:}\277=MQ\277\302\305G\276\233\365\010?\370Sx?\005\276^?1\240\224>u3\346\276\010\tq\277\247\tj\277\025\357\303\276*D\270>\330kg?G\024s?\352Z\361>\223\216\210\276\032\224[\277\235\307y\277\3329\016\277\242\020/>\002\237M?$\023~?\231g\"?\005\251\226\275\371\256=\277C\354\177\277\363\0045\277\260\n\311\274J\353+?mN\177?\003\344E?s\262\372=\300\177\030\277(;|\2771\333T\277\023\\`\276=\234\003?\007\272v?\230\305a?\345\232\240>\200\350\332\276\236\330n\277^\203l\277\312{\317\276\324|\254>Y\252d?\013\372t?\']\374>\314\317x\276SHX\277\276\024{\277*h\023\277\000\000\200?\363\0045?21\215$\363\0045\277\000\000\200\277\363\0045\277\312\311S\245\363\0045?\000\000\200?\363\0045?~}\260%\363\0045\277\000\000\200\277\363\0045\277\027\026\367\245\363\0045?\000\000\200?\363\0045?X\327\036&\363\0045\277\000\000\200\277\363\0045\277\351\2100\247\363\0045?\000\000\200?\363\0045?\010H\215\246\363\0045\277\000\000\200\277\363\0045\277\017/B\247\363\0045?\000\000\200?\363\0045?w\367S\246\363\0045\277\000\000\200\277\363\0045\2775\325S\247\363\0045?\000\000\200?\363\0045?\336^\r\246\363\0045\277\000\000\200\277\363\0045\277\\{e\247\363\0045?\000\000\200?\363\0045?\212\214\215\245\363\0045\277\000\000\200\277\363\0045\277\202!w\247\363\0045?\000\000\200?\363\0045?\333\2606\241\363\0045\277\000\000\200\277\363\0045\277\324c\204\247\363\0045?\000\000\200?\363\0045?\331\325\214%\363\0045\277\000\000\200\277\363\0045\277\3476\215\247\363\0045?\000\000\200?\363\0045?\205\003\r&\363\0045\277\000\000\200\277\363\0045\277\372\t\226\247\363\0045?\000\000\200?\363\0045?\3029\r(\363\0045\277\000\000\200\277\363\0045\277\r\335\236\247\363\0045?\000\000\200?\363\0045?[\032\215&\363\0045\277\000\000\200\277\363\0045\277\277\2370\'\363\0045?\000\000\200?\363\0045?\325\014\026(\363\0045\277\000\000\200\277\363\0045\2774\203\260\247\363\0045?\000\000\200?\363\0045?\364\262\323&\363\0045\277\000\000\200\277\363\0045\277sS\r\'\363\0045?\000\000\200?\363\0045?\350\337\036(\363\0045\277\000\000\200\277\363\0045\277Z)\302\247\363\0045?\000\000\200?\363\0045?\000\000\200?\273\2050?0\373H\275p\330A\277m\304~\277\321\177\035\277\203@\026>=MQ?\276\024{?\233\365\010?\314\317x\276\005\276^\277\013\372t\277u3\346\276\324|\254>\247\tj?^\203l?*D\270>\200\350\332\276G\024s\277\230\305a\277\223\216\210\276=\234\003?\235\307y?1\333T?\242\020/>\300\177\030\277$\023~\277\003\344E\277\005\251\226\275J\353+?C\354\177?\363\0045?\260\n\311\274\371\256=\277mN\177\277\231g\"\277s\262\372=\002\237M?(;|?\3329\016?\023\\`\276\032\224[\277\007\272v\277\352Z\361\276\345\232\240>\330kg?\236\330n?\025\357\303>\312{\317\276\010\tq\277Y\252d\2771\240\224\276\']\374>\370Sx?SHX?\302\305G>*h\023\277\254:}\277\022\321I\2776\275\310\275V6\'?\017\261\177?Bh9?\331\325\214%Bh9\277\017\261\177\277V6\'\2776\275\310=\022\321I?\254:}?*h\023?\302\305G\276SHX\277\370Sx\277\']\374\2761\240\224>Y\252d?\010\tq?\312{\317>\025\357\303\276\236\330n\277\330kg\277\345\232\240\276\352Z\361>\007\272v?\032\224[?\023\\`>\3329\016\277(;|\277\002\237M\277s\262\372\275\231g\"?mN\177?\371\256=?\260\n\311<\363\0045\277C\354\177\277J\353+\277\005\251\226=\003\344E?$\023~?\300\177\030?\242\020/\2761\333T\277\235\307y\277=\234\003\277\223\216\210>\230\305a?G\024s?\200\350\332>*D\270\276^\203l\277\247\tj\277\324|\254\276u3\346>\013\372t?\005\276^?\314\317x>\233\365\010\277\276\024{\277=MQ\277\000\000\200?J\353+?6\275\310\275\002\237M\277\276\024{\277=\234\003\2771\240\224>\330kg?^\203l?\324|\254>\352Z\361\276\370Sx\2771\333T\277\203@\026\276\231g\"?\017\261\177?\363\0045?0\373H\275\003\344E\277\254:}\277\3329\016\277\314\317x>\230\305a?\010\tq?\025\357\303>\200\350\332\276\013\372t\277\032\224[\277\302\305G\276\300\177\030?m\304~?\371\256=?w\367S\246\371\256=\277m\304~\277\300\177\030\277\302\305G>\032\224[?\013\372t?\200\350\332>\025\357\303\276\010\tq\277\230\305a\277\314\317x\276\3329\016?\254:}?\003\344E?0\373H=\363\0045\277\017\261\177\277\231g\"\277\203@\026>1\333T?\370Sx?\352Z\361>\324|\254\276^\203l\277\330kg\2771\240\224\276=\234\003?\276\024{?\002\237M?6\275\310=J\353+\277\000\000\200\277J\353+\2776\275\310=\002\237M?\276\024{?=\234\003?1\240\224\276\330kg\277^\203l\277\324|\254\276\352Z\361>\370Sx?1\333T?\203@\026>\231g\"\277\017\261\177\277\363\0045\2770\373H=\003\344E?\254:}?\3329\016?\314\317x\276\230\305a\277\010\tq\277\025\357\303\276\200\350\332>\013\372t?\032\224[?\302\305G>\300\177\030\277m\304~\277\371\256=\2774\203\260\247\371\256=?m\304~?\300\177\030?\302\305G\276\032\224[\277\013\372t\277\200\350\332\276\025\357\303>\010\tq?\230\305a?\314\317x>\3329\016\277\254:}\277\003\344E\2770\373H\275\363\0045?\017\261\177?\231g\"?\203@\026\2761\333T\277\370Sx\277\352Z\361\276\324|\254>^\203l?\330kg?\000\000\200?V6\'?\203@\026\276SHX\277\013\372t\277\312{\317\276\200\350\332>\007\272v?1\333T?s\262\372=J\353+\277C\354\177\277\231g\"\277\242\020/>\032\224[?G\024s?\025\357\303>u3\346\276\370Sx\277=MQ\2776\275\310\275\273\2050?\017\261\177?\321\177\035?\302\305G\276\005\276^\277\010\tq\277*D\270\276\352Z\361>\235\307y?\002\237M?\005\251\226=\363\0045\277mN\177\277\300\177\030\277\023\\`>\230\305a?\236\330n?\324|\254>\']\374\276\276\024{\277\022\321I\2770\373H\275Bh9?m\304~?*h\023?\314\317x\276Y\252d\277^\203l\277\345\232\240\276=\234\003?(;|?\003\344E?\260\n\311<\371\256=\277$\023~\277\3329\016\277\223\216\210>\330kg?\247\tj?1\240\224>\233\365\010\277\254:}\277p\330A\277\3476\215\247p\330A?\254:}?\233\365\010?1\240\224\276\247\tj\277\330kg\277\223\216\210\276\3329\016?$\023~?\371\256=?\260\n\311\274\003\344E\277(;|\277=\234\003\277\345\232\240>^\203l?Y\252d?\314\317x>*h\023\277m\304~\277Bh9\2770\373H=\022\321I?\276\024{?\']\374>\324|\254\276\236\330n\277\230\305a\277\023\\`\276\300\177\030?mN\177?\363\0045?\005\251\226\275\002\237M\277\235\307y\277\352Z\361\276*D\270>\010\tq?\005\276^?\302\305G>\321\177\035\277\017\261\177\277\273\2050\2776\275\310==MQ?\370Sx?u3\346>\025\357\303\276G\024s\277\032\224[\277\242\020/\276\231g\"?C\354\177?J\353+?s\262\372\2751\333T\277\007\272v\277\000\000\200?\231g\"?\302\305G\276\230\305a\277^\203l\2771\240\224\276\3329\016?m\304~?\363\0045?6\275\310\2751\333T\277\013\372t\277\025\357\303\276\352Z\361>\276\024{?\003\344E?X\327\036&\003\344E\277\276\024{\277\352Z\361\276\025\357\303>\013\372t?1\333T?6\275\310=\363\0045\277m\304~\277\3329\016\2771\240\224>^\203l?\230\305a?\302\305G>\231g\"\277\000\000\200\277\231g\"\277\302\305G>\230\305a?^\203l?1\240\224>\3329\016\277m\304~\277\363\0045\2776\275\310=1\333T?\013\372t?\025\357\303>\352Z\361\276\276\024{\277\003\344E\277\202!w\247\003\344E?\276\024{?\352Z\361>\025\357\303\276\013\372t\2771\333T\2776\275\310\275\363\0045?m\304~?\3329\016?1\240\224\276^\203l\277\230\305a\277\302\305G\276\231g\"?\000\000\200?\231g\"?\302\305G\276\230\305a\277^\203l\2771\240\224\276\3329\016?m\304~?\363\0045?6\275\310\2751\333T\277\013\372t\277\025\357\303\276\352Z\361>\276\024{?\003\344E?[\032\215&\003\344E\277\276\024{\277\352Z\361\276\025\357\303>\013\372t?1\333T?6\275\310=\363\0045\277m\304~\277\3329\016\2771\240\224>^\203l?\230\305a?\302\305G>\231g\"\277\000\000\200\277\231g\"\277\302\305G>\230\305a?^\203l?1\240\224>\3329\016\277m\304~\277\363\0045\2776\275\310=1\333T?\013\372t?\025\357\303>\352Z\361\276\276\024{\277\003\344E\277M\016\324&\003\344E?\276\024{?\352Z\361>\025\357\303\276\013\372t\2771\333T\2776\275\310\275\363\0045?m\304~?\000\000\200?\321\177\035?\314\317x\276\247\tj\277\230\305a\277\242\020/\276J\353+?mN\177?\3329\016?\345\232\240\276\010\tq\277SHX\2776\275\310\275Bh9?\254:}?\']\374>\025\357\303\276\007\272v\277\002\237M\277\260\n\311\274\003\344E?\235\307y?\200\350\332>u3\346\276\276\024{\277p\330A\2770\373H==MQ?\013\372t?*D\270>=\234\003\277$\023~\277\363\0045\277s\262\372=\032\224[?\236\330n?1\240\224>*h\023\277\017\261\177\277V6\'\277\302\305G>Y\252d?\330kg?\023\\`>\231g\"\277C\354\177\277\300\177\030\277\223\216\210>^\203l?\005\276^?\203@\026>\273\2050\277m\304~\277\233\365\010\277\324|\254>G\024s?1\333T?\005\251\226=\371\256=\277(;|\277\352Z\361\276\312{\317>\370Sx?\022\321I?\205\003\r&\022\321I\277\370Sx\277\312{\317\276\352Z\361>(;|?\371\256=?\005\251\226\2751\333T\277G\024s\277\324|\254\276\233\365\010?m\304~?\273\2050?\203@\026\276\005\276^\277^\203l\277\223\216\210\276\300\177\030?C\354\177?\231g\"?\023\\`\276\330kg\277Y\252d\277\302\305G\276V6\'?\017\261\177?*h\023?1\240\224\276\236\330n\277\032\224[\277s\262\372\275\363\0045?$\023~?=\234\003?*D\270\276\013\372t\277=MQ\2770\373H\275p\330A?\276\024{?u3\346>\200\350\332\276\235\307y\277\003\344E\277\260\n\311<\002\237M?\007\272v?\025\357\303>\']\374\276\254:}\277Bh9\2776\275\310=SHX?\010\tq?\345\232\240>\3329\016\277mN\177\277\000\000\200?\300\177\030?1\240\224\276\010\tq\2771\333T\2770\373H\275\003\344E?\370Sx?\025\357\303>=\234\003\277m\304~\277J\353+\277\302\305G>\330kg?\230\305a?\203@\026>\363\0045\277\254:}\277\352Z\361\276\200\350\332>\276\024{?\371\256=?6\275\310\275\032\224[\277^\203l\277\314\317x\276\231g\"?\017\261\177?\3329\016?\324|\254\276\013\372t\277\002\237M\2775\325S\247\002\237M?\013\372t?\324|\254>\3329\016\277\017\261\177\277\231g\"\277\314\317x>^\203l?\032\224[?6\275\310=\371\256=\277\276\024{\277\200\350\332\276\352Z\361>\254:}?\363\0045?\203@\026\276\230\305a\277\330kg\277\302\305G\276J\353+?m\304~?=\234\003?\025\357\303\276\370Sx\277\003\344E\2770\373H=1\333T?\010\tq?1\240\224>\300\177\030\277\000\000\200\277\300\177\030\2771\240\224>\010\tq?1\333T?0\373H=\003\344E\277\370Sx\277\025\357\303\276=\234\003?m\304~?J\353+?\302\305G\276\330kg\277\230\305a\277\203@\026\276\363\0045?\254:}?\352Z\361>\200\350\332\276\276\024{\277\371\256=\2776\275\310=\032\224[?^\203l?\314\317x>\231g\"\277\017\261\177\277\3329\016\277\324|\254>\013\372t?\002\237M?\350\337\036(\002\237M\277\013\372t\277\324|\254\276\3329\016?\017\261\177?\231g\"?\314\317x\276^\203l\277\032\224[\2776\275\310\275\371\256=?\276\024{?\200\350\332>\352Z\361\276\254:}\277\363\0045\277\203@\026>\230\305a?\330kg?\302\305G>J\353+\277m\304~\277=\234\003\277\025\357\303>\370Sx?\000\000\200?*h\023?\324|\254\276\007\272v\277\003\344E\277\005\251\226=\032\224[?\247\tj?\302\305G>\273\2050\277\254:}\277u3\346\276\352Z\361>$\023~?J\353+?\023\\`\276^\203l\277SHX\2770\373H\275\022\321I?\013\372t?\345\232\240>\300\177\030\277C\354\177\277\3329\016\277*D\270>\370Sx?p\330A?6\275\310\275\005\276^\277\330kg\277\242\020/\276\363\0045?(;|?\200\350\332>\']\374\276m\304~\277V6\'\277\314\317x>\236\330n?1\333T?\260\n\311<\002\237M\277G\024s\2771\240\224\276\321\177\035?\017\261\177?\233\365\010?\025\357\303\276\235\307y\277\371\256=\277s\262\372=\230\305a?Y\252d?\203@\026>Bh9\277\276\024{\277\312{\317\276=\234\003?mN\177?\231g\"?\223\216\210\276\010\tq\277=MQ\277\372\t\226\247=MQ?\010\tq?\223\216\210>\231g\"\277mN\177\277=\234\003\277\312{\317>\276\024{?Bh9?\203@\026\276Y\252d\277\230\305a\277s\262\372\275\371\256=?\235\307y?\025\357\303>\233\365\010\277\017\261\177\277\321\177\035\2771\240\224>G\024s?\002\237M?\260\n\311\2741\333T\277\236\330n\277\314\317x\276V6\'?m\304~?\']\374>\200\350\332\276(;|\277\363\0045\277\242\020/>\330kg?\005\276^?6\275\310=p\330A\277\370Sx\277*D\270\276\3329\016?C\354\177?\300\177\030?\345\232\240\276\013\372t\277\022\321I\2770\373H=SHX?^\203l?\023\\`>J\353+\277$\023~\277\352Z\361\276u3\346>\254:}?\273\2050?\302\305G\276\247\tj\277\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?~}\260%1\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277\017/B\2471\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?\212\214\215\2451\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277\3476\215\2471\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?[\032\215&1\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277sS\r\'1\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?\373\262\'(1\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277\246u\345\2471\333T?\000\000\200?\233\365\010?\200\350\332\276$\023~\277\231g\"\277\345\232\240>\370Sx?Bh9?\302\305G\276\236\330n\277\002\237M\277\005\251\226=\230\305a?\005\276^?0\373H==MQ\277^\203l\277\242\020/\276\371\256=?\007\272v?1\240\224>V6\'\277\254:}\277\312{\317\276\3329\016?C\354\177?=\234\003?u3\346\276m\304~\277\321\177\035\277\324|\254>\235\307y?\363\0045?\023\\`\276\010\tq\277\022\321I\2776\275\310=Y\252d?\032\224[?\260\n\311<1\333T\277\247\tj\277\203@\026\276p\330A?\013\372t?\223\216\210>J\353+\277(;|\277\025\357\303\276*h\023?\017\261\177?\']\374>\352Z\361\276mN\177\277\300\177\030\277*D\270>\276\024{?\273\2050?\314\317x\276G\024s\277\003\344E\277s\262\372=\330kg?SHX?\3029\r(SHX\277\330kg\277s\262\372\275\003\344E?G\024s?\314\317x>\273\2050\277\276\024{\277*D\270\276\300\177\030?mN\177?\352Z\361>\']\374\276\017\261\177\277*h\023\277\025\357\303>(;|?J\353+?\223\216\210\276\013\372t\277p\330A\277\203@\026>\247\tj?1\333T?\260\n\311\274\032\224[\277Y\252d\2776\275\310\275\022\321I?\010\tq?\023\\`>\363\0045\277\235\307y\277\324|\254\276\321\177\035?m\304~?u3\346>=\234\003\277C\354\177\277\3329\016\277\312{\317>\254:}?V6\'?1\240\224\276\007\272v\277\371\256=\277\242\020/>^\203l?=MQ?0\373H\275\005\276^\277\230\305a\277\005\251\226\275\002\237M?\236\330n?\302\305G>Bh9\277\000\000\200?=\234\003?\352Z\361\276\017\261\177\277\3329\016\277\200\350\332>m\304~?\300\177\030?\025\357\303\276\254:}\277\231g\"\277\324|\254>\276\024{?J\353+?1\240\224\276\370Sx\277\363\0045\277\314\317x>\013\372t?\371\256=?\302\305G\276\010\tq\277\003\344E\277\203@\026>^\203l?\002\237M?6\275\310\275\330kg\2771\333T\2770\373H=\230\305a?\032\224[?\336^\r\246\032\224[\277\230\305a\2770\373H\2751\333T?\330kg?6\275\310=\002\237M\277^\203l\277\203@\026\276\003\344E?\010\tq?\302\305G>\371\256=\277\013\372t\277\314\317x\276\363\0045?\370Sx?1\240\224>J\353+\277\276\024{\277\324|\254\276\231g\"?\254:}?\025\357\303>\300\177\030\277m\304~\277\200\350\332\276\3329\016?\017\261\177?\352Z\361>=\234\003\277\000\000\200\277=\234\003\277\352Z\361>\017\261\177?\3329\016?\200\350\332\276m\304~\277\300\177\030\277\025\357\303>\254:}?\231g\"?\324|\254\276\276\024{\277J\353+\2771\240\224>\370Sx?\363\0045?\314\317x\276\013\372t\277\371\256=\277\302\305G>\010\tq?\003\344E?\203@\026\276^\203l\277\002\237M\2776\275\310=\330kg?1\333T?0\373H\275\230\305a\277\032\224[\277M\016\324&\032\224[?\230\305a?0\373H=1\333T\277\330kg\2776\275\310\275\002\237M?^\203l?\203@\026>\003\344E\277\010\tq\277\302\305G\276\371\256=?\013\372t?\314\317x>\363\0045\277\370Sx\2771\240\224\276J\353+?\276\024{?\324|\254>\231g\"\277\254:}\277\025\357\303\276\300\177\030?\000\000\200?\']\374>=\234\003\277C\354\177\277\352Z\361\276\233\365\010?\017\261\177?u3\346>\3329\016\277mN\177\277\200\350\332\276*h\023?m\304~?\312{\317>\300\177\030\277$\023~\277\025\357\303\276\321\177\035?\254:}?*D\270>\231g\"\277(;|\277\324|\254\276V6\'?\276\024{?\345\232\240>J\353+\277\235\307y\2771\240\224\276\273\2050?\370Sx?\223\216\210>\363\0045\277\007\272v\277\314\317x\276Bh9?\013\372t?\023\\`>\371\256=\277G\024s\277\302\305G\276p\330A?\010\tq?\242\020/>\003\344E\277\236\330n\277\203@\026\276\022\321I?^\203l?s\262\372=\002\237M\277\247\tj\2776\275\310\275=MQ?\330kg?\005\251\226=1\333T\277Y\252d\2770\373H\275SHX?\230\305a?\260\n\311<\032\224[\277\005\276^\277\r\335\236\247\005\276^?\032\224[?\260\n\311\274\230\305a\277SHX\2770\373H=Y\252d?1\333T?\005\251\226\275\330kg\277=MQ\2776\275\310=\247\tj?\002\237M?s\262\372\275^\203l\277\022\321I\277\203@\026>\236\330n?\003\344E?\242\020/\276\010\tq\277p\330A\277\302\305G>G\024s?\371\256=?\023\\`\276\013\372t\277Bh9\277\314\317x>\007\272v?\363\0045?\223\216\210\276\370Sx\277\273\2050\2771\240\224>\235\307y?J\353+?\345\232\240\276\276\024{\277V6\'\277\324|\254>(;|?\231g\"?*D\270\276\254:}\277\321\177\035\277\025\357\303>$\023~?\300\177\030?\312{\317\276m\304~\277*h\023\277\200\350\332>mN\177?\3329\016?u3\346\276\000\000\200?\352Z\361>\3329\016\277m\304~\277\025\357\303\276\231g\"?\276\024{?1\240\224>\363\0045\277\013\372t\277\302\305G\276\003\344E?^\203l?6\275\310=1\333T\277\230\305a\277\351\2100\247\230\305a?1\333T?6\275\310\275^\203l\277\003\344E\277\302\305G>\013\372t?\363\0045?1\240\224\276\276\024{\277\231g\"\277\025\357\303>m\304~?\3329\016?\352Z\361\276\000\000\200\277\352Z\361\276\3329\016?m\304~?\025\357\303>\231g\"\277\276\024{\2771\240\224\276\363\0045?\013\372t?\302\305G>\003\344E\277^\203l\2776\275\310\2751\333T?\230\305a?\331\325\214%\230\305a\2771\333T\2776\275\310=^\203l?\003\344E?\302\305G\276\013\372t\277\363\0045\2771\240\224>\276\024{?\231g\"?\025\357\303\276m\304~\277\3329\016\277\352Z\361>\000\000\200?\352Z\361>\3329\016\277m\304~\277\025\357\303\276\231g\"?\276\024{?1\240\224>\363\0045\277\013\372t\277\302\305G\276\003\344E?^\203l?6\275\310=1\333T\277\230\305a\277sS\r\'\230\305a?1\333T?6\275\310\275^\203l\277\003\344E\277\302\305G>\013\372t?\363\0045?1\240\224\276\276\024{\277\231g\"\277\025\357\303>m\304~?\3329\016?\352Z\361\276\000\000\200\277\352Z\361\276\3329\016?m\304~?\025\357\303>\231g\"\277\276\024{\2771\240\224\276\363\0045?\013\372t?\302\305G>\003\344E\277^\203l\2776\275\310\2751\333T?\230\305a?_\276S\'\230\305a\2771\333T\2776\275\310=^\203l?\003\344E?\302\305G\276\013\372t\277\363\0045\2771\240\224>\000\000\200?u3\346>\300\177\030\277(;|\2771\240\224\276Bh9?\010\tq?s\262\372=1\333T\277\005\276^\2770\373H=\247\tj?\003\344E?\023\\`\276\370Sx\277V6\'\277\025\357\303>mN\177?=\234\003?\233\365\010\277m\304~\277*D\270\276J\353+?\007\272v?\302\305G>\022\321I\277\330kg\277\260\n\311\274\230\305a?=MQ?\203@\026\276G\024s\277\363\0045\277\345\232\240>\254:}?*h\023?\352Z\361\276C\354\177\277\200\350\332\276\321\177\035?\276\024{?\223\216\210>\371\256=\277\236\330n\2776\275\310\275SHX?\032\224[?\005\251\226\275^\203l\277p\330A\277\314\317x>\235\307y?\231g\"?\312{\317\276\017\261\177\277\']\374\276\3329\016?$\023~?\324|\254>\273\2050\277\013\372t\277\242\020/\276\002\237M?Y\252d?[\032\215&Y\252d\277\002\237M\277\242\020/>\013\372t?\273\2050?\324|\254\276$\023~\277\3329\016\277\']\374>\017\261\177?\312{\317>\231g\"\277\235\307y\277\314\317x\276p\330A?^\203l?\005\251\226=\032\224[\277SHX\2776\275\310=\236\330n?\371\256=?\223\216\210\276\276\024{\277\321\177\035\277\200\350\332>C\354\177?\352Z\361>*h\023\277\254:}\277\345\232\240\276\363\0045?G\024s?\203@\026>=MQ\277\230\305a\277\260\n\311<\330kg?\022\321I?\302\305G\276\007\272v\277J\353+\277*D\270>m\304~?\233\365\010?=\234\003\277mN\177\277\025\357\303\276V6\'?\370Sx?\023\\`>\003\344E\277\247\tj\2770\373H\275\005\276^?1\333T?s\262\372\275\000\000\200?\200\350\332>\231g\"\277\370Sx\277\302\305G\276\002\237M?\230\305a?0\373H\275^\203l\277\371\256=\2771\240\224>\254:}?\3329\016?=\234\003\277m\304~\277\324|\254\276\363\0045?\010\tq?6\275\310=\032\224[\2771\333T\277\203@\026>\013\372t?J\353+?\025\357\303\276\017\261\177\277\352Z\361\276\300\177\030?\276\024{?\314\317x>\003\344E\277\330kg\277\\{e\247\330kg?\003\344E?\314\317x\276\276\024{\277\300\177\030\277\352Z\361>\017\261\177?\025\357\303>J\353+\277\013\372t\277\203@\026\2761\333T?\032\224[?6\275\310\275\010\tq\277\363\0045\277\324|\254>m\304~?=\234\003?\3329\016\277\254:}\2771\240\224\276\371\256=?^\203l?0\373H=\230\305a\277\002\237M\277\302\305G>\370Sx?\231g\"?\200\350\332\276\000\000\200\277\200\350\332\276\231g\"?\370Sx?\302\305G>\002\237M\277\230\305a\2770\373H=^\203l?\371\256=?1\240\224\276\254:}\277\3329\016\277=\234\003?m\304~?\324|\254>\363\0045\277\010\tq\2776\275\310\275\032\224[?1\333T?\203@\026\276\013\372t\277J\353+\277\025\357\303>\017\261\177?\352Z\361>\300\177\030\277\276\024{\277\314\317x\276\003\344E?\330kg?\023r0\'\330kg\277\003\344E\277\314\317x>\276\024{?\300\177\030?\352Z\361\276\017\261\177\277\025\357\303\276J\353+?\013\372t?\203@\026>1\333T\277\032\224[\2776\275\310=\010\tq?\363\0045?\324|\254\276m\304~\277=\234\003\277\3329\016?\254:}?1\240\224>\371\256=\277^\203l\2770\373H\275\000\000\200?\312{\317>J\353+\277G\024s\2776\275\310\275\005\276^?\002\237M?\023\\`\276\276\024{\277*h\023\277=\234\003?$\023~?1\240\224>p\330A\277\330kg\277\260\n\311<^\203l?Bh9?\324|\254\276mN\177\277\352Z\361\276\321\177\035?\370Sx?\242\020/>1\333T\277SHX\277\203@\026>\007\272v?\231g\"?u3\346\276\017\261\177\277*D\270\276\363\0045?\236\330n?0\373H=Y\252d\277\003\344E\277\223\216\210>\254:}?\233\365\010?\3329\016\277(;|\277\314\317x\276\022\321I?\230\305a?\005\251\226\275\010\tq\277\273\2050\277\025\357\303>C\354\177?\200\350\332>V6\'\277\013\372t\277s\262\372\275\032\224[?=MQ?\302\305G\276\235\307y\277\300\177\030\277\']\374>m\304~?\345\232\240>\371\256=\277\247\tj\277\277\2370\'\247\tj?\371\256=?\345\232\240\276m\304~\277\']\374\276\300\177\030?\235\307y?\302\305G>=MQ\277\032\224[\277s\262\372=\013\372t?V6\'?\200\350\332\276C\354\177\277\025\357\303\276\273\2050?\010\tq?\005\251\226=\230\305a\277\022\321I\277\314\317x>(;|?\3329\016?\233\365\010\277\254:}\277\223\216\210\276\003\344E?Y\252d?0\373H\275\236\330n\277\363\0045\277*D\270>\017\261\177?u3\346>\231g\"\277\007\272v\277\203@\026\276SHX?1\333T?\242\020/\276\370Sx\277\321\177\035\277\352Z\361>mN\177?\324|\254>Bh9\277^\203l\277\260\n\311\274\330kg?p\330A?1\240\224\276$\023~\277=\234\003\277*h\023?\276\024{?\023\\`>\000\000\200?\025\357\303>\363\0045\277^\203l\277\312\311S\245^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?X\327\036&^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\017/B\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\336^\r\246^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\202!w\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\331\325\214%^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\372\t\226\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?[\032\215&^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\2774\203\260\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\350\337\036(^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277M\016\324&^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\023r0\'^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\246u\345\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?!Y9(^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277p\367\177\250^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\000\000\200?*D\270>\371\256=\277Y\252d\2776\275\310=\007\272v?\300\177\030?\233\365\010\277\276\024{\277\242\020/\276\032\224[?\022\321I?1\240\224\276mN\177\277\200\350\332\276\273\2050?^\203l?\260\n\311\274\010\tq\277V6\'\277\352Z\361>$\023~?\314\317x>=MQ\2771\333T\277\023\\`>\254:}?\']\374>\231g\"\277G\024s\2770\373H\275\247\tj?\363\0045?\312{\317\276\017\261\177\277\345\232\240\276\003\344E?\005\276^?\203@\026\276\235\307y\277\3329\016\277*h\023?\370Sx?s\262\372=\230\305a\277p\330A\277\324|\254>C\354\177?\025\357\303>Bh9\277\330kg\277\005\251\226=\013\372t?\321\177\035?=\234\003\277(;|\277\302\305G\276SHX?\002\237M?\223\216\210\276m\304~\277u3\346\276J\353+?\236\330n?\325\014\026(\236\330n\277J\353+\277u3\346>m\304~?\223\216\210>\002\237M\277SHX\277\302\305G>(;|?=\234\003?\321\177\035\277\013\372t\277\005\251\226\275\330kg?Bh9?\025\357\303\276C\354\177\277\324|\254\276p\330A?\230\305a?s\262\372\275\370Sx\277*h\023\277\3329\016?\235\307y?\203@\026>\005\276^\277\003\344E\277\345\232\240>\017\261\177?\312{\317>\363\0045\277\247\tj\2770\373H=G\024s?\231g\"?\']\374\276\254:}\277\023\\`\2761\333T?=MQ?\314\317x\276$\023~\277\352Z\361\276V6\'?\010\tq?\260\n\311<^\203l\277\273\2050\277\200\350\332>mN\177?1\240\224>\022\321I\277\032\224[\277\242\020/>\276\024{?\233\365\010?\000\000\200?\324|\254>\003\344E\277\032\224[\277\302\305G>\254:}?\352Z\361>J\353+\277^\203l\2770\373H=\013\372t?\300\177\030?\3329\016\277\370Sx\2776\275\310\275\330kg?\363\0045?\200\350\332\276m\304~\277\314\317x\2761\333T?\002\237M?1\240\224\276\017\261\177\277\025\357\303\276\371\256=?\230\305a?\203@\026\276\276\024{\277=\234\003\277\231g\"?\010\tq?\212\214\215\245\010\tq\277\231g\"\277=\234\003?\276\024{?\203@\026>\230\305a\277\371\256=\277\025\357\303>\017\261\177?1\240\224>\002\237M\2771\333T\277\314\317x>m\304~?\200\350\332>\363\0045\277\330kg\2776\275\310=\370Sx?\3329\016?\300\177\030\277\013\372t\2770\373H\275^\203l?J\353+?\352Z\361\276\254:}\277\302\305G\276\032\224[?\003\344E?\324|\254\276\000\000\200\277\324|\254\276\003\344E?\032\224[?\302\305G\276\254:}\277\352Z\361\276J\353+?^\203l?0\373H\275\013\372t\277\300\177\030\277\3329\016?\370Sx?6\275\310=\330kg\277\363\0045\277\200\350\332>m\304~?\314\317x>1\333T\277\002\237M\2771\240\224>\017\261\177?\025\357\303>\371\256=\277\230\305a\277\203@\026>\276\024{?=\234\003?\231g\"\277\010\tq\277\246u\345\247\010\tq?\231g\"?=\234\003\277\276\024{\277\203@\026\276\230\305a?\371\256=?\025\357\303\276\017\261\177\2771\240\224\276\002\237M?1\333T?\314\317x\276m\304~\277\200\350\332\276\363\0045?\330kg?6\275\310\275\370Sx\277\3329\016\277\300\177\030?\013\372t?0\373H=^\203l\277J\353+\277\000\000\200?\345\232\240>\002\237M\277=MQ\2771\240\224>C\354\177?\324|\254>\022\321I\2771\333T\277\223\216\210>\017\261\177?*D\270>\003\344E\277SHX\277\314\317x>mN\177?\025\357\303>p\330A\277\032\224[\277\023\\`>m\304~?\312{\317>\371\256=\277\005\276^\277\302\305G>$\023~?\200\350\332>Bh9\277\230\305a\277\242\020/>\254:}?u3\346>\363\0045\277Y\252d\277\203@\026>(;|?\352Z\361>\273\2050\277\330kg\277s\262\372=\276\024{?\']\374>J\353+\277\247\tj\2776\275\310=\235\307y?=\234\003?V6\'\277^\203l\277\005\251\226=\370Sx?\233\365\010?\231g\"\277\236\330n\2770\373H=\007\272v?\3329\016?\321\177\035\277\010\tq\277\260\n\311<\013\372t?*h\023?\300\177\030\277G\024s\2774\203\260\247G\024s?\300\177\030?*h\023\277\013\372t\277\260\n\311\274\010\tq?\321\177\035?\3329\016\277\007\272v\2770\373H\275\236\330n?\231g\"?\233\365\010\277\370Sx\277\005\251\226\275^\203l?V6\'?=\234\003\277\235\307y\2776\275\310\275\247\tj?J\353+?\']\374\276\276\024{\277s\262\372\275\330kg?\273\2050?\352Z\361\276(;|\277\203@\026\276Y\252d?\363\0045?u3\346\276\254:}\277\242\020/\276\230\305a?Bh9?\200\350\332\276$\023~\277\302\305G\276\005\276^?\371\256=?\312{\317\276m\304~\277\023\\`\276\032\224[?p\330A?\025\357\303\276mN\177\277\314\317x\276SHX?\003\344E?*D\270\276\017\261\177\277\223\216\210\2761\333T?\022\321I?\000\000\200?1\240\224>1\333T\277\003\344E\277\025\357\303>m\304~?\302\305G>\230\305a\277\363\0045\277\352Z\361>\276\024{?6\275\310=^\203l\277\231g\"\277\3329\016?\013\372t?\010H\215\246\013\372t\277\3329\016\277\231g\"?^\203l?6\275\310\275\276\024{\277\352Z\361\276\363\0045?\230\305a?\302\305G\276m\304~\277\025\357\303\276\003\344E?1\333T?1\240\224\276\000\000\200\2771\240\224\2761\333T?\003\344E?\025\357\303\276m\304~\277\302\305G\276\230\305a?\363\0045?\352Z\361\276\276\024{\2776\275\310\275^\203l?\231g\"?\3329\016\277\013\372t\277\372\t\226\247\013\372t?\3329\016?\231g\"\277^\203l\2776\275\310=\276\024{?\352Z\361>\363\0045\277\230\305a\277\302\305G>m\304~?\025\357\303>\003\344E\2771\333T\2771\240\224>\000\000\200?1\240\224>1\333T\277\003\344E\277\025\357\303>m\304~?\302\305G>\230\305a\277\363\0045\277\352Z\361>\276\024{?6\275\310=^\203l\277\231g\"\277\3329\016?\013\372t?\373\262\'(\013\372t\277\3329\016\277\231g\"?^\203l?6\275\310\275\276\024{\277\352Z\361\276\363\0045?\230\305a?\302\305G\276m\304~\277\025\357\303\276\003\344E?1\333T?1\240\224\276\000\000\200\2771\240\224\2761\333T?\003\344E?\025\357\303\276m\304~\277\302\305G\276\230\305a?\363\0045?\352Z\361\276\276\024{\2776\275\310\275^\203l?\231g\"?\3329\016\277\013\372t\277\371`\004\250\013\372t?\3329\016?\231g\"\277^\203l\2776\275\310=\276\024{?\352Z\361>\363\0045\277\230\305a\277\000\000\200?\223\216\210>\032\224[\277Bh9\277\352Z\361>\235\307y?0\373H=G\024s\277\3329\016\277V6\'?\330kg?\242\020/\276m\304~\277*D\270\276\002\237M?\022\321I?\025\357\303\276$\023~\277\203@\026\276\247\tj?\231g\"?*h\023\277\010\tq\277\005\251\226=\276\024{?u3\346>\371\256=\277SHX\2771\240\224>C\354\177?\314\317x>\005\276^\277\363\0045\277\']\374>\370Sx?\260\n\311<\013\372t\277\233\365\010\277J\353+?Y\252d?\302\305G\276mN\177\277\324|\254\276=MQ?\003\344E?\312{\317\276\254:}\277s\262\372\275^\203l?\321\177\035?\300\177\030\277\236\330n\2776\275\310=(;|?\200\350\332>p\330A\2771\333T\277\345\232\240>\017\261\177?\023\\`>\230\305a\277\273\2050\277=\234\003?\007\272v?\364\262\323&\007\272v\277=\234\003\277\273\2050?\230\305a?\023\\`\276\017\261\177\277\345\232\240\2761\333T?p\330A?\200\350\332\276(;|\2776\275\310\275\236\330n?\300\177\030?\321\177\035\277^\203l\277s\262\372=\254:}?\312{\317>\003\344E\277=MQ\277\324|\254>mN\177?\302\305G>Y\252d\277J\353+\277\233\365\010?\013\372t?\260\n\311\274\370Sx\277\']\374\276\363\0045?\005\276^?\314\317x\276C\354\177\2771\240\224\276SHX?\371\256=?u3\346\276\276\024{\277\005\251\226\275\010\tq?*h\023?\231g\"\277\247\tj\277\203@\026>$\023~?\025\357\303>\022\321I\277\002\237M\277*D\270>m\304~?\242\020/>\330kg\277V6\'\277\3329\016?G\024s?\000\000\200?\314\317x>\230\305a\277J\353+\277\3329\016?\010\tq?6\275\310\275\254:}\277\025\357\303\276\002\237M?\003\344E?\200\350\332\276\276\024{\2770\373H\275\013\372t?=\234\003?\363\0045\277\032\224[\2771\240\224>\017\261\177?\302\305G>\330kg\277\231g\"\277\300\177\030?^\203l?\203@\026\276m\304~\277\324|\254\2761\333T?\371\256=?\352Z\361\276\370Sx\277\202!w\247\370Sx?\352Z\361>\371\256=\2771\333T\277\324|\254>m\304~?\203@\026>^\203l\277\300\177\030\277\231g\"?\330kg?\302\305G\276\017\261\177\2771\240\224\276\032\224[?\363\0045?=\234\003\277\013\372t\2770\373H=\276\024{?\200\350\332>\003\344E\277\002\237M\277\025\357\303>\254:}?6\275\310=\010\tq\277\3329\016\277J\353+?\230\305a?\314\317x\276\000\000\200\277\314\317x\276\230\305a?J\353+?\3329\016\277\010\tq\2776\275\310=\254:}?\025\357\303>\002\237M\277\003\344E\277\200\350\332>\276\024{?0\373H=\013\372t\277=\234\003\277\363\0045?\032\224[?1\240\224\276\017\261\177\277\302\305G\276\330kg?\231g\"?\300\177\030\277^\203l\277\203@\026>m\304~?\324|\254>1\333T\277\371\256=\277\352Z\361>\370Sx?!Y9(\370Sx\277\352Z\361\276\371\256=?1\333T?\324|\254\276m\304~\277\203@\026\276^\203l?\300\177\030?\231g\"\277\330kg\277\302\305G>\017\261\177?1\240\224>\032\224[\277\363\0045\277=\234\003?\013\372t?0\373H\275\276\024{\277\200\350\332\276\003\344E?\002\237M?\025\357\303\276\254:}\277\000\000\200?\023\\`>\330kg\277\321\177\035\277\231g\"?Y\252d?\314\317x\276C\354\177\277\302\305G\276\247\tj?\300\177\030?V6\'\277\230\305a\277\223\216\210>\017\261\177?\242\020/>^\203l\277*h\023\277J\353+?\005\276^?1\240\224\276mN\177\277\203@\026\276\236\330n?\3329\016?\273\2050\277\032\224[\277\345\232\240>m\304~?s\262\372=\010\tq\277\233\365\010\277\363\0045?SHX?\324|\254\276$\023~\2776\275\310\275G\024s?=\234\003?Bh9\2771\333T\277*D\270>\254:}?\005\251\226=\013\372t\277\']\374\276\371\256=?=MQ?\025\357\303\276(;|\2770\373H\275\007\272v?\352Z\361>p\330A\277\002\237M\277\312{\317>\276\024{?\260\n\311<\370Sx\277u3\346\276\003\344E?\022\321I?\200\350\332\276\235\307y\277sS\r\'\235\307y?\200\350\332>\022\321I\277\003\344E\277u3\346>\370Sx?\260\n\311\274\276\024{\277\312{\317\276\002\237M?p\330A?\352Z\361\276\007\272v\2770\373H=(;|?\025\357\303>=MQ\277\371\256=\277\']\374>\013\372t?\005\251\226\275\254:}\277*D\270\2761\333T?Bh9?=\234\003\277G\024s\2776\275\310=$\023~?\324|\254>SHX\277\363\0045\277\233\365\010?\010\tq?s\262\372\275m\304~\277\345\232\240\276\032\224[?\273\2050?\3329\016\277\236\330n\277\203@\026>mN\177?1\240\224>\005\276^\277J\353+\277*h\023?^\203l?\242\020/\276\017\261\177\277\223\216\210\276\230\305a?V6\'?\300\177\030\277\247\tj\277\302\305G>C\354\177?\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\027\026\367\245\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?\336^\r\246\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\3476\215\247\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?\325\014\026(\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277M\016\324&\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?_\276S\'\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\371`\004\250\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?\225\2660\247\276\024{\277\000\000\200?\242\020/>\010\tq\277\']\374\276\003\344E?p\330A?=\234\003\277\236\330n\277\302\305G>C\354\177?\203@\026>G\024s\277\352Z\361\276\022\321I?\371\256=?\233\365\010\277^\203l\277\023\\`>\017\261\177?s\262\372=\013\372t\277u3\346\276\002\237M?Bh9?\3329\016\277\247\tj\277\314\317x>mN\177?6\275\310=\007\272v\277\200\350\332\276=MQ?\363\0045?*h\023\277\330kg\277\223\216\210>m\304~?\005\251\226=\370Sx\277\312{\317\2761\333T?\273\2050?\300\177\030\277Y\252d\2771\240\224>$\023~?0\373H=\235\307y\277\025\357\303\276SHX?J\353+?\321\177\035\277\230\305a\277\345\232\240>\254:}?\260\n\311<\276\024{\277*D\270\276\032\224[?V6\'?\231g\"\277\005\276^\277\324|\254>(;|?\350\337\036((;|\277\324|\254\276\005\276^?\231g\"?V6\'\277\032\224[\277*D\270>\276\024{?\260\n\311\274\254:}\277\345\232\240\276\230\305a?\321\177\035?J\353+\277SHX\277\025\357\303>\235\307y?0\373H\275$\023~\2771\240\224\276Y\252d?\300\177\030?\273\2050\2771\333T\277\312{\317>\370Sx?\005\251\226\275m\304~\277\223\216\210\276\330kg?*h\023?\363\0045\277=MQ\277\200\350\332>\007\272v?6\275\310\275mN\177\277\314\317x\276\247\tj?\3329\016?Bh9\277\002\237M\277u3\346>\013\372t?s\262\372\275\017\261\177\277\023\\`\276^\203l?\233\365\010?\371\256=\277\022\321I\277\352Z\361>G\024s?\203@\026\276C\354\177\277\302\305G\276\236\330n?\000\000\200?\203@\026>\013\372t\277\200\350\332\2761\333T?J\353+?\231g\"\277\032\224[\277\025\357\303>\370Sx?6\275\310\275\017\261\177\277\302\305G\276\010\tq?\352Z\361>\002\237M\277\363\0045\277\300\177\030?\230\305a?\324|\254\276\276\024{\2770\373H=m\304~?\314\317x>^\203l\277=\234\003\277\003\344E?\371\256=?\3329\016\277\330kg\2771\240\224>\254:}?\333\2606\241\254:}\2771\240\224\276\330kg?\3329\016?\371\256=\277\003\344E\277=\234\003?^\203l?\314\317x\276m\304~\2770\373H\275\276\024{?\324|\254>\230\305a\277\300\177\030\277\363\0045?\002\237M?\352Z\361\276\010\tq\277\302\305G>\017\261\177?6\275\310=\370Sx\277\025\357\303\276\032\224[?\231g\"?J\353+\2771\333T\277\200\350\332>\013\372t?\203@\026\276\000\000\200\277\203@\026\276\013\372t?\200\350\332>1\333T\277J\353+\277\231g\"?\032\224[?\025\357\303\276\370Sx\2776\275\310=\017\261\177?\302\305G>\010\tq\277\352Z\361\276\002\237M?\363\0045?\300\177\030\277\230\305a\277\324|\254>\276\024{?0\373H\275m\304~\277\314\317x\276^\203l?=\234\003?\003\344E\277\371\256=\277\3329\016?\330kg?1\240\224\276\254:}\277p\367\177\250\254:}?1\240\224>\330kg\277\3329\016\277\371\256=?\003\344E?=\234\003\277^\203l\277\314\317x>m\304~?0\373H=\276\024{\277\324|\254\276\230\305a?\300\177\030?\363\0045\277\002\237M\277\352Z\361>\010\tq?\302\305G\276\017\261\177\2776\275\310\275\370Sx?\025\357\303>\032\224[\277\000\000\200?s\262\372=\370Sx\277*D\270\276\230\305a?*h\023?\371\256=\277p\330A\277\3329\016?Y\252d?\324|\254\276\235\307y\2776\275\310=C\354\177?\203@\026>\007\272v\277\025\357\303\276\005\276^?\300\177\030?Bh9\277\003\344E\277\233\365\010?\330kg?\345\232\240\276\276\024{\277\005\251\226=\017\261\177?\242\020/>\013\372t\277\312{\317\276\032\224[?\321\177\035?\363\0045\277\022\321I\277=\234\003?\247\tj?1\240\224\276(;|\2770\373H=mN\177?\302\305G>G\024s\277\200\350\332\276SHX?\231g\"?\273\2050\277\002\237M\277\']\374>^\203l?\223\216\210\276\254:}\277\260\n\311<m\304~?\023\\`>\010\tq\277u3\346\2761\333T?V6\'?J\353+\277=MQ\277\352Z\361>\236\330n?\314\317x\276$\023~\277Z)\302\247$\023~?\314\317x>\236\330n\277\352Z\361\276=MQ?J\353+?V6\'\2771\333T\277u3\346>\010\tq?\023\\`\276m\304~\277\260\n\311\274\254:}?\223\216\210>^\203l\277\']\374\276\002\237M?\273\2050?\231g\"\277SHX\277\200\350\332>G\024s?\302\305G\276mN\177\2770\373H\275(;|?1\240\224>\247\tj\277=\234\003\277\022\321I?\363\0045?\321\177\035\277\032\224[\277\312{\317>\013\372t?\242\020/\276\017\261\177\277\005\251\226\275\276\024{?\345\232\240>\330kg\277\233\365\010\277\003\344E?Bh9?\300\177\030\277\005\276^\277\025\357\303>\007\272v?\203@\026\276C\354\177\2776\275\310\275\235\307y?\324|\254>Y\252d\277\3329\016\277p\330A?\000\000\200?6\275\310=\276\024{\2771\240\224\276^\203l?\352Z\361>1\333T\277\231g\"\277\363\0045?\003\344E?\3329\016\277\230\305a\277\025\357\303>\013\372t?\302\305G\276m\304~\277\017/B\247m\304~?\302\305G>\013\372t\277\025\357\303\276\230\305a?\3329\016?\003\344E\277\363\0045\277\231g\"?1\333T?\352Z\361\276^\203l\2771\240\224>\276\024{?6\275\310\275\000\000\200\2776\275\310\275\276\024{?1\240\224>^\203l\277\352Z\361\2761\333T?\231g\"?\363\0045\277\003\344E\277\3329\016?\230\305a?\025\357\303\276\013\372t\277\302\305G>m\304~?[\032\215&m\304~\277\302\305G\276\013\372t?\025\357\303>\230\305a\277\3329\016\277\003\344E?\363\0045?\231g\"\2771\333T\277\352Z\361>^\203l?1\240\224\276\276\024{\2776\275\310=\000\000\200?6\275\310=\276\024{\2771\240\224\276^\203l?\352Z\361>1\333T\277\231g\"\277\363\0045?\003\344E?\3329\016\277\230\305a\277\025\357\303>\013\372t?\302\305G\276m\304~\277\246u\345\247m\304~?\302\305G>\013\372t\277\025\357\303\276\230\305a?\3329\016?\003\344E\277\363\0045\277\231g\"?1\333T?\352Z\361\276^\203l\2771\240\224>\276\024{?6\275\310\275\000\000\200\2776\275\310\275\276\024{?1\240\224>^\203l\277\352Z\361\2761\333T?\231g\"?\363\0045\277\003\344E\277\3329\016?\230\305a?\025\357\303\276\013\372t\277\302\305G>m\304~?\225\2660\247m\304~\277\302\305G\276\013\372t?\025\357\303>\230\305a\277\3329\016\277\003\344E?\363\0045?\231g\"\277\000\000\200?\005\251\226=\254:}\277\023\\`\276\013\372t?*D\270>\330kg\277\']\374\2761\333T?\321\177\035?\371\256=\277Bh9\277\231g\"?=MQ?=\234\003\277Y\252d\277\025\357\303>G\024s?\314\317x\276(;|\2776\275\310=C\354\177?0\373H=$\023~\277\302\305G\276\007\272v?\324|\254>\247\tj\277\352Z\361\276SHX?\300\177\030?p\330A\277\363\0045\277V6\'?\002\237M?\233\365\010\277\230\305a\277\312{\317>\010\tq?\223\216\210\276\276\024{\277s\262\372=\017\261\177?\260\n\311<m\304~\277\242\020/\276\370Sx?\345\232\240>^\203l\277u3\346\276\032\224[?*h\023?\003\344E\277\273\2050\277J\353+?\022\321I?\3329\016\277\005\276^\277\200\350\332>\236\330n?1\240\224\276\235\307y\277\203@\026>mN\177?\307%\r\'mN\177\277\203@\026\276\235\307y?1\240\224>\236\330n\277\200\350\332\276\005\276^?\3329\016?\022\321I\277J\353+\277\273\2050?\003\344E?*h\023\277\032\224[\277u3\346>^\203l?\345\232\240\276\370Sx\277\242\020/>m\304~?\260\n\311\274\017\261\177\277s\262\372\275\276\024{?\223\216\210>\010\tq\277\312{\317\276\230\305a?\233\365\010?\002\237M\277V6\'\277\363\0045?p\330A?\300\177\030\277SHX\277\352Z\361>\247\tj?\324|\254\276\007\272v\277\302\305G>$\023~?0\373H\275C\354\177\2776\275\310\275(;|?\314\317x>G\024s\277\025\357\303\276Y\252d?=\234\003?=MQ\277\231g\"\277Bh9?\371\256=?\321\177\035\2771\333T\277\']\374>\000\000\200?0\373H=m\304~\277\203@\026\276\276\024{?\314\317x>\013\372t\277\324|\254\276^\203l?\200\350\332>\230\305a\277=\234\003\2771\333T?\300\177\030?\003\344E\277J\353+\277\363\0045?\371\256=?\231g\"\277\002\237M\277\3329\016?\032\224[?\352Z\361\276\330kg\277\025\357\303>\010\tq?1\240\224\276\370Sx\277\302\305G>\254:}?6\275\310\275\017\261\177\277\324c\204\247\017\261\177?6\275\310=\254:}\277\302\305G\276\370Sx?1\240\224>\010\tq\277\025\357\303\276\330kg?\352Z\361>\032\224[\277\3329\016\277\002\237M?\231g\"?\371\256=\277\363\0045\277J\353+?\003\344E?\300\177\030\2771\333T\277=\234\003?\230\305a?\200\350\332\276^\203l\277\324|\254>\013\372t?\314\317x\276\276\024{\277\203@\026>m\304~?0\373H\275\000\000\200\2770\373H\275m\304~?\203@\026>\276\024{\277\314\317x\276\013\372t?\324|\254>^\203l\277\200\350\332\276\230\305a?=\234\003?1\333T\277\300\177\030\277\003\344E?J\353+?\363\0045\277\371\256=\277\231g\"?\002\237M?\3329\016\277\032\224[\277\352Z\361>\330kg?\025\357\303\276\010\tq\2771\240\224>\370Sx?\302\305G\276\254:}\2776\275\310=\017\261\177?\337J\243(\017\261\177\2776\275\310\275\254:}?\302\305G>\370Sx\2771\240\224\276\010\tq?\025\357\303>\330kg\277\352Z\361\276\032\224[?\3329\016?\002\237M\277\231g\"\277\371\256=?\363\0045?J\353+\277\003\344E\277\300\177\030?1\333T?=\234\003\277\230\305a\277\200\350\332>^\203l?\324|\254\276\000\000\200?\260\n\311<\017\261\177\277\005\251\226\275m\304~?s\262\372=\254:}\277\242\020/\276\276\024{?\023\\`>\370Sx\277\223\216\210\276\013\372t?\345\232\240>\010\tq\277*D\270\276^\203l?\312{\317>\330kg\277u3\346\276\230\305a?\']\374>\032\224[\277\233\365\010\2771\333T?*h\023?\002\237M\277\321\177\035\277\003\344E?V6\'?\371\256=\277\273\2050\277\363\0045?Bh9?J\353+\277p\330A\277\231g\"?\022\321I?\300\177\030\277=MQ\277\3329\016?SHX?=\234\003\277\005\276^\277\352Z\361>Y\252d?\200\350\332\276\247\tj\277\025\357\303>\236\330n?\324|\254\276G\024s\2771\240\224>\007\272v?\314\317x\276\235\307y\277\302\305G>(;|?\203@\026\276$\023~\2776\275\310=mN\177?0\373H\275C\354\177\277M\016\324&C\354\177?0\373H=mN\177\2776\275\310\275$\023~?\203@\026>(;|\277\302\305G\276\235\307y?\314\317x>\007\272v\2771\240\224\276G\024s?\324|\254>\236\330n\277\025\357\303\276\247\tj?\200\350\332>Y\252d\277\352Z\361\276\005\276^?=\234\003?SHX\277\3329\016\277=MQ?\300\177\030?\022\321I\277\231g\"\277p\330A?J\353+?Bh9\277\363\0045\277\273\2050?\371\256=?V6\'\277\003\344E\277\321\177\035?\002\237M?*h\023\2771\333T\277\233\365\010?\032\224[?\']\374\276\230\305a\277u3\346>\330kg?\312{\317\276^\203l\277*D\270>\010\tq?\345\232\240\276\013\372t\277\223\216\210>\370Sx?\023\\`\276\276\024{\277\242\020/>\000\000\200?21\215$\000\000\200\277\312\311S\245\000\000\200?~}\260%\000\000\200\277\027\026\367\245\000\000\200?X\327\036&\000\000\200\277\351\2100\247\000\000\200?\010H\215\246\000\000\200\277\017/B\247\000\000\200?w\367S\246\000\000\200\2775\325S\247\000\000\200?\336^\r\246\000\000\200\277\\{e\247\000\000\200?\212\214\215\245\000\000\200\277\202!w\247\000\000\200?\333\2606\241\000\000\200\277\324c\204\247\000\000\200?\331\325\214%\000\000\200\277\3476\215\247\000\000\200?\205\003\r&\000\000\200\277\372\t\226\247\000\000\200?\3029\r(\000\000\200\277\r\335\236\247\000\000\200?[\032\215&\000\000\200\277\277\2370\'\000\000\200?\325\014\026(\000\000\200\2774\203\260\247\000\000\200?\364\262\323&\000\000\200\277sS\r\'\000\000\200?\350\337\036(\000\000\200\277Z)\302\247\000\000\200?\307%\r\'\000\000\200\277M\016\324&\000\000\200?\373\262\'(\000\000\200\277\200\317\323\247\000\000\200?\023r0\'\000\000\200\277\264u\215&\000\000\200?\016\2060(\000\000\200\277\246u\345\247\000\000\200?_\276S\'\000\000\200\2776\272\r&\000\000\200?!Y9(\000\000\200\277\032r\004(\000\000\200?\254\nw\'\000\000\200\277p\367\177\250\000\000\200?.Ow\247\000\000\200\277\371`\004\250\000\000\200?\337J\243(\000\000\200\277-\250\014\246\000\000\200?H\377J(\000\000\200\277\347\227\345\'\000\000\200?\242\321\236\'\000\000\200\277\313\316\210\250\000\000\200?\225\2660\247\000\000\200\277\037\007\026\250\000\000\200?\362\035\254(\000\000\200\277H\205\323\246\000\000\200?n\245\\(\000\000\200\277\233K\302\'\000\000\200?\357\035\302\'\000\000\200\277\336\241\221\250\000\000\200?\371;\324\246\000\000\200?\260\n\311\274\017\261\177\277\005\251\226=m\304~?s\262\372\275\254:}\277\242\020/>\276\024{?\023\\`\276\370Sx\277\223\216\210>\013\372t?\345\232\240\276\010\tq\277*D\270>^\203l?\312{\317\276\330kg\277u3\346>\230\305a?\']\374\276\032\224[\277\233\365\010?1\333T?*h\023\277\002\237M\277\321\177\035?\003\344E?V6\'\277\371\256=\277\273\2050?\363\0045?Bh9\277J\353+\277p\330A?\231g\"?\022\321I\277\300\177\030\277=MQ?\3329\016?SHX\277=\234\003\277\005\276^?\352Z\361>Y\252d\277\200\350\332\276\247\tj?\025\357\303>\236\330n\277\324|\254\276G\024s?1\240\224>\007\272v\277\314\317x\276\235\307y?\302\305G>(;|\277\203@\026\276$\023~?6\275\310=mN\177\2770\373H\275C\354\177?\373\262\'(C\354\177\2770\373H=mN\177?6\275\310\275$\023~\277\203@\026>(;|?\302\305G\276\235\307y\277\314\317x>\007\272v?1\240\224\276G\024s\277\324|\254>\236\330n?\025\357\303\276\247\tj\277\200\350\332>Y\252d?\352Z\361\276\005\276^\277=\234\003?SHX?\3329\016\277=MQ\277\300\177\030?\022\321I?\231g\"\277p\330A\277J\353+?Bh9?\363\0045\277\273\2050\277\371\256=?V6\'?\003\344E\277\321\177\035\277\002\237M?*h\023?1\333T\277\233\365\010\277\032\224[?\']\374>\230\305a\277u3\346\276\330kg?\312{\317>^\203l\277*D\270\276\010\tq?\345\232\240>\013\372t\277\223\216\210\276\370Sx?\023\\`>\276\024{\277\242\020/\276\000\000\200?0\373H\275m\304~\277\203@\026>\276\024{?\314\317x\276\013\372t\277\324|\254>^\203l?\200\350\332\276\230\305a\277=\234\003?1\333T?\300\177\030\277\003\344E\277J\353+?\363\0045?\371\256=\277\231g\"\277\002\237M?\3329\016?\032\224[\277\352Z\361\276\330kg?\025\357\303>\010\tq\2771\240\224\276\370Sx?\302\305G>\254:}\2776\275\310\275\017\261\177?\331\325\214%\017\261\177\2776\275\310=\254:}?\302\305G\276\370Sx\2771\240\224>\010\tq?\025\357\303\276\330kg\277\352Z\361>\032\224[?\3329\016\277\002\237M\277\231g\"?\371\256=?\363\0045\277J\353+\277\003\344E?\300\177\030?1\333T\277=\234\003\277\230\305a?\200\350\332>^\203l\277\324|\254\276\013\372t?\314\317x>\276\024{\277\203@\026\276m\304~?0\373H=\000\000\200\2770\373H=m\304~?\203@\026\276\276\024{\277\314\317x>\013\372t?\324|\254\276^\203l\277\200\350\332>\230\305a?=\234\003\2771\333T\277\300\177\030?\003\344E?J\353+\277\363\0045\277\371\256=?\231g\"?\002\237M\277\3329\016\277\032\224[?\352Z\361>\330kg\277\025\357\303\276\010\tq?1\240\224>\370Sx\277\302\305G\276\254:}?6\275\310=\017\261\177\277\347\227\345\'\017\261\177?6\275\310\275\254:}\277\302\305G>\370Sx?1\240\224\276\010\tq\277\025\357\303>\330kg?\352Z\361\276\032\224[\277\3329\016?\002\237M?\231g\"\277\371\256=\277\363\0045?J\353+?\003\344E\277\300\177\030\2771\333T?=\234\003?\230\305a\277\200\350\332\276^\203l?\324|\254>\000\000\200?\005\251\226\275\254:}\277\023\\`>\013\372t?*D\270\276\330kg\277\']\374>1\333T?\321\177\035\277\371\256=\277Bh9?\231g\"?=MQ\277=\234\003\277Y\252d?\025\357\303>G\024s\277\314\317x\276(;|?6\275\310=C\354\177\2770\373H=$\023~?\302\305G\276\007\272v\277\324|\254>\247\tj?\352Z\361\276SHX\277\300\177\030?p\330A?\363\0045\277V6\'\277\002\237M?\233\365\010?\230\305a\277\312{\317\276\010\tq?\223\216\210>\276\024{\277s\262\372\275\017\261\177?\260\n\311\274m\304~\277\242\020/>\370Sx?\345\232\240\276^\203l\277u3\346>\032\224[?*h\023\277\003\344E\277\273\2050?J\353+?\022\321I\277\3329\016\277\005\276^?\200\350\332>\236\330n\2771\240\224\276\235\307y?\203@\026>mN\177\277\200\317\323\247mN\177?\203@\026\276\235\307y\2771\240\224>\236\330n?\200\350\332\276\005\276^\277\3329\016?\022\321I?J\353+\277\273\2050\277\003\344E?*h\023?\032\224[\277u3\346\276^\203l?\345\232\240>\370Sx\277\242\020/\276m\304~?\260\n\311<\017\261\177\277s\262\372=\276\024{?\223\216\210\276\010\tq\277\312{\317>\230\305a?\233\365\010\277\002\237M\277V6\'?\363\0045?p\330A\277\300\177\030\277SHX?\352Z\361>\247\tj\277\324|\254\276\007\272v?\302\305G>$\023~\2770\373H\275C\354\177?6\275\310\275(;|\277\314\317x>G\024s?\025\357\303\276Y\252d\277=\234\003?=MQ?\231g\"\277Bh9\277\371\256=?\321\177\035?1\333T\277\']\374\276\000\000\200?6\275\310\275\276\024{\2771\240\224>^\203l?\352Z\361\2761\333T\277\231g\"?\363\0045?\003\344E\277\3329\016\277\230\305a?\025\357\303>\013\372t\277\302\305G\276m\304~?w\367S\246m\304~\277\302\305G>\013\372t?\025\357\303\276\230\305a\277\3329\016?\003\344E?\363\0045\277\231g\"\2771\333T?\352Z\361>^\203l\2771\240\224\276\276\024{?6\275\310=\000\000\200\2776\275\310=\276\024{?1\240\224\276^\203l\277\352Z\361>1\333T?\231g\"\277\363\0045\277\003\344E?\3329\016?\230\305a\277\025\357\303\276\013\372t?\302\305G>m\304~\2774\203\260\247m\304~?\302\305G\276\013\372t\277\025\357\303>\230\305a?\3329\016\277\003\344E\277\363\0045?\231g\"?1\333T\277\352Z\361\276^\203l?1\240\224>\276\024{\2776\275\310\275\000\000\200?6\275\310\275\276\024{\2771\240\224>^\203l?\352Z\361\2761\333T\277\231g\"?\363\0045?\003\344E\277\3329\016\277\230\305a?\025\357\303>\013\372t\277\302\305G\276m\304~?\254\nw\'m\304~\277\302\305G>\013\372t?\025\357\303\276\230\305a\277\3329\016?\003\344E?\363\0045\277\231g\"\2771\333T?\352Z\361>^\203l\2771\240\224\276\276\024{?6\275\310=\000\000\200\2776\275\310=\276\024{?1\240\224\276^\203l\277\352Z\361>1\333T?\231g\"\277\363\0045\277\003\344E?\3329\016?\230\305a\277\025\357\303\276\013\372t?\302\305G>m\304~\277\336\241\221\250m\304~?\302\305G\276\013\372t\277\025\357\303>\230\305a?\3329\016\277\003\344E\277\363\0045?\231g\"?\000\000\200?s\262\372\275\370Sx\277*D\270>\230\305a?*h\023\277\371\256=\277p\330A?\3329\016?Y\252d\277\324|\254\276\235\307y?6\275\310=C\354\177\277\203@\026>\007\272v?\025\357\303\276\005\276^\277\300\177\030?Bh9?\003\344E\277\233\365\010\277\330kg?\345\232\240>\276\024{\277\005\251\226\275\017\261\177?\242\020/\276\013\372t\277\312{\317>\032\224[?\321\177\035\277\363\0045\277\022\321I?=\234\003?\247\tj\2771\240\224\276(;|?0\373H=mN\177\277\302\305G>G\024s?\200\350\332\276SHX\277\231g\"?\273\2050?\002\237M\277\']\374\276^\203l?\223\216\210>\254:}\277\260\n\311\274m\304~?\023\\`\276\010\tq\277u3\346>1\333T?V6\'\277J\353+\277=MQ?\352Z\361>\236\330n\277\314\317x\276$\023~?\023r0\'$\023~\277\314\317x>\236\330n?\352Z\361\276=MQ\277J\353+?V6\'?1\333T\277u3\346\276\010\tq?\023\\`>m\304~\277\260\n\311<\254:}?\223\216\210\276^\203l\277\']\374>\002\237M?\273\2050\277\231g\"\277SHX?\200\350\332>G\024s\277\302\305G\276mN\177?0\373H\275(;|\2771\240\224>\247\tj?=\234\003\277\022\321I\277\363\0045?\321\177\035?\032\224[\277\312{\317\276\013\372t?\242\020/>\017\261\177\277\005\251\226=\276\024{?\345\232\240\276\330kg\277\233\365\010?\003\344E?Bh9\277\300\177\030\277\005\276^?\025\357\303>\007\272v\277\203@\026\276C\354\177?6\275\310\275\235\307y\277\324|\254>Y\252d?\3329\016\277p\330A\277\000\000\200?\203@\026\276\013\372t\277\200\350\332>1\333T?J\353+\277\231g\"\277\032\224[?\025\357\303>\370Sx\2776\275\310\275\017\261\177?\302\305G\276\010\tq\277\352Z\361>\002\237M?\363\0045\277\300\177\030\277\230\305a?\324|\254>\276\024{\2770\373H\275m\304~?\314\317x\276^\203l\277=\234\003?\003\344E?\371\256=\277\3329\016\277\330kg?1\240\224>\254:}\277\3476\215\247\254:}?1\240\224\276\330kg\277\3329\016?\371\256=?\003\344E\277=\234\003\277^\203l?\314\317x>m\304~\2770\373H=\276\024{?\324|\254\276\230\305a\277\300\177\030?\363\0045?\002\237M\277\352Z\361\276\010\tq?\302\305G>\017\261\177\2776\275\310=\370Sx?\025\357\303\276\032\224[\277\231g\"?J\353+?1\333T\277\200\350\332\276\013\372t?\203@\026>\000\000\200\277\203@\026>\013\372t?\200\350\332\2761\333T\277J\353+?\231g\"?\032\224[\277\025\357\303\276\370Sx?6\275\310=\017\261\177\277\302\305G>\010\tq?\352Z\361\276\002\237M\277\363\0045?\300\177\030?\230\305a\277\324|\254\276\276\024{?0\373H=m\304~\277\314\317x>^\203l?=\234\003\277\003\344E\277\371\256=?\3329\016?\330kg\2771\240\224\276\254:}?\225\2660\247\254:}\2771\240\224>\330kg?\3329\016\277\371\256=\277\003\344E?=\234\003?^\203l\277\314\317x\276m\304~?0\373H\275\276\024{\277\324|\254>\230\305a?\300\177\030\277\363\0045\277\002\237M?\352Z\361>\010\tq\277\302\305G\276\017\261\177?6\275\310\275\370Sx\277\025\357\303>\032\224[?\000\000\200?\242\020/\276\010\tq\277\']\374>\003\344E?p\330A\277=\234\003\277\236\330n?\302\305G>C\354\177\277\203@\026>G\024s?\352Z\361\276\022\321I\277\371\256=?\233\365\010?^\203l\277\023\\`\276\017\261\177?s\262\372\275\013\372t\277u3\346>\002\237M?Bh9\277\3329\016\277\247\tj?\314\317x>mN\177\2776\275\310=\007\272v?\200\350\332\276=MQ\277\363\0045?*h\023?\330kg\277\223\216\210\276m\304~?\005\251\226\275\370Sx\277\312{\317>1\333T?\273\2050\277\300\177\030\277Y\252d?1\240\224>$\023~\2770\373H=\235\307y?\025\357\303\276SHX\277J\353+?\321\177\035?\230\305a\277\345\232\240\276\254:}?\260\n\311\274\276\024{\277*D\270>\032\224[?V6\'\277\231g\"\277\005\276^?\324|\254>(;|\277\264u\215&(;|?\324|\254\276\005\276^\277\231g\"?V6\'?\032\224[\277*D\270\276\276\024{?\260\n\311<\254:}\277\345\232\240>\230\305a?\321\177\035\277J\353+\277SHX?\025\357\303>\235\307y\2770\373H\275$\023~?1\240\224\276Y\252d\277\300\177\030?\273\2050?1\333T\277\312{\317\276\370Sx?\005\251\226=m\304~\277\223\216\210>\330kg?*h\023\277\363\0045\277=MQ?\200\350\332>\007\272v\2776\275\310\275mN\177?\314\317x\276\247\tj\277\3329\016?Bh9?\002\237M\277u3\346\276\013\372t?s\262\372=\017\261\177\277\023\\`>^\203l?\233\365\010\277\371\256=\277\022\321I?\352Z\361>G\024s\277\203@\026\276C\354\177?\302\305G\276\236\330n\277\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?X\327\036&\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277\202!w\247\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?[\032\215&\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277M\016\324&\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?!Y9(\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277\347\227\345\'\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?\357\035\302\'\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277\361t\232\250\276\024{?\000\000\200?\023\\`\276\330kg\277\321\177\035?\231g\"?Y\252d\277\314\317x\276C\354\177?\302\305G\276\247\tj\277\300\177\030?V6\'?\230\305a\277\223\216\210\276\017\261\177?\242\020/\276^\203l\277*h\023?J\353+?\005\276^\2771\240\224\276mN\177?\203@\026\276\236\330n\277\3329\016?\273\2050?\032\224[\277\345\232\240\276m\304~?s\262\372\275\010\tq\277\233\365\010?\363\0045?SHX\277\324|\254\276$\023~?6\275\310\275G\024s\277=\234\003?Bh9?1\333T\277*D\270\276\254:}?\005\251\226\275\013\372t\277\']\374>\371\256=?=MQ\277\025\357\303\276(;|?0\373H\275\007\272v\277\352Z\361>p\330A?\002\237M\277\312{\317\276\276\024{?\260\n\311\274\370Sx\277u3\346>\003\344E?\022\321I\277\200\350\332\276\235\307y?\016\2060(\235\307y\277\200\350\332>\022\321I?\003\344E\277u3\346\276\370Sx?\260\n\311<\276\024{\277\312{\317>\002\237M?p\330A\277\352Z\361\276\007\272v?0\373H=(;|\277\025\357\303>=MQ?\371\256=\277\']\374\276\013\372t?\005\251\226=\254:}\277*D\270>1\333T?Bh9\277=\234\003\277G\024s?6\275\310=$\023~\277\324|\254>SHX?\363\0045\277\233\365\010\277\010\tq?s\262\372=m\304~\277\345\232\240>\032\224[?\273\2050\277\3329\016\277\236\330n?\203@\026>mN\177\2771\240\224>\005\276^?J\353+\277*h\023\277^\203l?\242\020/>\017\261\177\277\223\216\210>\230\305a?V6\'\277\300\177\030\277\247\tj?\302\305G>C\354\177\277\000\000\200?\314\317x\276\230\305a\277J\353+?\3329\016?\010\tq\2776\275\310\275\254:}?\025\357\303\276\002\237M\277\003\344E?\200\350\332>\276\024{\2770\373H=\013\372t?=\234\003\277\363\0045\277\032\224[?1\240\224>\017\261\177\277\302\305G>\330kg?\231g\"\277\300\177\030\277^\203l?\203@\026>m\304~\277\324|\254>1\333T?\371\256=\277\352Z\361\276\370Sx?\205\003\r&\370Sx\277\352Z\361>\371\256=?1\333T\277\324|\254\276m\304~?\203@\026\276^\203l\277\300\177\030?\231g\"?\330kg\277\302\305G\276\017\261\177?1\240\224\276\032\224[\277\363\0045?=\234\003?\013\372t\2770\373H\275\276\024{?\200\350\332\276\003\344E\277\002\237M?\025\357\303>\254:}\2776\275\310=\010\tq?\3329\016\277J\353+\277\230\305a?\314\317x>\000\000\200\277\314\317x>\230\305a?J\353+\277\3329\016\277\010\tq?6\275\310=\254:}\277\025\357\303>\002\237M?\003\344E\277\200\350\332\276\276\024{?0\373H\275\013\372t\277=\234\003?\363\0045?\032\224[\2771\240\224\276\017\261\177?\302\305G\276\330kg\277\231g\"?\300\177\030?^\203l\277\203@\026\276m\304~?\324|\254\2761\333T\277\371\256=?\352Z\361>\370Sx\277H\205\323\246\370Sx?\352Z\361\276\371\256=\2771\333T?\324|\254>m\304~\277\203@\026>^\203l?\300\177\030\277\231g\"\277\330kg?\302\305G>\017\261\177\2771\240\224>\032\224[?\363\0045\277=\234\003\277\013\372t?0\373H=\276\024{\277\200\350\332>\003\344E?\002\237M\277\025\357\303\276\254:}?\000\000\200?\223\216\210\276\032\224[\277Bh9?\352Z\361>\235\307y\2770\373H=G\024s?\3329\016\277V6\'\277\330kg?\242\020/>m\304~\277*D\270>\002\237M?\022\321I\277\025\357\303\276$\023~?\203@\026\276\247\tj\277\231g\"?*h\023?\010\tq\277\005\251\226\275\276\024{?u3\346\276\371\256=\277SHX?1\240\224>C\354\177\277\314\317x>\005\276^?\363\0045\277\']\374\276\370Sx?\260\n\311\274\013\372t\277\233\365\010?J\353+?Y\252d\277\302\305G\276mN\177?\324|\254\276=MQ\277\003\344E?\312{\317>\254:}\277s\262\372=^\203l?\321\177\035\277\300\177\030\277\236\330n?6\275\310=(;|\277\200\350\332>p\330A?1\333T\277\345\232\240\276\017\261\177?\023\\`\276\230\305a\277\273\2050?=\234\003?\007\272v\277\246u\345\247\007\272v?=\234\003\277\273\2050\277\230\305a?\023\\`>\017\261\177\277\345\232\240>1\333T?p\330A\277\200\350\332\276(;|?6\275\310\275\236\330n\277\300\177\030?\321\177\035?^\203l\277s\262\372\275\254:}?\312{\317\276\003\344E\277=MQ?\324|\254>mN\177\277\302\305G>Y\252d?J\353+\277\233\365\010\277\013\372t?\260\n\311<\370Sx\277\']\374>\363\0045?\005\276^\277\314\317x\276C\354\177?1\240\224\276SHX\277\371\256=?u3\346>\276\024{\277\005\251\226=\010\tq?*h\023\277\231g\"\277\247\tj?\203@\026>$\023~\277\025\357\303>\022\321I?\002\237M\277*D\270\276m\304~?\242\020/\276\330kg\277V6\'?\3329\016?G\024s\277\000\000\200?1\240\224\2761\333T\277\003\344E?\025\357\303>m\304~\277\302\305G>\230\305a?\363\0045\277\352Z\361\276\276\024{?6\275\310\275^\203l\277\231g\"?\3329\016?\013\372t\2775\325S\247\013\372t?\3329\016\277\231g\"\277^\203l?6\275\310=\276\024{\277\352Z\361>\363\0045?\230\305a\277\302\305G\276m\304~?\025\357\303\276\003\344E\2771\333T?1\240\224>\000\000\200\2771\240\224>1\333T?\003\344E\277\025\357\303\276m\304~?\302\305G\276\230\305a\277\363\0045?\352Z\361>\276\024{\2776\275\310=^\203l?\231g\"\277\3329\016\277\013\372t?\350\337\036(\013\372t\277\3329\016?\231g\"?^\203l\2776\275\310\275\276\024{?\352Z\361\276\363\0045\277\230\305a?\302\305G>m\304~\277\025\357\303>\003\344E?1\333T\2771\240\224\276\000\000\200?1\240\224\2761\333T\277\003\344E?\025\357\303>m\304~\277\302\305G>\230\305a?\363\0045\277\352Z\361\276\276\024{?6\275\310\275^\203l\277\231g\"?\3329\016?\013\372t\277-\250\014\246\013\372t?\3329\016\277\231g\"\277^\203l?6\275\310=\276\024{\277\352Z\361>\363\0045?\230\305a\277\302\305G\276m\304~?\025\357\303\276\003\344E\2771\333T?1\240\224>\000\000\200\2771\240\224>1\333T?\003\344E\277\025\357\303\276m\304~?\302\305G\276\230\305a\277\363\0045?\352Z\361>\276\024{\2776\275\310=^\203l?\231g\"\277\3329\016\277\013\372t?;j\345\'\013\372t\277\3329\016?\231g\"?^\203l\2776\275\310\275\276\024{?\352Z\361\276\363\0045\277\230\305a?\000\000\200?\345\232\240\276\002\237M\277=MQ?1\240\224>C\354\177\277\324|\254>\022\321I?1\333T\277\223\216\210\276\017\261\177?*D\270\276\003\344E\277SHX?\314\317x>mN\177\277\025\357\303>p\330A?\032\224[\277\023\\`\276m\304~?\312{\317\276\371\256=\277\005\276^?\302\305G>$\023~\277\200\350\332>Bh9?\230\305a\277\242\020/\276\254:}?u3\346\276\363\0045\277Y\252d?\203@\026>(;|\277\352Z\361>\273\2050?\330kg\277s\262\372\275\276\024{?\']\374\276J\353+\277\247\tj?6\275\310=\235\307y\277=\234\003?V6\'?^\203l\277\005\251\226\275\370Sx?\233\365\010\277\231g\"\277\236\330n?0\373H=\007\272v\277\3329\016?\321\177\035?\010\tq\277\260\n\311\274\013\372t?*h\023\277\300\177\030\277G\024s?_\276S\'G\024s\277\300\177\030?*h\023?\013\372t\277\260\n\311<\010\tq?\321\177\035\277\3329\016\277\007\272v?0\373H\275\236\330n\277\231g\"?\233\365\010?\370Sx\277\005\251\226=^\203l?V6\'\277=\234\003\277\235\307y?6\275\310\275\247\tj\277J\353+?\']\374>\276\024{\277s\262\372=\330kg?\273\2050\277\352Z\361\276(;|?\203@\026\276Y\252d\277\363\0045?u3\346>\254:}\277\242\020/>\230\305a?Bh9\277\200\350\332\276$\023~?\302\305G\276\005\276^\277\371\256=?\312{\317>m\304~\277\023\\`>\032\224[?p\330A\277\025\357\303\276mN\177?\314\317x\276SHX\277\003\344E?*D\270>\017\261\177\277\223\216\210>1\333T?\022\321I\277\000\000\200?\324|\254\276\003\344E\277\032\224[?\302\305G>\254:}\277\352Z\361>J\353+?^\203l\2770\373H\275\013\372t?\300\177\030\277\3329\016\277\370Sx?6\275\310\275\330kg\277\363\0045?\200\350\332>m\304~\277\314\317x>1\333T?\002\237M\2771\240\224\276\017\261\177?\025\357\303\276\371\256=\277\230\305a?\203@\026>\276\024{\277=\234\003?\231g\"?\010\tq\277\372\t\226\247\010\tq?\231g\"\277=\234\003\277\276\024{?\203@\026\276\230\305a\277\371\256=?\025\357\303>\017\261\177\2771\240\224>\002\237M?1\333T\277\314\317x\276m\304~?\200\350\332\276\363\0045\277\330kg?6\275\310=\370Sx\277\3329\016?\300\177\030?\013\372t\2770\373H=^\203l?J\353+\277\352Z\361\276\254:}?\302\305G\276\032\224[\277\003\344E?\324|\254>\000\000\200\277\324|\254>\003\344E?\032\224[\277\302\305G\276\254:}?\352Z\361\276J\353+\277^\203l?0\373H=\013\372t\277\300\177\030?\3329\016?\370Sx\2776\275\310=\330kg?\363\0045\277\200\350\332\276m\304~?\314\317x\2761\333T\277\002\237M?1\240\224>\017\261\177\277\025\357\303>\371\256=?\230\305a\277\203@\026\276\276\024{?=\234\003\277\231g\"\277\010\tq?\357\035\302\'\010\tq\277\231g\"?=\234\003?\276\024{\277\203@\026>\230\305a?\371\256=\277\025\357\303\276\017\261\177?1\240\224\276\002\237M\2771\333T?\314\317x>m\304~\277\200\350\332>\363\0045?\330kg\2776\275\310\275\370Sx?\3329\016\277\300\177\030\277\013\372t?0\373H\275^\203l\277J\353+?\000\000\200?*D\270\276\371\256=\277Y\252d?6\275\310=\007\272v\277\300\177\030?\233\365\010?\276\024{\277\242\020/>\032\224[?\022\321I\2771\240\224\276mN\177?\200\350\332\276\273\2050\277^\203l?\260\n\311<\010\tq\277V6\'?\352Z\361>$\023~\277\314\317x>=MQ?1\333T\277\023\\`\276\254:}?\']\374\276\231g\"\277G\024s?0\373H\275\247\tj\277\363\0045?\312{\317>\017\261\177\277\345\232\240>\003\344E?\005\276^\277\203@\026\276\235\307y?\3329\016\277*h\023\277\370Sx?s\262\372\275\230\305a\277p\330A?\324|\254>C\354\177\277\025\357\303>Bh9?\330kg\277\005\251\226\275\013\372t?\321\177\035\277=\234\003\277(;|?\302\305G\276SHX\277\002\237M?\223\216\210>m\304~\277u3\346>J\353+?\236\330n\2776\272\r&\236\330n?J\353+\277u3\346\276m\304~?\223\216\210\276\002\237M\277SHX?\302\305G>(;|\277=\234\003?\321\177\035?\013\372t\277\005\251\226=\330kg?Bh9\277\025\357\303\276C\354\177?\324|\254\276p\330A\277\230\305a?s\262\372=\370Sx\277*h\023?\3329\016?\235\307y\277\203@\026>\005\276^?\003\344E\277\345\232\240\276\017\261\177?\312{\317\276\363\0045\277\247\tj?0\373H=G\024s\277\231g\"?\']\374>\254:}\277\023\\`>1\333T?=MQ\277\314\317x\276$\023~?\352Z\361\276V6\'\277\010\tq?\260\n\311\274^\203l\277\273\2050?\200\350\332>mN\177\2771\240\224>\022\321I?\032\224[\277\242\020/\276\276\024{?\233\365\010\277\000\000\200?\025\357\303\276\363\0045\277^\203l?~}\260%^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\017/B\247^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\212\214\215\245^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\3476\215\247^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?[\032\215&^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277sS\r\'^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\373\262\'(^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\246u\345\247^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\254\nw\'^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277-\250\014\246^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\225\2660\247^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\233K\302\'^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\005\361\264(^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\361t\232\250^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\272\361\177(^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\000\000\200?\312{\317\276J\353+\277G\024s?6\275\310\275\005\276^\277\002\237M?\023\\`>\276\024{\277*h\023?=\234\003?$\023~\2771\240\224>p\330A?\330kg\277\260\n\311\274^\203l?Bh9\277\324|\254\276mN\177?\352Z\361\276\321\177\035\277\370Sx?\242\020/\2761\333T\277SHX?\203@\026>\007\272v\277\231g\"?u3\346>\017\261\177\277*D\270>\363\0045?\236\330n\2770\373H=Y\252d?\003\344E\277\223\216\210\276\254:}?\233\365\010\277\3329\016\277(;|?\314\317x\276\022\321I\277\230\305a?\005\251\226=\010\tq\277\273\2050?\025\357\303>C\354\177\277\200\350\332>V6\'?\013\372t\277s\262\372=\032\224[?=MQ\277\302\305G\276\235\307y?\300\177\030\277\']\374\276m\304~?\345\232\240\276\371\256=\277\247\tj?!Y9(\247\tj\277\371\256=?\345\232\240>m\304~\277\']\374>\300\177\030?\235\307y\277\302\305G>=MQ?\032\224[\277s\262\372\275\013\372t?V6\'\277\200\350\332\276C\354\177?\025\357\303\276\273\2050\277\010\tq?\005\251\226\275\230\305a\277\022\321I?\314\317x>(;|\277\3329\016?\233\365\010?\254:}\277\223\216\210>\003\344E?Y\252d\2770\373H\275\236\330n?\363\0045\277*D\270\276\017\261\177?u3\346\276\231g\"\277\007\272v?\203@\026\276SHX\2771\333T?\242\020/>\370Sx\277\321\177\035?\352Z\361>mN\177\277\324|\254>Bh9?^\203l\277\260\n\311<\330kg?p\330A\2771\240\224\276$\023~?=\234\003\277*h\023\277\276\024{?\023\\`\276\000\000\200?\200\350\332\276\231g\"\277\370Sx?\302\305G\276\002\237M\277\230\305a?0\373H=^\203l\277\371\256=?1\240\224>\254:}\277\3329\016?=\234\003?m\304~\277\324|\254>\363\0045?\010\tq\2776\275\310=\032\224[?1\333T\277\203@\026\276\013\372t?J\353+\277\025\357\303\276\017\261\177?\352Z\361\276\300\177\030\277\276\024{?\314\317x\276\003\344E\277\330kg?\3029\r(\330kg\277\003\344E?\314\317x>\276\024{\277\300\177\030?\352Z\361>\017\261\177\277\025\357\303>J\353+?\013\372t\277\203@\026>1\333T?\032\224[\2776\275\310\275\010\tq?\363\0045\277\324|\254\276m\304~?=\234\003\277\3329\016\277\254:}?1\240\224\276\371\256=\277^\203l?0\373H\275\230\305a\277\002\237M?\302\305G>\370Sx\277\231g\"?\200\350\332>\000\000\200\277\200\350\332>\231g\"?\370Sx\277\302\305G>\002\237M?\230\305a\2770\373H\275^\203l?\371\256=\2771\240\224\276\254:}?\3329\016\277=\234\003\277m\304~?\324|\254\276\363\0045\277\010\tq?6\275\310\275\032\224[\2771\333T?\203@\026>\013\372t\277J\353+?\025\357\303>\017\261\177\277\352Z\361>\300\177\030?\276\024{\277\314\317x>\003\344E?\330kg\277F\255\'\250\330kg?\003\344E\277\314\317x\276\276\024{?\300\177\030\277\352Z\361\276\017\261\177?\025\357\303\276J\353+\277\013\372t?\203@\026\2761\333T\277\032\224[?6\275\310=\010\tq\277\363\0045?\324|\254>m\304~\277=\234\003?\3329\016?\254:}\2771\240\224>\371\256=?^\203l\2770\373H=\000\000\200?u3\346\276\300\177\030\277(;|?1\240\224\276Bh9\277\010\tq?s\262\372\2751\333T\277\005\276^?0\373H=\247\tj\277\003\344E?\023\\`>\370Sx\277V6\'?\025\357\303>mN\177\277=\234\003?\233\365\010?m\304~\277*D\270>J\353+?\007\272v\277\302\305G>\022\321I?\330kg\277\260\n\311<\230\305a?=MQ\277\203@\026\276G\024s?\363\0045\277\345\232\240\276\254:}?*h\023\277\352Z\361\276C\354\177?\200\350\332\276\321\177\035\277\276\024{?\223\216\210\276\371\256=\277\236\330n?6\275\310\275SHX\277\032\224[?\005\251\226=^\203l\277p\330A?\314\317x>\235\307y\277\231g\"?\312{\317>\017\261\177\277\']\374>\3329\016?$\023~\277\324|\254>\273\2050?\013\372t\277\242\020/>\002\237M?Y\252d\277\032r\004(Y\252d?\002\237M\277\242\020/\276\013\372t?\273\2050\277\324|\254\276$\023~?\3329\016\277\']\374\276\017\261\177?\312{\317\276\231g\"\277\235\307y?\314\317x\276p\330A\277^\203l?\005\251\226\275\032\224[\277SHX?6\275\310=\236\330n\277\371\256=?\223\216\210>\276\024{\277\321\177\035?\200\350\332>C\354\177\277\352Z\361>*h\023?\254:}\277\345\232\240>\363\0045?G\024s\277\203@\026>=MQ?\230\305a\277\260\n\311\274\330kg?\022\321I\277\302\305G\276\007\272v?J\353+\277*D\270\276m\304~?\233\365\010\277=\234\003\277mN\177?\025\357\303\276V6\'\277\370Sx?\023\\`\276\003\344E\277\247\tj?0\373H\275\005\276^\2771\333T?s\262\372=\000\000\200?\352Z\361\276\3329\016\277m\304~?\025\357\303\276\231g\"\277\276\024{?1\240\224\276\363\0045\277\013\372t?\302\305G\276\003\344E\277^\203l?6\275\310\2751\333T\277\230\305a?\336^\r\246\230\305a\2771\333T?6\275\310=^\203l\277\003\344E?\302\305G>\013\372t\277\363\0045?1\240\224>\276\024{\277\231g\"?\025\357\303>m\304~\277\3329\016?\352Z\361>\000\000\200\277\352Z\361>\3329\016?m\304~\277\025\357\303>\231g\"?\276\024{\2771\240\224>\363\0045?\013\372t\277\302\305G>\003\344E?^\203l\2776\275\310=1\333T?\230\305a\277M\016\324&\230\305a?1\333T\2776\275\310\275^\203l?\003\344E\277\302\305G\276\013\372t?\363\0045\2771\240\224\276\276\024{?\231g\"\277\025\357\303\276m\304~?\3329\016\277\352Z\361\276\000\000\200?\352Z\361\276\3329\016\277m\304~?\025\357\303\276\231g\"\277\276\024{?1\240\224\276\363\0045\277\013\372t?\302\305G\276\003\344E\277^\203l?6\275\310\2751\333T\277\230\305a?\225\2660\247\230\305a\2771\333T?6\275\310=^\203l\277\003\344E?\302\305G>\013\372t\277\363\0045?1\240\224>\276\024{\277\231g\"?\025\357\303>m\304~\277\3329\016?\352Z\361>\000\000\200\277\352Z\361>\3329\016?m\304~\277\025\357\303>\231g\"?\276\024{\2771\240\224>\363\0045?\013\372t\277\302\305G>\003\344E?^\203l\2776\275\310=1\333T?\230\305a\277\004fw\'\230\305a?1\333T\2776\275\310\275^\203l?\003\344E\277\302\305G\276\013\372t?\363\0045\2771\240\224\276\000\000\200?\']\374\276=\234\003\277C\354\177?\352Z\361\276\233\365\010\277\017\261\177?u3\346\276\3329\016\277mN\177?\200\350\332\276*h\023\277m\304~?\312{\317\276\300\177\030\277$\023~?\025\357\303\276\321\177\035\277\254:}?*D\270\276\231g\"\277(;|?\324|\254\276V6\'\277\276\024{?\345\232\240\276J\353+\277\235\307y?1\240\224\276\273\2050\277\370Sx?\223\216\210\276\363\0045\277\007\272v?\314\317x\276Bh9\277\013\372t?\023\\`\276\371\256=\277G\024s?\302\305G\276p\330A\277\010\tq?\242\020/\276\003\344E\277\236\330n?\203@\026\276\022\321I\277^\203l?s\262\372\275\002\237M\277\247\tj?6\275\310\275=MQ\277\330kg?\005\251\226\2751\333T\277Y\252d?0\373H\275SHX\277\230\305a?\260\n\311\274\032\224[\277\005\276^?\254\nw\'\005\276^\277\032\224[?\260\n\311<\230\305a\277SHX?0\373H=Y\252d\2771\333T?\005\251\226=\330kg\277=MQ?6\275\310=\247\tj\277\002\237M?s\262\372=^\203l\277\022\321I?\203@\026>\236\330n\277\003\344E?\242\020/>\010\tq\277p\330A?\302\305G>G\024s\277\371\256=?\023\\`>\013\372t\277Bh9?\314\317x>\007\272v\277\363\0045?\223\216\210>\370Sx\277\273\2050?1\240\224>\235\307y\277J\353+?\345\232\240>\276\024{\277V6\'?\324|\254>(;|\277\231g\"?*D\270>\254:}\277\321\177\035?\025\357\303>$\023~\277\300\177\030?\312{\317>m\304~\277*h\023?\200\350\332>mN\177\277\3329\016?u3\346>\000\000\200?=\234\003\277\352Z\361\276\017\261\177?\3329\016\277\200\350\332\276m\304~?\300\177\030\277\025\357\303\276\254:}?\231g\"\277\324|\254\276\276\024{?J\353+\2771\240\224\276\370Sx?\363\0045\277\314\317x\276\013\372t?\371\256=\277\302\305G\276\010\tq?\003\344E\277\203@\026\276^\203l?\002\237M\2776\275\310\275\330kg?1\333T\2770\373H\275\230\305a?\032\224[\277\r\335\236\247\032\224[?\230\305a\2770\373H=1\333T?\330kg\2776\275\310=\002\237M?^\203l\277\203@\026>\003\344E?\010\tq\277\302\305G>\371\256=?\013\372t\277\314\317x>\363\0045?\370Sx\2771\240\224>J\353+?\276\024{\277\324|\254>\231g\"?\254:}\277\025\357\303>\300\177\030?m\304~\277\200\350\332>\3329\016?\017\261\177\277\352Z\361>=\234\003?\000\000\200\277=\234\003?\352Z\361>\017\261\177\277\3329\016?\200\350\332>m\304~\277\300\177\030?\025\357\303>\254:}\277\231g\"?\324|\254>\276\024{\277J\353+?1\240\224>\370Sx\277\363\0045?\314\317x>\013\372t\277\371\256=?\302\305G>\010\tq\277\003\344E?\203@\026>^\203l\277\002\237M?6\275\310=\330kg\2771\333T?0\373H=\230\305a\277\032\224[?\224Kn(\032\224[\277\230\305a?0\373H\2751\333T\277\330kg?6\275\310\275\002\237M\277^\203l?\203@\026\276\003\344E\277\010\tq?\302\305G\276\371\256=\277\013\372t?\314\317x\276\363\0045\277\370Sx?1\240\224\276J\353+\277\276\024{?\324|\254\276\231g\"\277\254:}?\025\357\303\276\300\177\030\277\000\000\200?\233\365\010\277\200\350\332\276$\023~?\231g\"\277\345\232\240\276\370Sx?Bh9\277\302\305G\276\236\330n?\002\237M\277\005\251\226\275\230\305a?\005\276^\2770\373H==MQ?^\203l\277\242\020/>\371\256=?\007\272v\2771\240\224>V6\'?\254:}\277\312{\317>\3329\016?C\354\177\277=\234\003?u3\346>m\304~\277\321\177\035?\324|\254>\235\307y\277\363\0045?\023\\`>\010\tq\277\022\321I?6\275\310=Y\252d\277\032\224[?\260\n\311\2741\333T\277\247\tj?\203@\026\276p\330A\277\013\372t?\223\216\210\276J\353+\277(;|?\025\357\303\276*h\023\277\017\261\177?\']\374\276\352Z\361\276mN\177?\300\177\030\277*D\270\276\276\024{?\273\2050\277\314\317x\276G\024s?\003\344E\277s\262\372\275\330kg?SHX\277p\367\177\250SHX?\330kg\277s\262\372=\003\344E?G\024s\277\314\317x>\273\2050?\276\024{\277*D\270>\300\177\030?mN\177\277\352Z\361>\']\374>\017\261\177\277*h\023?\025\357\303>(;|\277J\353+?\223\216\210>\013\372t\277p\330A?\203@\026>\247\tj\2771\333T?\260\n\311<\032\224[\277Y\252d?6\275\310\275\022\321I\277\010\tq?\023\\`\276\363\0045\277\235\307y?\324|\254\276\321\177\035\277m\304~?u3\346\276=\234\003\277C\354\177?\3329\016\277\312{\317\276\254:}?V6\'\2771\240\224\276\007\272v?\371\256=\277\242\020/\276^\203l?=MQ\2770\373H\275\005\276^?\230\305a\277\005\251\226=\002\237M?\236\330n\277\302\305G>Bh9?\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277\351\2100\2471\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?\331\325\214%1\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277sS\r\'1\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?_\276S\'1\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277\347\227\345\'1\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?\371;\324\2461\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277\326\363v\2471\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?Z\200%)1\333T\277\000\000\200?*h\023\277\324|\254\276\007\272v?\003\344E\277\005\251\226\275\032\224[?\247\tj\277\302\305G>\273\2050?\254:}\277u3\346>\352Z\361>$\023~\277J\353+?\023\\`>^\203l\277SHX?0\373H\275\022\321I\277\013\372t?\345\232\240\276\300\177\030\277C\354\177?\3329\016\277*D\270\276\370Sx?p\330A\2776\275\310\275\005\276^?\330kg\277\242\020/>\363\0045?(;|\277\200\350\332>\']\374>m\304~\277V6\'?\314\317x>\236\330n\2771\333T?\260\n\311\274\002\237M\277G\024s?1\240\224\276\321\177\035\277\017\261\177?\233\365\010\277\025\357\303\276\235\307y?\371\256=\277s\262\372\275\230\305a?Y\252d\277\203@\026>Bh9?\276\024{\277\312{\317>=\234\003?mN\177\277\231g\"?\223\216\210>\010\tq\277=MQ?.Ow\247=MQ\277\010\tq?\223\216\210\276\231g\"\277mN\177?=\234\003\277\312{\317\276\276\024{?Bh9\277\203@\026\276Y\252d?\230\305a\277s\262\372=\371\256=?\235\307y\277\025\357\303>\233\365\010?\017\261\177\277\321\177\035?1\240\224>G\024s\277\002\237M?\260\n\311<1\333T\277\236\330n?\314\317x\276V6\'\277m\304~?\']\374\276\200\350\332\276(;|?\363\0045\277\242\020/\276\330kg?\005\276^\2776\275\310=p\330A?\370Sx\277*D\270>\3329\016?C\354\177\277\300\177\030?\345\232\240>\013\372t\277\022\321I?0\373H=SHX\277^\203l?\023\\`\276J\353+\277$\023~?\352Z\361\276u3\346\276\254:}?\273\2050\277\302\305G\276\247\tj?\000\000\200?\300\177\030\2771\240\224\276\010\tq?1\333T\2770\373H=\003\344E?\370Sx\277\025\357\303>=\234\003?m\304~\277J\353+?\302\305G>\330kg\277\230\305a?\203@\026\276\363\0045\277\254:}?\352Z\361\276\200\350\332\276\276\024{?\371\256=\2776\275\310\275\032\224[?^\203l\277\314\317x>\231g\"?\017\261\177\277\3329\016?\324|\254>\013\372t\277\002\237M?[\032\215&\002\237M\277\013\372t?\324|\254\276\3329\016\277\017\261\177?\231g\"\277\314\317x\276^\203l?\032\224[\2776\275\310=\371\256=?\276\024{\277\200\350\332>\352Z\361>\254:}\277\363\0045?\203@\026>\230\305a\277\330kg?\302\305G\276J\353+\277m\304~?=\234\003\277\025\357\303\276\370Sx?\003\344E\2770\373H\2751\333T?\010\tq\2771\240\224>\300\177\030?\000\000\200\277\300\177\030?1\240\224>\010\tq\2771\333T?0\373H\275\003\344E\277\370Sx?\025\357\303\276=\234\003\277m\304~?J\353+\277\302\305G\276\330kg?\230\305a\277\203@\026>\363\0045?\254:}\277\352Z\361>\200\350\332>\276\024{\277\371\256=?6\275\310=\032\224[\277^\203l?\314\317x\276\231g\"\277\017\261\177?\3329\016\277\324|\254\276\013\372t?\002\237M\277\361t\232\250\002\237M?\013\372t\277\324|\254>\3329\016?\017\261\177\277\231g\"?\314\317x>^\203l\277\032\224[?6\275\310\275\371\256=\277\276\024{?\200\350\332\276\352Z\361\276\254:}?\363\0045\277\203@\026\276\230\305a?\330kg\277\302\305G>J\353+?m\304~\277=\234\003?\025\357\303>\370Sx\277\000\000\200?\321\177\035\277\314\317x\276\247\tj?\230\305a\277\242\020/>J\353+?mN\177\277\3329\016?\345\232\240>\010\tq\277SHX?6\275\310\275Bh9\277\254:}?\']\374\276\025\357\303\276\007\272v?\002\237M\277\260\n\311<\003\344E?\235\307y\277\200\350\332>u3\346>\276\024{\277p\330A?0\373H==MQ\277\013\372t?*D\270\276=\234\003\277$\023~?\363\0045\277s\262\372\275\032\224[?\236\330n\2771\240\224>*h\023?\017\261\177\277V6\'?\302\305G>Y\252d\277\330kg?\023\\`\276\231g\"\277C\354\177?\300\177\030\277\223\216\210\276^\203l?\005\276^\277\203@\026>\273\2050?m\304~\277\233\365\010?\324|\254>G\024s\2771\333T?\005\251\226\275\371\256=\277(;|?\352Z\361\276\312{\317\276\370Sx?\022\321I\277\371`\004\250\022\321I?\370Sx\277\312{\317>\352Z\361>(;|\277\371\256=?\005\251\226=1\333T\277G\024s?\324|\254\276\233\365\010\277m\304~?\273\2050\277\203@\026\276\005\276^?^\203l\277\223\216\210>\300\177\030?C\354\177\277\231g\"?\023\\`>\330kg\277Y\252d?\302\305G\276V6\'\277\017\261\177?*h\023\2771\240\224\276\236\330n?\032\224[\277s\262\372=\363\0045?$\023~\277=\234\003?*D\270>\013\372t\277=MQ?0\373H\275p\330A\277\276\024{?u3\346\276\200\350\332\276\235\307y?\003\344E\277\260\n\311\274\002\237M?\007\272v\277\025\357\303>\']\374>\254:}\277Bh9?6\275\310=SHX\277\010\tq?\345\232\240\276\3329\016\277mN\177?\000\000\200?\231g\"\277\302\305G\276\230\305a?^\203l\2771\240\224>\3329\016?m\304~\277\363\0045?6\275\310=1\333T\277\013\372t?\025\357\303\276\352Z\361\276\276\024{?\003\344E\277\\{e\247\003\344E?\276\024{\277\352Z\361>\025\357\303>\013\372t\2771\333T?6\275\310\275\363\0045\277m\304~?\3329\016\2771\240\224\276^\203l?\230\305a\277\302\305G>\231g\"?\000\000\200\277\231g\"?\302\305G>\230\305a\277^\203l?1\240\224\276\3329\016\277m\304~?\363\0045\2776\275\310\2751\333T?\013\372t\277\025\357\303>\352Z\361>\276\024{\277\003\344E?\023r0\'\003\344E\277\276\024{?\352Z\361\276\025\357\303\276\013\372t?1\333T\2776\275\310=\363\0045?m\304~\277\3329\016?1\240\224>^\203l\277\230\305a?\302\305G\276\231g\"\277\000\000\200?\231g\"\277\302\305G\276\230\305a?^\203l\2771\240\224>\3329\016?m\304~\277\363\0045?6\275\310=1\333T\277\013\372t?\025\357\303\276\352Z\361\276\276\024{?\003\344E\277\233K\302\'\003\344E?\276\024{\277\352Z\361>\025\357\303>\013\372t\2771\333T?6\275\310\275\363\0045\277m\304~?\3329\016\2771\240\224\276^\203l?\230\305a\277\302\305G>\231g\"?\000\000\200\277\231g\"?\302\305G>\230\305a\277^\203l?1\240\224\276\3329\016\277m\304~?\363\0045\2776\275\310\2751\333T?\013\372t\277\025\357\303>\352Z\361>\276\024{\277\003\344E?\360\313\210(\003\344E\277\276\024{?\352Z\361\276\025\357\303\276\013\372t?1\333T\2776\275\310=\363\0045?m\304~\277\000\000\200?V6\'\277\203@\026\276SHX?\013\372t\277\312{\317>\200\350\332>\007\272v\2771\333T?s\262\372\275J\353+\277C\354\177?\231g\"\277\242\020/\276\032\224[?G\024s\277\025\357\303>u3\346>\370Sx\277=MQ?6\275\310\275\273\2050\277\017\261\177?\321\177\035\277\302\305G\276\005\276^?\010\tq\277*D\270>\352Z\361>\235\307y\277\002\237M?\005\251\226\275\363\0045\277mN\177?\300\177\030\277\023\\`\276\230\305a?\236\330n\277\324|\254>\']\374>\276\024{\277\022\321I?0\373H\275Bh9\277m\304~?*h\023\277\314\317x\276Y\252d?^\203l\277\345\232\240>=\234\003?(;|\277\003\344E?\260\n\311\274\371\256=\277$\023~?\3329\016\277\223\216\210\276\330kg?\247\tj\2771\240\224>\233\365\010?\254:}\277p\330A?\337J\243(p\330A\277\254:}?\233\365\010\2771\240\224\276\247\tj?\330kg\277\223\216\210>\3329\016?$\023~\277\371\256=?\260\n\311<\003\344E\277(;|?=\234\003\277\345\232\240\276^\203l?Y\252d\277\314\317x>*h\023?m\304~\277Bh9?0\373H=\022\321I\277\276\024{?\']\374\276\324|\254\276\236\330n?\230\305a\277\023\\`>\300\177\030?mN\177\277\363\0045?\005\251\226=\002\237M\277\235\307y?\352Z\361\276*D\270\276\010\tq?\005\276^\277\302\305G>\321\177\035?\017\261\177\277\273\2050?6\275\310==MQ\277\370Sx?u3\346\276\025\357\303\276G\024s?\032\224[\277\242\020/>\231g\"?C\354\177\277J\353+?s\262\372=1\333T\277\007\272v?\000\000\200?J\353+\2776\275\310\275\002\237M?\276\024{\277=\234\003?1\240\224>\330kg\277^\203l?\324|\254\276\352Z\361\276\370Sx?1\333T\277\203@\026>\231g\"?\017\261\177\277\363\0045?0\373H=\003\344E\277\254:}?\3329\016\277\314\317x\276\230\305a?\010\tq\277\025\357\303>\200\350\332>\013\372t\277\032\224[?\302\305G\276\300\177\030\277m\304~?\371\256=\277\277\2370\'\371\256=?m\304~\277\300\177\030?\302\305G>\032\224[\277\013\372t?\200\350\332\276\025\357\303\276\010\tq?\230\305a\277\314\317x>\3329\016?\254:}\277\003\344E?0\373H\275\363\0045\277\017\261\177?\231g\"\277\203@\026\2761\333T?\370Sx\277\352Z\361>\324|\254>^\203l\277\330kg?1\240\224\276=\234\003\277\276\024{?\002\237M\2776\275\310=J\353+?\000\000\200\277J\353+?6\275\310=\002\237M\277\276\024{?=\234\003\2771\240\224\276\330kg?^\203l\277\324|\254>\352Z\361>\370Sx\2771\333T?\203@\026\276\231g\"\277\017\261\177?\363\0045\2770\373H\275\003\344E?\254:}\277\3329\016?\314\317x>\230\305a\277\010\tq?\025\357\303\276\200\350\332\276\013\372t?\032\224[\277\302\305G>\300\177\030?m\304~\277\371\256=?\030\304\275(\371\256=\277m\304~?\300\177\030\277\302\305G\276\032\224[?\013\372t\277\200\350\332>\025\357\303>\010\tq\277\230\305a?\314\317x\276\3329\016\277\254:}?\003\344E\2770\373H=\363\0045?\017\261\177\277\231g\"?\203@\026>1\333T\277\370Sx?\352Z\361\276\324|\254\276^\203l?\330kg\277\000\000\200?\273\2050\2770\373H\275p\330A?m\304~\277\321\177\035?\203@\026>=MQ\277\276\024{?\233\365\010\277\314\317x\276\005\276^?\013\372t\277u3\346>\324|\254>\247\tj\277^\203l?*D\270\276\200\350\332\276G\024s?\230\305a\277\223\216\210>=\234\003?\235\307y\2771\333T?\242\020/\276\300\177\030\277$\023~?\003\344E\277\005\251\226=J\353+?C\354\177\277\363\0045?\260\n\311<\371\256=\277mN\177?\231g\"\277s\262\372\275\002\237M?(;|\277\3329\016?\023\\`>\032\224[\277\007\272v?\352Z\361\276\345\232\240\276\330kg?\236\330n\277\025\357\303>\312{\317>\010\tq\277Y\252d?1\240\224\276\']\374\276\370Sx?SHX\277\302\305G>*h\023?\254:}\277\022\321I?6\275\310\275V6\'\277\017\261\177?Bh9\277-\250\014\246Bh9?\017\261\177\277V6\'?6\275\310=\022\321I\277\254:}?*h\023\277\302\305G\276SHX?\370Sx\277\']\374>1\240\224>Y\252d\277\010\tq?\312{\317\276\025\357\303\276\236\330n?\330kg\277\345\232\240>\352Z\361>\007\272v\277\032\224[?\023\\`\276\3329\016\277(;|?\002\237M\277s\262\372=\231g\"?mN\177\277\371\256=?\260\n\311\274\363\0045\277C\354\177?J\353+\277\005\251\226\275\003\344E?$\023~\277\300\177\030?\242\020/>1\333T\277\235\307y?=\234\003\277\223\216\210\276\230\305a?G\024s\277\200\350\332>*D\270>^\203l\277\247\tj?\324|\254\276u3\346\276\013\372t?\005\276^\277\314\317x>\233\365\010?\276\024{\277=MQ?\000\000\200?\363\0045\277\312\311S\245\363\0045?\000\000\200\277\363\0045?X\327\036&\363\0045\277\000\000\200?\363\0045\277\017/B\247\363\0045?\000\000\200\277\363\0045?\336^\r\246\363\0045\277\000\000\200?\363\0045\277\202!w\247\363\0045?\000\000\200\277\363\0045?\331\325\214%\363\0045\277\000\000\200?\363\0045\277\372\t\226\247\363\0045?\000\000\200\277\363\0045?[\032\215&\363\0045\277\000\000\200?\363\0045\2774\203\260\247\363\0045?\000\000\200\277\363\0045?\350\337\036(\363\0045\277\000\000\200?\363\0045\277M\016\324&\363\0045?\000\000\200\277\363\0045?\023r0\'\363\0045\277\000\000\200?\363\0045\277\246u\345\247\363\0045?\000\000\200\277\363\0045?!Y9(\363\0045\277\000\000\200?\363\0045\277p\367\177\250\363\0045?\000\000\200\277\363\0045?\337J\243(\363\0045\277\000\000\200?\363\0045\277\347\227\345\'\363\0045?\000\000\200\277\363\0045?\225\2660\247\363\0045\277\000\000\200?\363\0045\277H\205\323\246\363\0045?\000\000\200\277\363\0045?\357\035\302\'\363\0045\277\000\000\200?\363\0045\277F\255\'\250\363\0045?\000\000\200\277\363\0045?\224Kn(\363\0045\277\000\000\200?\363\0045\277\361t\232\250\363\0045?\000\000\200\277\363\0045?\030\304\275(\363\0045\277\000\000\200?\363\0045\277\004fw\'\363\0045?\000\000\200\277\363\0045?\325L\014&\363\0045\277\000\000\200?\363\0045\2777\306\236\247\363\0045?\000\000\200\277\363\0045?Z\200%)\363\0045\277\000\000\200?\363\0045\277\270\237\\\250\363\0045?\000\000\200\277\363\0045?\371\301\\\250\363\0045\277\000\000\200?\363\0045\277\000\000\200?Bh9\2770\373H=V6\'?m\304~\277\022\321I?\203@\026\276*h\023\277\276\024{?SHX\277\314\317x>\']\374>\013\372t\277Y\252d?\324|\254\276\312{\317\276^\203l?\236\330n\277\200\350\332>\345\232\240>\230\305a\277\007\272v?=\234\003\277\023\\`\2761\333T?(;|\277\300\177\030?s\262\372=\003\344E\277mN\177?J\353+\277\260\n\311\274\363\0045?C\354\177\277\371\256=?\005\251\226\275\231g\"\277$\023~?\002\237M\277\242\020/>\3329\016?\235\307y\277\032\224[?\223\216\210\276\352Z\361\276G\024s?\330kg\277*D\270>\025\357\303>\247\tj\277\010\tq?u3\346\2761\240\224\276\005\276^?\370Sx\277\233\365\010?\302\305G>=MQ\277\254:}?\321\177\035\2776\275\310\275p\330A?\017\261\177\277\273\2050?H\377J(\273\2050\277\017\261\177?p\330A\2776\275\310=\321\177\035?\254:}\277=MQ?\302\305G\276\233\365\010\277\370Sx?\005\276^\2771\240\224>u3\346>\010\tq\277\247\tj?\025\357\303\276*D\270\276\330kg?G\024s\277\352Z\361>\223\216\210>\032\224[\277\235\307y?\3329\016\277\242\020/\276\002\237M?$\023~\277\231g\"?\005\251\226=\371\256=\277C\354\177?\363\0045\277\260\n\311<J\353+?mN\177\277\003\344E?s\262\372\275\300\177\030\277(;|?1\333T\277\023\\`>=\234\003?\007\272v\277\230\305a?\345\232\240\276\200\350\332\276\236\330n?^\203l\277\312{\317>\324|\254>Y\252d\277\013\372t?\']\374\276\314\317x\276SHX?\276\024{\277*h\023?\000\000\200?\371\256=\2776\275\310=\300\177\030?\276\024{\277\032\224[?1\240\224\276\200\350\332\276^\203l?\010\tq\277\352Z\361>\314\317x>1\333T\277\254:}?\231g\"\2770\373H\275\363\0045?\017\261\177\277\003\344E?\203@\026\276\3329\016\277\370Sx?\230\305a\277\324|\254>\025\357\303>\330kg\277\013\372t?=\234\003\277\302\305G\276\002\237M?m\304~\277J\353+?\325\014\026(J\353+\277m\304~?\002\237M\277\302\305G>=\234\003?\013\372t\277\330kg?\025\357\303\276\324|\254\276\230\305a?\370Sx\277\3329\016?\203@\026>\003\344E\277\017\261\177?\363\0045\2770\373H=\231g\"?\254:}\2771\333T?\314\317x\276\352Z\361\276\010\tq?^\203l\277\200\350\332>1\240\224>\032\224[\277\276\024{?\300\177\030\2776\275\310\275\371\256=?\000\000\200\277\371\256=?6\275\310\275\300\177\030\277\276\024{?\032\224[\2771\240\224>\200\350\332>^\203l\277\010\tq?\352Z\361\276\314\317x\2761\333T?\254:}\277\231g\"?0\373H=\363\0045\277\017\261\177?\003\344E\277\203@\026>\3329\016?\370Sx\277\230\305a?\324|\254\276\025\357\303\276\330kg?\013\372t\277=\234\003?\302\305G>\002\237M\277m\304~?J\353+\277\004fw\'J\353+?m\304~\277\002\237M?\302\305G\276=\234\003\277\013\372t?\330kg\277\025\357\303>\324|\254>\230\305a\277\370Sx?\3329\016\277\203@\026\276\003\344E?\017\261\177\277\363\0045?0\373H\275\231g\"\277\254:}?1\333T\277\314\317x>\352Z\361>\010\tq\277^\203l?\200\350\332\276\000\000\200?p\330A\277\203@\026>\233\365\010?\013\372t\277\247\tj?\200\350\332\276\223\216\210\2761\333T?$\023~\277J\353+?\260\n\311\274\231g\"\277(;|?\032\224[\277\345\232\240>\025\357\303>Y\252d\277\370Sx?*h\023\2776\275\310\275Bh9?\017\261\177\277\022\321I?\302\305G\276\']\374\276\010\tq?\236\330n\277\352Z\361>\023\\`>\002\237M\277mN\177?\363\0045\277\005\251\226=\300\177\030?\235\307y\277\230\305a?*D\270\276\324|\254\276\005\276^?\276\024{\277\321\177\035?0\373H=\273\2050\277m\304~?=MQ\277\314\317x>u3\346>^\203l\277G\024s?=\234\003\277\242\020/\276\003\344E?C\354\177\277\371\256=?s\262\372\275\3329\016\277\007\272v?\330kg\277\312{\317>1\240\224>SHX\277\254:}?V6\'\277\347\227\345\'V6\'?\254:}\277SHX?1\240\224\276\312{\317\276\330kg?\007\272v\277\3329\016?s\262\372=\371\256=\277C\354\177?\003\344E\277\242\020/>=\234\003?G\024s\277^\203l?u3\346\276\314\317x\276=MQ?m\304~\277\273\2050?0\373H\275\321\177\035\277\276\024{?\005\276^\277\324|\254>*D\270>\230\305a\277\235\307y?\300\177\030\277\005\251\226\275\363\0045?mN\177\277\002\237M?\023\\`\276\352Z\361\276\236\330n?\010\tq\277\']\374>\302\305G>\022\321I\277\017\261\177?Bh9\2776\275\310=*h\023?\370Sx\277Y\252d?\025\357\303\276\345\232\240\276\032\224[?(;|\277\231g\"?\260\n\311<J\353+\277$\023~?1\333T\277\223\216\210>\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?\212\214\215\245\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277\246u\345\247\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\3329\016\277\013\372t?^\203l\277\352Z\361>\302\305G>\003\344E\277\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?\005\361\264(\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277PB\030\251\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\000\000\200?\022\321I\277\314\317x>\312{\317>\230\305a\277(;|?J\353+\277\005\251\226=\3329\016?G\024s\277\010\tq?\233\365\010\2776\275\310\275\273\2050?\254:}\277\005\276^?\025\357\303\276\223\216\210\276\002\237M?C\354\177\277\003\344E?\023\\`\276\200\350\332\276Y\252d?\276\024{\277V6\'?0\373H\275*h\023\277\013\372t?\236\330n\277=\234\003?s\262\372=\363\0045\277$\023~?\032\224[\277*D\270>1\240\224>=MQ\277\017\261\177?p\330A\277\302\305G>u3\346>\330kg\277\235\307y?\231g\"\277\260\n\311<\300\177\030?\007\272v\277^\203l?\']\374\276\203@\026\276Bh9?m\304~\277SHX?\324|\254\276\345\232\240\2761\333T?mN\177\277\371\256=?\242\020/\276\352Z\361\276\247\tj?\370Sx\277\321\177\035?\242\321\236\'\321\177\035\277\370Sx?\247\tj\277\352Z\361>\242\020/>\371\256=\277mN\177?1\333T\277\345\232\240>\324|\254>SHX\277m\304~?Bh9\277\203@\026>\']\374>^\203l\277\007\272v?\300\177\030\277\260\n\311\274\231g\"?\235\307y\277\330kg?u3\346\276\302\305G\276p\330A?\017\261\177\277=MQ?1\240\224\276*D\270\276\032\224[?$\023~\277\363\0045?s\262\372\275=\234\003\277\236\330n?\013\372t\277*h\023?0\373H=V6\'\277\276\024{?Y\252d\277\200\350\332>\023\\`>\003\344E\277C\354\177?\002\237M\277\223\216\210>\025\357\303>\005\276^\277\254:}?\273\2050\2776\275\310=\233\365\010?\010\tq\277G\024s?\3329\016\277\005\251\226\275\000\000\200?\002\237M\2771\240\224>\324|\254>1\333T\277\017\261\177?\003\344E\277\314\317x>\025\357\303>\032\224[\277m\304~?\371\256=\277\302\305G>\200\350\332>\230\305a\277\254:}?\363\0045\277\203@\026>\352Z\361>\330kg\277\276\024{?J\353+\2776\275\310==\234\003?^\203l\277\370Sx?\231g\"\2770\373H=\3329\016?\010\tq\277\013\372t?\300\177\030\2774\203\260\247\300\177\030?\013\372t\277\010\tq?\3329\016\2770\373H\275\231g\"?\370Sx\277^\203l?=\234\003\2776\275\310\275J\353+?\276\024{\277\330kg?\352Z\361\276\203@\026\276\363\0045?\254:}\277\230\305a?\200\350\332\276\302\305G\276\371\256=?m\304~\277\032\224[?\025\357\303\276\314\317x\276\003\344E?\017\261\177\2771\333T?\324|\254\2761\240\224\276\002\237M?\000\000\200\277\002\237M?1\240\224\276\324|\254\2761\333T?\017\261\177\277\003\344E?\314\317x\276\025\357\303\276\032\224[?m\304~\277\371\256=?\302\305G\276\200\350\332\276\230\305a?\254:}\277\363\0045?\203@\026\276\352Z\361\276\330kg?\276\024{\277J\353+?6\275\310\275=\234\003\277^\203l?\370Sx\277\231g\"?0\373H\275\3329\016\277\010\tq?\013\372t\277\300\177\030?\325L\014&\300\177\030\277\013\372t?\010\tq\277\3329\016?0\373H=\231g\"\277\370Sx?^\203l\277=\234\003?6\275\310=J\353+\277\276\024{?\330kg\277\352Z\361>\203@\026>\363\0045\277\254:}?\230\305a\277\200\350\332>\302\305G>\371\256=\277m\304~?\032\224[\277\025\357\303>\314\317x>\000\000\200?=MQ\277\324|\254>\223\216\210>\003\344E\277mN\177?\032\224[\277\312{\317>\302\305G>Bh9\277\254:}?Y\252d\277\352Z\361>s\262\372=J\353+\277\235\307y?^\203l\277\233\365\010?0\373H=\321\177\035\277\013\372t?G\024s\277\300\177\030?\260\n\311\274\3329\016\277\236\330n?\370Sx\277V6\'?6\275\310\275\']\374\276\330kg?(;|\277\363\0045?\242\020/\276\200\350\332\276\005\276^?m\304~\277p\330A?\314\317x\276*D\270\2761\333T?C\354\177\277\002\237M?\345\232\240\2761\240\224\276\022\321I?\017\261\177\277SHX?\025\357\303\276\023\\`\276\371\256=?$\023~\277\230\305a?u3\346\276\203@\026\276\273\2050?\276\024{\277\247\tj?=\234\003\277\005\251\226\275\231g\"?\007\272v\277\010\tq?*h\023\277\313\316\210\250*h\023?\010\tq\277\007\272v?\231g\"\277\005\251\226==\234\003?\247\tj\277\276\024{?\273\2050\277\203@\026>u3\346>\230\305a\277$\023~?\371\256=\277\023\\`>\025\357\303>SHX\277\017\261\177?\022\321I\2771\240\224>\345\232\240>\002\237M\277C\354\177?1\333T\277*D\270>\314\317x>p\330A\277m\304~?\005\276^\277\200\350\332>\242\020/>\363\0045\277(;|?\330kg\277\']\374>6\275\310=V6\'\277\370Sx?\236\330n\277\3329\016?\260\n\311<\300\177\030\277G\024s?\013\372t\277\321\177\035?0\373H\275\233\365\010\277^\203l?\235\307y\277J\353+?s\262\372\275\352Z\361\276Y\252d?\254:}\277Bh9?\302\305G\276\312{\317\276\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\010H\215\246\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\372\t\226\247\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\373\262\'(\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\371`\004\250\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\357\035\302\'\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\326\363v\247\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\234W\323&\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277y\214\373\250\3329\016?\000\000\200?SHX\277\200\350\332>s\262\372=\231g\"\277G\024s?\370Sx\277\273\2050?\302\305G\276*D\270\276\002\237M?mN\177\277\230\305a?\']\374\2760\373H\275*h\023?^\203l\277(;|?\371\256=\277\223\216\210>1\240\224>p\330A\277\254:}?\247\tj\277\3329\016?\260\n\311\274=\234\003\277Y\252d?m\304~\277\022\321I?\324|\254\276\023\\`\276\363\0045?\235\307y\277\010\tq?\321\177\035\2776\275\310=u3\346>\032\224[\277C\354\177?1\333T\277\312{\317>\203@\026>V6\'\277\013\372t?\007\272v\277J\353+?\242\020/\276\025\357\303\276=MQ?\017\261\177\277\005\276^?\352Z\361\276\005\251\226\275\300\177\030?\236\330n\277\276\024{?Bh9\277\314\317x>\345\232\240>\003\344E\277$\023~?\330kg\277\233\365\010?\225\2660\247\233\365\010\277\330kg?$\023~\277\003\344E?\345\232\240\276\314\317x\276Bh9?\276\024{\277\236\330n?\300\177\030\277\005\251\226=\352Z\361>\005\276^\277\017\261\177?=MQ\277\025\357\303>\242\020/>J\353+\277\007\272v?\013\372t\277V6\'?\203@\026\276\312{\317\2761\333T?C\354\177\277\032\224[?u3\346\2766\275\310\275\321\177\035?\010\tq\277\235\307y?\363\0045\277\023\\`>\324|\254>\022\321I\277m\304~?Y\252d\277=\234\003?\260\n\311<\3329\016\277\247\tj?\254:}\277p\330A?1\240\224\276\223\216\210\276\371\256=?(;|\277^\203l?*h\023\2770\373H=\']\374>\230\305a\277mN\177?\002\237M\277*D\270>\302\305G>\273\2050\277\000\000\200?\032\224[\277\352Z\361>0\373H=\3329\016\277\330kg?m\304~\277\002\237M?\025\357\303\276\203@\026\276\231g\"?\010\tq\277\276\024{?\371\256=\2771\240\224>\314\317x>\363\0045\277\370Sx?\013\372t\277J\353+?\302\305G\276\324|\254\276\003\344E?\254:}\277^\203l?\300\177\030\2776\275\310=\200\350\332>1\333T\277\017\261\177?\230\305a\277=\234\003?\364\262\323&=\234\003\277\230\305a?\017\261\177\2771\333T?\200\350\332\2766\275\310\275\300\177\030?^\203l\277\254:}?\003\344E\277\324|\254>\302\305G>J\353+\277\013\372t?\370Sx\277\363\0045?\314\317x\2761\240\224\276\371\256=?\276\024{\277\010\tq?\231g\"\277\203@\026>\025\357\303>\002\237M\277m\304~?\330kg\277\3329\016?0\373H\275\352Z\361\276\032\224[?\000\000\200\277\032\224[?\352Z\361\2760\373H\275\3329\016?\330kg\277m\304~?\002\237M\277\025\357\303>\203@\026>\231g\"\277\010\tq?\276\024{\277\371\256=?1\240\224\276\314\317x\276\363\0045?\370Sx\277\013\372t?J\353+\277\302\305G>\324|\254>\003\344E\277\254:}?^\203l\277\300\177\030?6\275\310\275\200\350\332\2761\333T?\017\261\177\277\230\305a?=\234\003\2777\306\236\247=\234\003?\230\305a\277\017\261\177?1\333T\277\200\350\332>6\275\310=\300\177\030\277^\203l?\254:}\277\003\344E?\324|\254\276\302\305G\276J\353+?\013\372t\277\370Sx?\363\0045\277\314\317x>1\240\224>\371\256=\277\276\024{?\010\tq\277\231g\"?\203@\026\276\025\357\303\276\002\237M?\000\000\200?\005\276^\277=\234\003?\260\n\311\274\352Z\361\276SHX?\017\261\177\277Y\252d?\3329\016\277\005\251\226=\200\350\332>=MQ\277m\304~?\247\tj\277\300\177\030?s\262\372\275\025\357\303\276\022\321I?\254:}\277\236\330n?\231g\"\277\242\020/>\324|\254>p\330A\277\276\024{?G\024s\277J\353+?\023\\`\2761\240\224\276Bh9?\370Sx\277\007\272v?\363\0045\277\223\216\210>\314\317x>\273\2050\277\013\372t?\235\307y\277\371\256=?\345\232\240\276\302\305G\276V6\'?\010\tq\277(;|?\003\344E\277*D\270>\203@\026>\321\177\035\277^\203l?$\023~\277\002\237M?\312{\317\2766\275\310\275*h\023?\330kg\277mN\177?1\333T\277u3\346>0\373H=\233\365\010\277\230\305a?C\354\177\277\032\224[?\']\374\276\037\007\026\250\']\374>\032\224[\277C\354\177?\230\305a\277\233\365\010?0\373H\275u3\346\2761\333T?mN\177\277\330kg?*h\023\2776\275\310=\312{\317>\002\237M\277$\023~?^\203l\277\321\177\035?\203@\026\276*D\270\276\003\344E?(;|\277\010\tq?V6\'\277\302\305G>\345\232\240>\371\256=\277\235\307y?\013\372t\277\273\2050?\314\317x\276\223\216\210\276\363\0045?\007\272v\277\370Sx?Bh9\2771\240\224>\023\\`>J\353+\277G\024s?\276\024{\277p\330A?\324|\254\276\242\020/\276\231g\"?\236\330n\277\254:}?\022\321I\277\025\357\303>s\262\372=\300\177\030\277\247\tj?m\304~\277=MQ?\200\350\332\276\005\251\226\275\3329\016?Y\252d\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276\202!w\247\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>!Y9(\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\276\024{\277\003\344E?\025\357\303\2766\275\310\275\3329\016?\230\305a\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276\361t\232\250\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>\272\n\237\247\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\000\000\200?Y\252d\277\300\177\030?\242\020/\2761\240\224\276\273\2050?\010\tq\277$\023~?1\333T\277\']\374>0\373H\275\312{\317\276\003\344E?\235\307y\277\370Sx?p\330A\277\025\357\303>\005\251\226==\234\003\277SHX?m\304~\277\236\330n?J\353+\277\223\216\210>\302\305G>\321\177\035\277\330kg?C\354\177\277\230\305a?*h\023\277\203@\026>\345\232\240>\363\0045\277G\024s?\254:}\277=MQ?\352Z\361\276\260\n\311<\200\350\332>\022\321I\277\276\024{?\007\272v\277\371\256=?*D\270\2766\275\310\275\233\365\010?\032\224[\277mN\177?^\203l\277V6\'?\314\317x\276\023\\`\276\231g\"?\247\tj\277\017\261\177?\005\276^\277\3329\016?s\262\372\275\324|\254\276Bh9?\013\372t\277(;|?\002\237M\277u3\346>\362\035\254(u3\346\276\002\237M?(;|\277\013\372t?Bh9\277\324|\254>s\262\372=\3329\016\277\005\276^?\017\261\177\277\247\tj?\231g\"\277\023\\`>\314\317x>V6\'\277^\203l?mN\177\277\032\224[?\233\365\010\2776\275\310=*D\270>\371\256=\277\007\272v?\276\024{\277\022\321I?\200\350\332\276\260\n\311\274\352Z\361>=MQ\277\254:}?G\024s\277\363\0045?\345\232\240\276\203@\026\276*h\023?\230\305a\277C\354\177?\330kg\277\321\177\035?\302\305G\276\223\216\210\276J\353+?\236\330n\277m\304~?SHX\277=\234\003?\005\251\226\275\025\357\303\276p\330A?\370Sx\277\235\307y?\003\344E\277\312{\317>0\373H=\']\374\2761\333T?$\023~\277\000\000\200?\330kg\277\231g\"?\314\317x\276\302\305G\276\300\177\030?\230\305a\277\017\261\177?^\203l\277J\353+?1\240\224\276\203@\026\276\3329\016?\032\224[\277m\304~?\010\tq\277\363\0045?\324|\254\2766\275\310\275=\234\003?1\333T\277\254:}?\013\372t\277\371\256=?\025\357\303\2760\373H\275\352Z\361>\002\237M\277\276\024{?\370Sx\277\003\344E?\200\350\332\276sS\r\'\200\350\332>\003\344E\277\370Sx?\276\024{\277\002\237M?\352Z\361\2760\373H=\025\357\303>\371\256=\277\013\372t?\254:}\2771\333T?=\234\003\2776\275\310=\324|\254>\363\0045\277\010\tq?m\304~\277\032\224[?\3329\016\277\203@\026>1\240\224>J\353+\277^\203l?\017\261\177\277\230\305a?\300\177\030\277\302\305G>\314\317x>\231g\"\277\330kg?\000\000\200\277\330kg?\231g\"\277\314\317x>\302\305G>\300\177\030\277\230\305a?\017\261\177\277^\203l?J\353+\2771\240\224>\203@\026>\3329\016\277\032\224[?m\304~\277\010\tq?\363\0045\277\324|\254>6\275\310==\234\003\2771\333T?\254:}\277\013\372t?\371\256=\277\025\357\303>0\373H=\352Z\361\276\002\237M?\276\024{\277\370Sx?\003\344E\277\200\350\332>Z\200%)\200\350\332\276\003\344E?\370Sx\277\276\024{?\002\237M\277\352Z\361>0\373H\275\025\357\303\276\371\256=?\013\372t\277\254:}?1\333T\277=\234\003?6\275\310\275\324|\254\276\363\0045?\010\tq\277m\304~?\032\224[\277\3329\016?\203@\026\2761\240\224\276J\353+?^\203l\277\017\261\177?\000\000\200?\247\tj\277J\353+?\345\232\240\2766\275\310\275\']\374>\002\237M\277\235\307y?\276\024{\277=MQ?=\234\003\277s\262\372=1\240\224>V6\'\277\330kg?C\354\177\277^\203l?\273\2050\277\324|\254>\005\251\226=\352Z\361\276\022\321I?\370Sx\277(;|?1\333T\277\233\365\010?\203@\026\276\223\216\210\276\231g\"?Y\252d\277\017\261\177?\236\330n\277\363\0045?*D\270\2760\373H\275u3\346>\003\344E\277\007\272v?\254:}\277SHX?\3329\016\277\242\020/>\314\317x>\321\177\035\277\230\305a?mN\177\277\010\tq?Bh9\277\025\357\303>\260\n\311<\200\350\332\276p\330A?\013\372t\277$\023~?\032\224[\277*h\023?\302\305G\276\023\\`\276\300\177\030?\005\276^\277m\304~?G\024s\277\371\256=?\312{\317\276H\205\323\246\312{\317>\371\256=\277G\024s?m\304~\277\005\276^?\300\177\030\277\023\\`>\302\305G>*h\023\277\032\224[?$\023~\277\013\372t?p\330A\277\200\350\332>\260\n\311\274\025\357\303\276Bh9?\010\tq\277mN\177?\230\305a\277\321\177\035?\314\317x\276\242\020/\276\3329\016?SHX\277\254:}?\007\272v\277\003\344E?u3\346\2760\373H=*D\270>\363\0045\277\236\330n?\017\261\177\277Y\252d?\231g\"\277\223\216\210>\203@\026>\233\365\010\2771\333T?(;|\277\370Sx?\022\321I\277\352Z\361>\005\251\226\275\324|\254\276\273\2050?^\203l\277C\354\177?\330kg\277V6\'?1\240\224\276s\262\372\275=\234\003?=MQ\277\276\024{?\235\307y\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\027\026\367\245\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\336^\r\246\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\3476\215\247\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\325\014\026(\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276M\016\324&\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>_\276S\'\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\371`\004\250\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\225\2660\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\336\241\221\250\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>;j\345\'\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\004fw\'\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\360\313\210(\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276PB\030\251\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\272\n\237\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\005\354\177\250\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\000\000\200?\236\330n\277\371\256=?u3\346\2766\275\310=\223\216\210>\300\177\030\277SHX?\276\024{\277(;|?\032\224[\277\321\177\035?1\240\224\276\005\251\226\275\200\350\332>Bh9\277^\203l?C\354\177\277\010\tq?p\330A\277\352Z\361>s\262\372\275\314\317x\276*h\023?1\333T\277\235\307y?\254:}\277\005\276^?\231g\"\277\345\232\240>0\373H=\312{\317\276\363\0045?\247\tj\277\017\261\177?G\024s\277\003\344E?\']\374\276\203@\026>\023\\`>\3329\016\277=MQ?\370Sx\277$\023~?\230\305a\277V6\'?\324|\254\276\260\n\311\274\025\357\303>\273\2050\277\330kg?mN\177\277\013\372t?\022\321I\277=\234\003?\242\020/\276\302\305G\276\233\365\010?\002\237M\277\007\272v?m\304~\277Y\252d?J\353+\277*D\270>n\245\\(*D\270\276J\353+?Y\252d\277m\304~?\007\272v\277\002\237M?\233\365\010\277\302\305G>\242\020/>=\234\003\277\022\321I?\013\372t\277mN\177?\330kg\277\273\2050?\025\357\303\276\260\n\311<\324|\254>V6\'\277\230\305a?$\023~\277\370Sx?=MQ\277\3329\016?\023\\`\276\203@\026\276\']\374>\003\344E\277G\024s?\017\261\177\277\247\tj?\363\0045\277\312{\317>0\373H\275\345\232\240\276\231g\"?\005\276^\277\254:}?\235\307y\2771\333T?*h\023\277\314\317x>s\262\372=\352Z\361\276p\330A?\010\tq\277C\354\177?^\203l\277Bh9?\200\350\332\276\005\251\226=1\240\224>\321\177\035\277\032\224[?(;|\277\276\024{?SHX\277\000\000\200?\010\tq\277\003\344E?=\234\003\277\302\305G>\203@\026>\352Z\361\276\371\256=?^\203l\277\017\261\177?\013\372t\277\002\237M?\3329\016\277\314\317x>6\275\310=\200\350\332\276\363\0045?\330kg\277m\304~?\370Sx\2771\333T?\300\177\030\2771\240\224>0\373H=\025\357\303\276J\353+?\230\305a\277\254:}?\276\024{\277\032\224[?\231g\"\277\324|\254>\350\337\036(\324|\254\276\231g\"?\032\224[\277\276\024{?\254:}\277\230\305a?J\353+\277\025\357\303>0\373H\2751\240\224\276\300\177\030?1\333T\277\370Sx?m\304~\277\330kg?\363\0045\277\200\350\332>6\275\310\275\314\317x\276\3329\016?\002\237M\277\013\372t?\017\261\177\277^\203l?\371\256=\277\352Z\361>\203@\026\276\302\305G\276=\234\003?\003\344E\277\010\tq?\000\000\200\277\010\tq?\003\344E\277=\234\003?\302\305G\276\203@\026\276\352Z\361>\371\256=\277^\203l?\017\261\177\277\013\372t?\002\237M\277\3329\016?\314\317x\2766\275\310\275\200\350\332>\363\0045\277\330kg?m\304~\277\370Sx?1\333T\277\300\177\030?1\240\224\2760\373H\275\025\357\303>J\353+\277\230\305a?\254:}\277\276\024{?\032\224[\277\231g\"?\324|\254\276\270\237\\\250\324|\254>\231g\"\277\032\224[?\276\024{\277\254:}?\230\305a\277J\353+?\025\357\303\2760\373H=1\240\224>\300\177\030\2771\333T?\370Sx\277m\304~?\330kg\277\363\0045?\200\350\332\2766\275\310=\314\317x>\3329\016\277\002\237M?\013\372t\277\017\261\177?^\203l\277\371\256=?\000\000\200?G\024s\277\002\237M?*h\023\2771\240\224>\260\n\311<\324|\254\276\321\177\035?1\333T\277\007\272v?\017\261\177\277\236\330n?\003\344E\277\233\365\010?\314\317x\276\005\251\226\275\025\357\303>V6\'\277\032\224[?\235\307y\277m\304~?\247\tj\277\371\256=?\']\374\276\302\305G>s\262\372=\200\350\332\276\273\2050?\230\305a\277(;|?\254:}\277Y\252d?\363\0045\277u3\346>\203@\026\276\242\020/\276\352Z\361>Bh9\277\330kg?$\023~\277\276\024{?\005\276^\277J\353+?\312{\317\2766\275\310=\023\\`>=\234\003\277p\330A?^\203l\277mN\177?\370Sx\277SHX?\231g\"\277*D\270>0\373H\275\223\216\210\276\3329\016?\022\321I\277\010\tq?C\354\177\277\013\372t?=MQ\277\300\177\030?\345\232\240\276\233K\302\'\345\232\240>\300\177\030\277=MQ?\013\372t\277C\354\177?\010\tq\277\022\321I?\3329\016\277\223\216\210>0\373H=*D\270\276\231g\"?SHX\277\370Sx?mN\177\277^\203l?p\330A\277=\234\003?\023\\`\2766\275\310\275\312{\317>J\353+\277\005\276^?\276\024{\277$\023~?\330kg\277Bh9?\352Z\361\276\242\020/>\203@\026>u3\346\276\363\0045?Y\252d\277\254:}?(;|\277\230\305a?\273\2050\277\200\350\332>s\262\372\275\302\305G\276\']\374>\371\256=\277\247\tj?m\304~\277\235\307y?\032\224[\277V6\'?\025\357\303\276\005\251\226=\314\317x>\233\365\010\277\003\344E?\236\330n\277\017\261\177?\007\272v\2771\333T?\321\177\035\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>\333\2606\2411\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276p\367\177\2501\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\302\305G\2766\275\310\275\025\357\303>\231g\"\2771\333T?\013\372t\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>\272\361\177(1\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276\005\354\177\2501\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\000\000\200?\007\272v\277\032\224[?\273\2050\277\352Z\361>\023\\`\2760\373H\275\345\232\240>\3329\016\277p\330A?\330kg\277(;|?m\304~\277\236\330n?\002\237M\277\321\177\035?\025\357\303\276s\262\372=\203@\026>\312{\317\276\231g\"?=MQ\277\010\tq?mN\177\277\276\024{?Y\252d\277\371\256=?\233\365\010\2771\240\224>\260\n\311\274\314\317x\276\']\374>\363\0045\277\005\276^?\370Sx\277C\354\177?\013\372t\277SHX?J\353+\277u3\346>\302\305G\276\005\251\226\275\324|\254>*h\023\277\003\344E?\247\tj\277\254:}?$\023~\277^\203l?\022\321I\277\300\177\030?*D\270\2766\275\310=\242\020/>\200\350\332\276V6\'?1\333T\277G\024s?\017\261\177\277\235\307y?\230\305a\277Bh9?=\234\003\277\223\216\210>\357\035\302\'\223\216\210\276=\234\003?Bh9\277\230\305a?\235\307y\277\017\261\177?G\024s\2771\333T?V6\'\277\200\350\332>\242\020/\2766\275\310\275*D\270>\300\177\030\277\022\321I?^\203l\277$\023~?\254:}\277\247\tj?\003\344E\277*h\023?\324|\254\276\005\251\226=\302\305G>u3\346\276J\353+?SHX\277\013\372t?C\354\177\277\370Sx?\005\276^\277\363\0045?\']\374\276\314\317x>\260\n\311<1\240\224\276\233\365\010?\371\256=\277Y\252d?\276\024{\277mN\177?\010\tq\277=MQ?\231g\"\277\312{\317>\203@\026\276s\262\372\275\025\357\303>\321\177\035\277\002\237M?\236\330n\277m\304~?(;|\277\330kg?p\330A\277\3329\016?\345\232\240\276\000\000\200?\370Sx\277\230\305a?\371\256=\277\3329\016?\324|\254\2766\275\310=\203@\026>\025\357\303\276\300\177\030?\003\344E\277\330kg?\276\024{\277\017\261\177?\013\372t\277\032\224[?\363\0045\277=\234\003?1\240\224\2760\373H=\302\305G>\200\350\332\276\231g\"?\002\237M\277^\203l?\254:}\277m\304~?\010\tq\2771\333T?J\353+\277\352Z\361>\314\317x\276Z)\302\247\314\317x>\352Z\361\276J\353+?1\333T\277\010\tq?m\304~\277\254:}?^\203l\277\002\237M?\231g\"\277\200\350\332>\302\305G\2760\373H\2751\240\224>=\234\003\277\363\0045?\032\224[\277\013\372t?\017\261\177\277\276\024{?\330kg\277\003\344E?\300\177\030\277\025\357\303>\203@\026\2766\275\310\275\324|\254>\3329\016\277\371\256=?\230\305a\277\370Sx?\000\000\200\277\370Sx?\230\305a\277\371\256=?\3329\016\277\324|\254>6\275\310\275\203@\026\276\025\357\303>\300\177\030\277\003\344E?\330kg\277\276\024{?\017\261\177\277\013\372t?\032\224[\277\363\0045?=\234\003\2771\240\224>0\373H\275\302\305G\276\200\350\332>\231g\"\277\002\237M?^\203l\277\254:}?m\304~\277\010\tq?1\333T\277J\353+?\352Z\361\276\314\317x>\371\301\\\250\314\317x\276\352Z\361>J\353+\2771\333T?\010\tq\277m\304~?\254:}\277^\203l?\002\237M\277\231g\"?\200\350\332\276\302\305G>0\373H=1\240\224\276=\234\003?\363\0045\277\032\224[?\013\372t\277\017\261\177?\276\024{\277\330kg?\003\344E\277\300\177\030?\025\357\303\276\203@\026>\000\000\200?\235\307y\277\330kg?\022\321I\277\231g\"?u3\346\276\314\317x>\260\n\311\274\302\305G\276\312{\317>\300\177\030\277p\330A?\230\305a\277\007\272v?\017\261\177\277(;|?^\203l\277=MQ?J\353+\277\']\374>1\240\224\276\005\251\226=\203@\026>*D\270\276\3329\016?Bh9\277\032\224[?G\024s\277m\304~?$\023~\277\010\tq?SHX\277\363\0045?\233\365\010\277\324|\254>s\262\372\2756\275\310\275\345\232\240>=\234\003\277\273\2050?1\333T\277\236\330n?\254:}\277mN\177?\013\372t\277\005\276^?\371\256=\277*h\023?\025\357\303\276\242\020/>0\373H=\223\216\210\276\352Z\361>V6\'\277\002\237M?\247\tj\277\276\024{?C\354\177\277\370Sx?Y\252d\277\003\344E?\321\177\035\277\200\350\332>\023\\`\276\336\241\221\250\023\\`>\200\350\332\276\321\177\035?\003\344E\277Y\252d?\370Sx\277C\354\177?\276\024{\277\247\tj?\002\237M\277V6\'?\352Z\361\276\223\216\210>0\373H\275\242\020/\276\025\357\303>*h\023\277\371\256=?\005\276^\277\013\372t?mN\177\277\254:}?\236\330n\2771\333T?\273\2050\277=\234\003?\345\232\240\2766\275\310=s\262\372=\324|\254\276\233\365\010?\363\0045\277SHX?\010\tq\277$\023~?m\304~\277G\024s?\032\224[\277Bh9?\3329\016\277*D\270>\203@\026\276\005\251\226\2751\240\224>\']\374\276J\353+?=MQ\277^\203l?(;|\277\017\261\177?\007\272v\277\230\305a?p\330A\277\300\177\030?\312{\317\276\302\305G>\260\n\311<\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\017/B\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>[\032\215&\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\246u\345\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\225\2660\247\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\361t\232\250\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>Z\200%)\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276y\214\373\250\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>=\030\254(\302\305G\276\000\000\200?(;|\277\010\tq?\005\276^\277\003\344E?V6\'\277=\234\003?*D\270\276\302\305G>\260\n\311\274\203@\026\276\345\232\240>\352Z\361\276\321\177\035?\371\256=\277SHX?^\203l\277\235\307y?\017\261\177\277$\023~?\013\372t\277Y\252d?\002\237M\277\273\2050?\3329\016\277\312{\317>\314\317x\276\005\251\226=6\275\310=\223\216\210\276\200\350\332>*h\023\277\363\0045?=MQ\277\330kg?\007\272v\277m\304~?mN\177\277\370Sx?\247\tj\2771\333T?Bh9\277\300\177\030?u3\346\2761\240\224>s\262\372\2750\373H\275\023\\`>\025\357\303\276\233\365\010?J\353+\277\022\321I?\230\305a\277G\024s?\254:}\277C\354\177?\276\024{\277\236\330n?\032\224[\277p\330A?\231g\"\277\']\374>\324|\254\276\242\020/>\371;\324\246\242\020/\276\324|\254>\']\374\276\231g\"?p\330A\277\032\224[?\236\330n\277\276\024{?C\354\177\277\254:}?G\024s\277\230\305a?\022\321I\277J\353+?\233\365\010\277\025\357\303>\023\\`\2760\373H=s\262\372=1\240\224\276u3\346>\300\177\030\277Bh9?1\333T\277\247\tj?\370Sx\277mN\177?m\304~\277\007\272v?\330kg\277=MQ?\363\0045\277*h\023?\200\350\332\276\223\216\210>6\275\310\275\005\251\226\275\314\317x>\312{\317\276\3329\016?\273\2050\277\002\237M?Y\252d\277\013\372t?$\023~\277\017\261\177?\235\307y\277^\203l?SHX\277\371\256=?\321\177\035\277\352Z\361>\345\232\240\276\203@\026>\260\n\311<\302\305G\276*D\270>\000\000\200?\254:}\277\013\372t?\330kg\2771\333T?\371\256=\277\231g\"?=\234\003\277\025\357\303>\314\317x\2766\275\310=0\373H=\302\305G\276\324|\254>\352Z\361\276\300\177\030?\363\0045\277\002\237M?\230\305a\277\010\tq?\276\024{\277\017\261\177?m\304~\277\370Sx?^\203l\277\032\224[?\003\344E\277J\353+?\3329\016\277\200\350\332>1\240\224\276\203@\026>\307%\r\'\203@\026\2761\240\224>\200\350\332\276\3329\016?J\353+\277\003\344E?\032\224[\277^\203l?\370Sx\277m\304~?\017\261\177\277\276\024{?\010\tq\277\230\305a?\002\237M\277\363\0045?\300\177\030\277\352Z\361>\324|\254\276\302\305G>0\373H\2756\275\310\275\314\317x>\025\357\303\276=\234\003?\231g\"\277\371\256=?1\333T\277\330kg?\013\372t\277\254:}?\000\000\200\277\254:}?\013\372t\277\330kg?1\333T\277\371\256=?\231g\"\277=\234\003?\025\357\303\276\314\317x>6\275\310\2750\373H\275\302\305G>\324|\254\276\352Z\361>\300\177\030\277\363\0045?\002\237M\277\230\305a?\010\tq\277\276\024{?\017\261\177\277m\304~?\370Sx\277^\203l?\032\224[\277\003\344E?J\353+\277\3329\016?\200\350\332\2761\240\224>\203@\026\276*\356\264\250\203@\026>1\240\224\276\200\350\332>\3329\016\277J\353+?\003\344E\277\032\224[?^\203l\277\370Sx?m\304~\277\017\261\177?\276\024{\277\010\tq?\230\305a\277\002\237M?\363\0045\277\300\177\030?\352Z\361\276\324|\254>\302\305G\2760\373H=6\275\310=\314\317x\276\025\357\303>=\234\003\277\000\000\200?$\023~\277\370Sx?\236\330n\277\230\305a?=MQ\277\371\256=?V6\'\277\3329\016?u3\346\276\324|\254>\023\\`\2766\275\310=\260\n\311<\203@\026\276\223\216\210>\025\357\303\276\']\374>\300\177\030\277\273\2050?\003\344E\277SHX?\330kg\277G\024s?\276\024{\277mN\177?\017\261\177\277(;|?\013\372t\277\247\tj?\032\224[\277\022\321I?\363\0045\277\321\177\035?=\234\003\277\312{\317>1\240\224\276\242\020/>0\373H\275\005\251\226\275\302\305G>\345\232\240\276\200\350\332>\233\365\010\277\231g\"?Bh9\277\002\237M?\005\276^\277^\203l?\007\272v\277\254:}?C\354\177\277m\304~?\235\307y\277\010\tq?Y\252d\2771\333T?p\330A\277J\353+?*h\023\277\352Z\361>*D\270\276\314\317x>s\262\372\275F\255\'\250s\262\372=\314\317x\276*D\270>\352Z\361\276*h\023?J\353+\277p\330A?1\333T\277Y\252d?\010\tq\277\235\307y?m\304~\277C\354\177?\254:}\277\007\272v?^\203l\277\005\276^?\002\237M\277Bh9?\231g\"\277\233\365\010?\200\350\332\276\345\232\240>\302\305G\276\005\251\226=0\373H=\242\020/\2761\240\224>\312{\317\276=\234\003?\321\177\035\277\363\0045?\022\321I\277\032\224[?\247\tj\277\013\372t?(;|\277\017\261\177?mN\177\277\276\024{?G\024s\277\330kg?SHX\277\003\344E?\273\2050\277\300\177\030?\']\374\276\025\357\303>\223\216\210\276\203@\026>\260\n\311\2746\275\310\275\023\\`>\324|\254\276u3\346>\3329\016\277V6\'?\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275\324c\204\2476\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=\337J\243(6\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\2771\333T?\230\305a\277^\203l?\013\372t\277\276\024{?m\304~\277\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275\222\371J\2506\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=Z\327\023)6\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\277\000\000\200?mN\177\277\254:}?\235\307y\277\013\372t?\236\330n\277\330kg?\005\276^\2771\333T?\022\321I\277\371\256=?\273\2050\277\231g\"?*h\023\277=\234\003?u3\346\276\025\357\303>\345\232\240\276\314\317x>\242\020/\2766\275\310=\260\n\311\2740\373H\275s\262\372=\302\305G\276\223\216\210>\324|\254\276\312{\317>\352Z\361\276\233\365\010?\300\177\030\277V6\'?\363\0045\277p\330A?\002\237M\277SHX?\230\305a\277\247\tj?\010\tq\277\007\272v?\276\024{\277$\023~?\017\261\177\277C\354\177?m\304~\277(;|?\370Sx\277G\024s?^\203l\277Y\252d?\032\224[\277=MQ?\003\344E\277Bh9?J\353+\277\321\177\035?\3329\016\277\']\374>\200\350\332\276*D\270>1\240\224\276\023\\`>\203@\026\276\005\251\226=\005\361\264(\005\251\226\275\203@\026>\023\\`\2761\240\224>*D\270\276\200\350\332>\']\374\276\3329\016?\321\177\035\277J\353+?Bh9\277\003\344E?=MQ\277\032\224[?Y\252d\277^\203l?G\024s\277\370Sx?(;|\277m\304~?C\354\177\277\017\261\177?$\023~\277\276\024{?\007\272v\277\010\tq?\247\tj\277\230\305a?SHX\277\002\237M?p\330A\277\363\0045?V6\'\277\300\177\030?\233\365\010\277\352Z\361>\312{\317\276\324|\254>\223\216\210\276\302\305G>s\262\372\2750\373H=\260\n\311<6\275\310\275\242\020/>\314\317x\276\345\232\240>\025\357\303\276u3\346>=\234\003\277*h\023?\231g\"\277\273\2050?\371\256=\277\022\321I?1\333T\277\005\276^?\000\000\200?\017\261\177\277m\304~?\254:}\277\276\024{?\370Sx\277\013\372t?\010\tq\277^\203l?\330kg\277\230\305a?\032\224[\2771\333T?\002\237M\277\003\344E?\371\256=\277\363\0045?J\353+\277\231g\"?\300\177\030\277\3329\016?=\234\003\277\352Z\361>\200\350\332\276\025\357\303>\324|\254\2761\240\224>\314\317x\276\302\305G>\203@\026\2766\275\310=0\373H\275M\016\324&0\373H=6\275\310\275\203@\026>\302\305G\276\314\317x>1\240\224\276\324|\254>\025\357\303\276\200\350\332>\352Z\361\276=\234\003?\3329\016\277\300\177\030?\231g\"\277J\353+?\363\0045\277\371\256=?\003\344E\277\002\237M?1\333T\277\032\224[?\230\305a\277\330kg?^\203l\277\010\tq?\013\372t\277\370Sx?\276\024{\277\254:}?m\304~\277\017\261\177?\000\000\200\277\017\261\177?m\304~\277\254:}?\276\024{\277\370Sx?\013\372t\277\010\tq?^\203l\277\330kg?\230\305a\277\032\224[?1\333T\277\002\237M?\003\344E\277\371\256=?\363\0045\277J\353+?\231g\"\277\300\177\030?\3329\016\277=\234\003?\352Z\361\276\200\350\332>\025\357\303\276\324|\254>1\240\224\276\314\317x>\302\305G\276\203@\026>6\275\310\2750\373H=\272\n\237\2470\373H\2756\275\310=\203@\026\276\302\305G>\314\317x\2761\240\224>\324|\254\276\025\357\303>\200\350\332\276\352Z\361>=\234\003\277\3329\016?\300\177\030\277\231g\"?J\353+\277\363\0045?\371\256=\277\003\344E?\002\237M\2771\333T?\032\224[\277\230\305a?\330kg\277^\203l?\010\tq\277\000\000\200?C\354\177\277\017\261\177?mN\177\277m\304~?$\023~\277\254:}?(;|\277\276\024{?\235\307y\277\370Sx?\007\272v\277\013\372t?G\024s\277\010\tq?\236\330n\277^\203l?\247\tj\277\330kg?Y\252d\277\230\305a?\005\276^\277\032\224[?SHX\2771\333T?=MQ\277\002\237M?\022\321I\277\003\344E?p\330A\277\371\256=?Bh9\277\363\0045?\273\2050\277J\353+?V6\'\277\231g\"?\321\177\035\277\300\177\030?*h\023\277\3329\016?\233\365\010\277=\234\003?\']\374\276\352Z\361>u3\346\276\200\350\332>\312{\317\276\025\357\303>*D\270\276\324|\254>\345\232\240\2761\240\224>\223\216\210\276\314\317x>\023\\`\276\302\305G>\242\020/\276\203@\026>s\262\372\2756\275\310=\005\251\226\2750\373H=\260\n\311\274=[0\247\260\n\311<0\373H\275\005\251\226=6\275\310\275s\262\372=\203@\026\276\242\020/>\302\305G\276\023\\`>\314\317x\276\223\216\210>1\240\224\276\345\232\240>\324|\254\276*D\270>\025\357\303\276\312{\317>\200\350\332\276u3\346>\352Z\361\276\']\374>=\234\003\277\233\365\010?\3329\016\277*h\023?\300\177\030\277\321\177\035?\231g\"\277V6\'?J\353+\277\273\2050?\363\0045\277Bh9?\371\256=\277p\330A?\003\344E\277\022\321I?\002\237M\277=MQ?1\333T\277SHX?\032\224[\277\005\276^?\230\305a\277Y\252d?\330kg\277\247\tj?^\203l\277\236\330n?\010\tq\277G\024s?\013\372t\277\007\272v?\370Sx\277\235\307y?\276\024{\277(;|mN\177\277m\304~?$\023~\277\254:}?(;|\277\276\024{?\235\307y\277\370Sx?\007\272v\277\013\372t?G\024s\277\010\tq?\236\330n\277^\203l?\247\tj\277\330kg?Y\252d\277\230\305a?\005\276^\277\032\224[?SHX\2771\333T?=MQ\277\002\237M?\022\321I\277\003\344E?p\330A\277\371\256=?Bh9\277\363\0045?\273\2050\277J\353+?V6\'\277\231g\"?\321\177\035\277\300\177\030?*h\023\277\3329\016?\233\365\010\277=\234\003?\']\374\276\352Z\361>u3\346\276\200\350\332>\312{\317\276\025\357\303>*D\270\276\324|\254>\345\232\240\2761\240\224>\223\216\210\276\314\317x>\023\\`\276\302\305G>\242\020/\276\203@\026>s\262\372\2756\275\310=\005\251\226\2750\373H=\260\n\311\274\224Kn(\260\n\311<0\373H\275\005\251\226=6\275\310\275s\262\372=\203@\026\276\242\020/>\302\305G\276\023\\`>\314\317x\276\223\216\210>1\240\224\276\345\232\240>\324|\254\276*D\270>\025\357\303\276\312{\317>\200\350\332\276u3\346>\352Z\361\276\']\374>=\234\003\277\233\365\010?\3329\016\277*h\023?\300\177\030\277\321\177\035?\231g\"\277V6\'?J\353+\277\273\2050?\363\0045\277Bh9?\371\256=\277p\330A?\003\344E\277\022\321I?\002\237M\277=MQ?1\333T\277SHX?\032\224[\277\005\276^?\230\305a\277Y\252d?\330kg\277\247\tj?^\203l\277\236\330n?\010\tq\277G\024s?\013\372t\277\007\272v?\370Sx\277\235\307y?\276\024{\277(;|?\000\000\200?\017\261\177\277m\304~?\254:}\277\276\024{?\370Sx\277\013\372t?\010\tq\277^\203l?\330kg\277\230\305a?\032\224[\2771\333T?\002\237M\277\003\344E?\371\256=\277\363\0045?J\353+\277\231g\"?\300\177\030\277\3329\016?=\234\003\277\352Z\361>\200\350\332\276\025\357\303>\324|\254\2761\240\224>\314\317x\276\302\305G>\203@\026\2766\275\310=0\373H\275\373\262\'(0\373H=6\275\310\275\203@\026>\302\305G\276\314\317x>1\240\224\276\324|\254>\025\357\303\276\200\350\332>\352Z\361\276=\234\003?\3329\016\277\300\177\030?\231g\"\277J\353+?\363\0045\277\371\256=?\003\344E\277\002\237M?1\333T\277\032\224[?\230\305a\277\330kg?^\203l\277\010\tq?\013\372t\277\370Sx?\276\024{\277\254:}?m\304~\277\017\261\177?\000\000\200\277\017\261\177?m\304~\277\254:}?\276\024{\277\370Sx?\013\372t\277\010\tq?^\203l\277\330kg?\230\305a\277\032\224[?1\333T\277\002\237M?\003\344E\277\371\256=?\363\0045\277J\353+?\231g\"\277\300\177\030?\3329\016\277=\234\003?\352Z\361\276\200\350\332>\025\357\303\276\324|\254>1\240\224\276\314\317x>\302\305G\276\203@\026>6\275\310\2750\373H=y\214\373\2500\373H\2756\275\310=\203@\026\276\302\305G>\314\317x\2761\240\224>\324|\254\276\025\357\303>\200\350\332\276\352Z\361>=\234\003\277\3329\016?\300\177\030\277\231g\"?J\353+\277\363\0045?\371\256=\277\003\344E?\002\237M\2771\333T?\032\224[\277\230\305a?\330kg\277^\203l?\010\tq\277\000\000\200?mN\177\277\254:}?\235\307y\277\013\372t?\236\330n\277\330kg?\005\276^\2771\333T?\022\321I\277\371\256=?\273\2050\277\231g\"?*h\023\277=\234\003?u3\346\276\025\357\303>\345\232\240\276\314\317x>\242\020/\2766\275\310=\260\n\311\2740\373H\275s\262\372=\302\305G\276\223\216\210>\324|\254\276\312{\317>\352Z\361\276\233\365\010?\300\177\030\277V6\'?\363\0045\277p\330A?\002\237M\277SHX?\230\305a\277\247\tj?\010\tq\277\007\272v?\276\024{\277$\023~?\017\261\177\277C\354\177?m\304~\277(;|?\370Sx\277G\024s?^\203l\277Y\252d?\032\224[\277=MQ?\003\344E\277Bh9?J\353+\277\321\177\035?\3329\016\277\']\374>\200\350\332\276*D\270>1\240\224\276\023\\`>\203@\026\276\005\251\226=N\377\236\'\005\251\226\275\203@\026>\023\\`\2761\240\224>*D\270\276\200\350\332>\']\374\276\3329\016?\321\177\035\277J\353+?Bh9\277\003\344E?=MQ\277\032\224[?Y\252d\277^\203l?G\024s\277\370Sx?(;|\277m\304~?C\354\177\277\017\261\177?$\023~\277\276\024{?\007\272v\277\010\tq?\247\tj\277\230\305a?SHX\277\002\237M?p\330A\277\363\0045?V6\'\277\300\177\030?\233\365\010\277\352Z\361>\312{\317\276\324|\254>\223\216\210\276\302\305G>s\262\372\2750\373H=\260\n\311<6\275\310\275\242\020/>\314\317x\276\345\232\240>\025\357\303\276u3\346>=\234\003\277*h\023?\231g\"\277\273\2050?\371\256=\277\022\321I?1\333T\277\005\276^?\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275\331\325\214%6\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=\347\227\345\'6\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\2771\333T?\230\305a\277^\203l?\013\372t\277\276\024{?m\304~\277\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275Z\200%)6\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=qb\302\'6\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\277\000\000\200?$\023~\277\370Sx?\236\330n\277\230\305a?=MQ\277\371\256=?V6\'\277\3329\016?u3\346\276\324|\254>\023\\`\2766\275\310=\260\n\311<\203@\026\276\223\216\210>\025\357\303\276\']\374>\300\177\030\277\273\2050?\003\344E\277SHX?\330kg\277G\024s?\276\024{\277mN\177?\017\261\177\277(;|?\013\372t\277\247\tj?\032\224[\277\022\321I?\363\0045\277\321\177\035?=\234\003\277\312{\317>1\240\224\276\242\020/>0\373H\275\005\251\226\275\302\305G>\345\232\240\276\200\350\332>\233\365\010\277\231g\"?Bh9\277\002\237M?\005\276^\277^\203l?\007\272v\277\254:}?C\354\177\277m\304~?\235\307y\277\010\tq?Y\252d\2771\333T?p\330A\277J\353+?*h\023\277\352Z\361>*D\270\276\314\317x>s\262\372\275;j\345\'s\262\372=\314\317x\276*D\270>\352Z\361\276*h\023?J\353+\277p\330A?1\333T\277Y\252d?\010\tq\277\235\307y?m\304~\277C\354\177?\254:}\277\007\272v?^\203l\277\005\276^?\002\237M\277Bh9?\231g\"\277\233\365\010?\200\350\332\276\345\232\240>\302\305G\276\005\251\226=0\373H=\242\020/\2761\240\224>\312{\317\276=\234\003?\321\177\035\277\363\0045?\022\321I\277\032\224[?\247\tj\277\013\372t?(;|\277\017\261\177?mN\177\277\276\024{?G\024s\277\330kg?SHX\277\003\344E?\273\2050\277\300\177\030?\']\374\276\025\357\303>\223\216\210\276\203@\026>\260\n\311\2746\275\310\275\023\\`>\324|\254\276u3\346>\3329\016\277V6\'?\000\000\200?\254:}\277\013\372t?\330kg\2771\333T?\371\256=\277\231g\"?=\234\003\277\025\357\303>\314\317x\2766\275\310=0\373H=\302\305G\276\324|\254>\352Z\361\276\300\177\030?\363\0045\277\002\237M?\230\305a\277\010\tq?\276\024{\277\017\261\177?m\304~\277\370Sx?^\203l\277\032\224[?\003\344E\277J\353+?\3329\016\277\200\350\332>1\240\224\276\203@\026>\200\317\323\247\203@\026\2761\240\224>\200\350\332\276\3329\016?J\353+\277\003\344E?\032\224[\277^\203l?\370Sx\277m\304~?\017\261\177\277\276\024{?\010\tq\277\230\305a?\002\237M\277\363\0045?\300\177\030\277\352Z\361>\324|\254\276\302\305G>0\373H\2756\275\310\275\314\317x>\025\357\303\276=\234\003?\231g\"\277\371\256=?1\333T\277\330kg?\013\372t\277\254:}?\000\000\200\277\254:}?\013\372t\277\330kg?1\333T\277\371\256=?\231g\"\277=\234\003?\025\357\303\276\314\317x>6\275\310\2750\373H\275\302\305G>\324|\254\276\352Z\361>\300\177\030\277\363\0045?\002\237M\277\230\305a?\010\tq\277\276\024{?\017\261\177\277m\304~?\370Sx\277^\203l?\032\224[\277\003\344E?J\353+\277\3329\016?\200\350\332\2761\240\224>\203@\026\276\000\335v\'\203@\026>1\240\224\276\200\350\332>\3329\016\277J\353+?\003\344E\277\032\224[?^\203l\277\370Sx?m\304~\277\017\261\177?\276\024{\277\010\tq?\230\305a\277\002\237M?\363\0045\277\300\177\030?\352Z\361\276\324|\254>\302\305G\2760\373H=6\275\310=\314\317x\276\025\357\303>=\234\003\277\000\000\200?(;|\277\010\tq?\005\276^\277\003\344E?V6\'\277=\234\003?*D\270\276\302\305G>\260\n\311\274\203@\026\276\345\232\240>\352Z\361\276\321\177\035?\371\256=\277SHX?^\203l\277\235\307y?\017\261\177\277$\023~?\013\372t\277Y\252d?\002\237M\277\273\2050?\3329\016\277\312{\317>\314\317x\276\005\251\226=6\275\310=\223\216\210\276\200\350\332>*h\023\277\363\0045?=MQ\277\330kg?\007\272v\277m\304~?mN\177\277\370Sx?\247\tj\2771\333T?Bh9\277\300\177\030?u3\346\2761\240\224>s\262\372\2750\373H\275\023\\`>\025\357\303\276\233\365\010?J\353+\277\022\321I?\230\305a\277G\024s?\254:}\277C\354\177?\276\024{\277\236\330n?\032\224[\277p\330A?\231g\"\277\']\374>\324|\254\276\242\020/>\361t\232\250\242\020/\276\324|\254>\']\374\276\231g\"?p\330A\277\032\224[?\236\330n\277\276\024{?C\354\177\277\254:}?G\024s\277\230\305a?\022\321I\277J\353+?\233\365\010\277\025\357\303>\023\\`\2760\373H=s\262\372=1\240\224\276u3\346>\300\177\030\277Bh9?1\333T\277\247\tj?\370Sx\277mN\177?m\304~\277\007\272v?\330kg\277=MQ?\363\0045\277*h\023?\200\350\332\276\223\216\210>6\275\310\275\005\251\226\275\314\317x>\312{\317\276\3329\016?\273\2050\277\002\237M?Y\252d\277\013\372t?$\023~\277\017\261\177?\235\307y\277^\203l?SHX\277\371\256=?\321\177\035\277\352Z\361>\345\232\240\276\203@\026>\260\n\311<\302\305G\276*D\270>\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276w\367S\246\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>4\203\260\247\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\254\nw\'\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\336\241\221\250\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\325L\014&\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\021\335\210(\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276A\3440\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\001H9\250\302\305G\276\000\000\200?\235\307y\277\330kg?\022\321I\277\231g\"?u3\346\276\314\317x>\260\n\311\274\302\305G\276\312{\317>\300\177\030\277p\330A?\230\305a\277\007\272v?\017\261\177\277(;|?^\203l\277=MQ?J\353+\277\']\374>1\240\224\276\005\251\226=\203@\026>*D\270\276\3329\016?Bh9\277\032\224[?G\024s\277m\304~?$\023~\277\010\tq?SHX\277\363\0045?\233\365\010\277\324|\254>s\262\372\2756\275\310\275\345\232\240>=\234\003\277\273\2050?1\333T\277\236\330n?\254:}\277mN\177?\013\372t\277\005\276^?\371\256=\277*h\023?\025\357\303\276\242\020/>0\373H=\223\216\210\276\352Z\361>V6\'\277\002\237M?\247\tj\277\276\024{?C\354\177\277\370Sx?Y\252d\277\003\344E?\321\177\035\277\200\350\332>\023\\`\276\217\025\016\246\023\\`>\200\350\332\276\321\177\035?\003\344E\277Y\252d?\370Sx\277C\354\177?\276\024{\277\247\tj?\002\237M\277V6\'?\352Z\361\276\223\216\210>0\373H\275\242\020/\276\025\357\303>*h\023\277\371\256=?\005\276^\277\013\372t?mN\177\277\254:}?\236\330n\2771\333T?\273\2050\277=\234\003?\345\232\240\2766\275\310=s\262\372=\324|\254\276\233\365\010?\363\0045\277SHX?\010\tq\277$\023~?m\304~\277G\024s?\032\224[\277Bh9?\3329\016\277*D\270>\203@\026\276\005\251\226\2751\240\224>\']\374\276J\353+?=MQ\277^\203l?(;|\277\017\261\177?\007\272v\277\230\305a?p\330A\277\300\177\030?\312{\317\276\302\305G>\260\n\311<\000\000\200?\370Sx\277\230\305a?\371\256=\277\3329\016?\324|\254\2766\275\310=\203@\026>\025\357\303\276\300\177\030?\003\344E\277\330kg?\276\024{\277\017\261\177?\013\372t\277\032\224[?\363\0045\277=\234\003?1\240\224\2760\373H=\302\305G>\200\350\332\276\231g\"?\002\237M\277^\203l?\254:}\277m\304~?\010\tq\2771\333T?J\353+\277\352Z\361>\314\317x\276\023r0\'\314\317x>\352Z\361\276J\353+?1\333T\277\010\tq?m\304~\277\254:}?^\203l\277\002\237M?\231g\"\277\200\350\332>\302\305G\2760\373H\2751\240\224>=\234\003\277\363\0045?\032\224[\277\013\372t?\017\261\177\277\276\024{?\330kg\277\003\344E?\300\177\030\277\025\357\303>\203@\026\2766\275\310\275\324|\254>\3329\016\277\371\256=?\230\305a\277\370Sx?\000\000\200\277\370Sx?\230\305a\277\371\256=?\3329\016\277\324|\254>6\275\310\275\203@\026\276\025\357\303>\300\177\030\277\003\344E?\330kg\277\276\024{?\017\261\177\277\013\372t?\032\224[\277\363\0045?=\234\003\2771\240\224>0\373H\275\302\305G\276\200\350\332>\231g\"\277\002\237M?^\203l\277\254:}?m\304~\277\010\tq?1\333T\277J\353+?\352Z\361\276\314\317x>d\025!\251\314\317x\276\352Z\361>J\353+\2771\333T?\010\tq\277m\304~?\254:}\277^\203l?\002\237M\277\231g\"?\200\350\332\276\302\305G>0\373H=1\240\224\276=\234\003?\363\0045\277\032\224[?\013\372t\277\017\261\177?\276\024{\277\330kg?\003\344E\277\300\177\030?\025\357\303\276\203@\026>\000\000\200?\007\272v\277\032\224[?\273\2050\277\352Z\361>\023\\`\2760\373H\275\345\232\240>\3329\016\277p\330A?\330kg\277(;|?m\304~\277\236\330n?\002\237M\277\321\177\035?\025\357\303\276s\262\372=\203@\026>\312{\317\276\231g\"?=MQ\277\010\tq?mN\177\277\276\024{?Y\252d\277\371\256=?\233\365\010\2771\240\224>\260\n\311\274\314\317x\276\']\374>\363\0045\277\005\276^?\370Sx\277C\354\177?\013\372t\277SHX?J\353+\277u3\346>\302\305G\276\005\251\226\275\324|\254>*h\023\277\003\344E?\247\tj\277\254:}?$\023~\277^\203l?\022\321I\277\300\177\030?*D\270\2766\275\310=\242\020/>\200\350\332\276V6\'?1\333T\277G\024s?\017\261\177\277\235\307y?\230\305a\277Bh9?=\234\003\277\223\216\210>lS9\250\223\216\210\276=\234\003?Bh9\277\230\305a?\235\307y\277\017\261\177?G\024s\2771\333T?V6\'\277\200\350\332>\242\020/\2766\275\310\275*D\270>\300\177\030\277\022\321I?^\203l\277$\023~?\254:}\277\247\tj?\003\344E\277*h\023?\324|\254\276\005\251\226=\302\305G>u3\346\276J\353+?SHX\277\013\372t?C\354\177\277\370Sx?\005\276^\277\363\0045?\']\374\276\314\317x>\260\n\311<1\240\224\276\233\365\010?\371\256=\277Y\252d?\276\024{\277mN\177?\010\tq\277=MQ?\231g\"\277\312{\317>\203@\026\276s\262\372\275\025\357\303>\321\177\035\277\002\237M?\236\330n\277m\304~?(;|\277\330kg?p\330A\277\3329\016?\345\232\240\276\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>\3476\215\2471\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276\225\2660\2471\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\302\305G\2766\275\310\275\025\357\303>\231g\"\2771\333T?\013\372t\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>PB\030\2511\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276)@n(1\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\000\000\200?G\024s\277\002\237M?*h\023\2771\240\224>\260\n\311<\324|\254\276\321\177\035?1\333T\277\007\272v?\017\261\177\277\236\330n?\003\344E\277\233\365\010?\314\317x\276\005\251\226\275\025\357\303>V6\'\277\032\224[?\235\307y\277m\304~?\247\tj\277\371\256=?\']\374\276\302\305G>s\262\372=\200\350\332\276\273\2050?\230\305a\277(;|?\254:}\277Y\252d?\363\0045\277u3\346>\203@\026\276\242\020/\276\352Z\361>Bh9\277\330kg?$\023~\277\276\024{?\005\276^\277J\353+?\312{\317\2766\275\310=\023\\`>=\234\003\277p\330A?^\203l\277mN\177?\370Sx\277SHX?\231g\"\277*D\270>0\373H\275\223\216\210\276\3329\016?\022\321I\277\010\tq?C\354\177\277\013\372t?=MQ\277\300\177\030?\345\232\240\276\030\304\275(\345\232\240>\300\177\030\277=MQ?\013\372t\277C\354\177?\010\tq\277\022\321I?\3329\016\277\223\216\210>0\373H=*D\270\276\231g\"?SHX\277\370Sx?mN\177\277^\203l?p\330A\277=\234\003?\023\\`\2766\275\310\275\312{\317>J\353+\277\005\276^?\276\024{\277$\023~?\330kg\277Bh9?\352Z\361\276\242\020/>\203@\026>u3\346\276\363\0045?Y\252d\277\254:}?(;|\277\230\305a?\273\2050\277\200\350\332>s\262\372\275\302\305G\276\']\374>\371\256=\277\247\tj?m\304~\277\235\307y?\032\224[\277V6\'?\025\357\303\276\005\251\226=\314\317x>\233\365\010\277\003\344E?\236\330n\277\017\261\177?\007\272v\2771\333T?\321\177\035\277\000\000\200?\010\tq\277\003\344E?=\234\003\277\302\305G>\203@\026>\352Z\361\276\371\256=?^\203l\277\017\261\177?\013\372t\277\002\237M?\3329\016\277\314\317x>6\275\310=\200\350\332\276\363\0045?\330kg\277m\304~?\370Sx\2771\333T?\300\177\030\2771\240\224>0\373H=\025\357\303\276J\353+?\230\305a\277\254:}?\276\024{\277\032\224[?\231g\"\277\324|\254>\264u\215&\324|\254\276\231g\"?\032\224[\277\276\024{?\254:}\277\230\305a?J\353+\277\025\357\303>0\373H\2751\240\224\276\300\177\030?1\333T\277\370Sx?m\304~\277\330kg?\363\0045\277\200\350\332>6\275\310\275\314\317x\276\3329\016?\002\237M\277\013\372t?\017\261\177\277^\203l?\371\256=\277\352Z\361>\203@\026\276\302\305G\276=\234\003?\003\344E\277\010\tq?\000\000\200\277\010\tq?\003\344E\277=\234\003?\302\305G\276\203@\026\276\352Z\361>\371\256=\277^\203l?\017\261\177\277\013\372t?\002\237M\277\3329\016?\314\317x\2766\275\310\275\200\350\332>\363\0045\277\330kg?m\304~\277\370Sx?1\333T\277\300\177\030?1\240\224\2760\373H\275\025\357\303>J\353+\277\230\305a?\254:}\277\276\024{?\032\224[\277\231g\"?\324|\254\276\335\363J(\324|\254>\231g\"\277\032\224[?\276\024{\277\254:}?\230\305a\277J\353+?\025\357\303\2760\373H=1\240\224>\300\177\030\2771\333T?\370Sx\277m\304~?\330kg\277\363\0045?\200\350\332\2766\275\310=\314\317x>\3329\016\277\002\237M?\013\372t\277\017\261\177?^\203l\277\371\256=?\000\000\200?\236\330n\277\371\256=?u3\346\2766\275\310=\223\216\210>\300\177\030\277SHX?\276\024{\277(;|?\032\224[\277\321\177\035?1\240\224\276\005\251\226\275\200\350\332>Bh9\277^\203l?C\354\177\277\010\tq?p\330A\277\352Z\361>s\262\372\275\314\317x\276*h\023?1\333T\277\235\307y?\254:}\277\005\276^?\231g\"\277\345\232\240>0\373H=\312{\317\276\363\0045?\247\tj\277\017\261\177?G\024s\277\003\344E?\']\374\276\203@\026>\023\\`>\3329\016\277=MQ?\370Sx\277$\023~?\230\305a\277V6\'?\324|\254\276\260\n\311\274\025\357\303>\273\2050\277\330kg?mN\177\277\013\372t?\022\321I\277=\234\003?\242\020/\276\302\305G\276\233\365\010?\002\237M\277\007\272v?m\304~\277Y\252d?J\353+\277*D\270>\326\363v\247*D\270\276J\353+?Y\252d\277m\304~?\007\272v\277\002\237M?\233\365\010\277\302\305G>\242\020/>=\234\003\277\022\321I?\013\372t\277mN\177?\330kg\277\273\2050?\025\357\303\276\260\n\311<\324|\254>V6\'\277\230\305a?$\023~\277\370Sx?=MQ\277\3329\016?\023\\`\276\203@\026\276\']\374>\003\344E\277G\024s?\017\261\177\277\247\tj?\363\0045\277\312{\317>0\373H\275\345\232\240\276\231g\"?\005\276^\277\254:}?\235\307y\2771\333T?*h\023\277\314\317x>s\262\372=\352Z\361\276p\330A?\010\tq\277C\354\177?^\203l\277Bh9?\200\350\332\276\005\251\226=1\240\224>\321\177\035\277\032\224[?(;|\277\276\024{?SHX\277\000\000\200?^\203l\277\363\0045?\025\357\303\276X\327\036&\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\202!w\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276[\032\215&\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>M\016\324&\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276!Y9(\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\347\227\345\'\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\357\035\302\'\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\361t\232\250\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\325L\014&\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\270\237\\\250\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\272\n\237\247\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>d\025!\251\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276=\030\254(\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\221-0\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\224\371?)\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\000\000\200?\247\tj\277J\353+?\345\232\240\2766\275\310\275\']\374>\002\237M\277\235\307y?\276\024{\277=MQ?=\234\003\277s\262\372=1\240\224>V6\'\277\330kg?C\354\177\277^\203l?\273\2050\277\324|\254>\005\251\226=\352Z\361\276\022\321I?\370Sx\277(;|?1\333T\277\233\365\010?\203@\026\276\223\216\210\276\231g\"?Y\252d\277\017\261\177?\236\330n\277\363\0045?*D\270\2760\373H\275u3\346>\003\344E\277\007\272v?\254:}\277SHX?\3329\016\277\242\020/>\314\317x>\321\177\035\277\230\305a?mN\177\277\010\tq?Bh9\277\025\357\303>\260\n\311<\200\350\332\276p\330A?\013\372t\277$\023~?\032\224[\277*h\023?\302\305G\276\023\\`\276\300\177\030?\005\276^\277m\304~?G\024s\277\371\256=?\312{\317\276\272\361\177(\312{\317>\371\256=\277G\024s?m\304~\277\005\276^?\300\177\030\277\023\\`>\302\305G>*h\023\277\032\224[?$\023~\277\013\372t?p\330A\277\200\350\332>\260\n\311\274\025\357\303\276Bh9?\010\tq\277mN\177?\230\305a\277\321\177\035?\314\317x\276\242\020/\276\3329\016?SHX\277\254:}?\007\272v\277\003\344E?u3\346\2760\373H=*D\270>\363\0045\277\236\330n?\017\261\177\277Y\252d?\231g\"\277\223\216\210>\203@\026>\233\365\010\2771\333T?(;|\277\370Sx?\022\321I\277\352Z\361>\005\251\226\275\324|\254\276\273\2050?^\203l\277C\354\177?\330kg\277V6\'?1\240\224\276s\262\372\275=\234\003?=MQ\277\276\024{?\235\307y\277\000\000\200?\330kg\277\231g\"?\314\317x\276\302\305G\276\300\177\030?\230\305a\277\017\261\177?^\203l\277J\353+?1\240\224\276\203@\026\276\3329\016?\032\224[\277m\304~?\010\tq\277\363\0045?\324|\254\2766\275\310\275=\234\003?1\333T\277\254:}?\013\372t\277\371\256=?\025\357\303\2760\373H\275\352Z\361>\002\237M\277\276\024{?\370Sx\277\003\344E?\200\350\332\276\016\2060(\200\350\332>\003\344E\277\370Sx?\276\024{\277\002\237M?\352Z\361\2760\373H=\025\357\303>\371\256=\277\013\372t?\254:}\2771\333T?=\234\003\2776\275\310=\324|\254>\363\0045\277\010\tq?m\304~\277\032\224[?\3329\016\277\203@\026>1\240\224>J\353+\277^\203l?\017\261\177\277\230\305a?\300\177\030\277\302\305G>\314\317x>\231g\"\277\330kg?\000\000\200\277\330kg?\231g\"\277\314\317x>\302\305G>\300\177\030\277\230\305a?\017\261\177\277^\203l?J\353+\2771\240\224>\203@\026>\3329\016\277\032\224[?m\304~\277\010\tq?\363\0045\277\324|\254>6\275\310==\234\003\2771\333T?\254:}\277\013\372t?\371\256=\277\025\357\303>0\373H=\352Z\361\276\002\237M?\276\024{\277\370Sx?\003\344E\277\200\350\332>\325mn(\200\350\332\276\003\344E?\370Sx\277\276\024{?\002\237M\277\352Z\361>0\373H\275\025\357\303\276\371\256=?\013\372t\277\254:}?1\333T\277=\234\003?6\275\310\275\324|\254\276\363\0045?\010\tq\277m\304~?\032\224[\277\3329\016?\203@\026\2761\240\224\276J\353+?^\203l\277\017\261\177?\000\000\200?Y\252d\277\300\177\030?\242\020/\2761\240\224\276\273\2050?\010\tq\277$\023~?1\333T\277\']\374>0\373H\275\312{\317\276\003\344E?\235\307y\277\370Sx?p\330A\277\025\357\303>\005\251\226==\234\003\277SHX?m\304~\277\236\330n?J\353+\277\223\216\210>\302\305G>\321\177\035\277\330kg?C\354\177\277\230\305a?*h\023\277\203@\026>\345\232\240>\363\0045\277G\024s?\254:}\277=MQ?\352Z\361\276\260\n\311<\200\350\332>\022\321I\277\276\024{?\007\272v\277\371\256=?*D\270\2766\275\310\275\233\365\010?\032\224[\277mN\177?^\203l\277V6\'?\314\317x\276\023\\`\276\231g\"?\247\tj\277\017\261\177?\005\276^\277\3329\016?s\262\372\275\324|\254\276Bh9?\013\372t\277(;|?\002\237M\277u3\346>\004fw\'u3\346\276\002\237M?(;|\277\013\372t?Bh9\277\324|\254>s\262\372=\3329\016\277\005\276^?\017\261\177\277\247\tj?\231g\"\277\023\\`>\314\317x>V6\'\277^\203l?mN\177\277\032\224[?\233\365\010\2776\275\310=*D\270>\371\256=\277\007\272v?\276\024{\277\022\321I?\200\350\332\276\260\n\311\274\352Z\361>=MQ\277\254:}?G\024s\277\363\0045?\345\232\240\276\203@\026\276*h\023?\230\305a\277C\354\177?\330kg\277\321\177\035?\302\305G\276\223\216\210\276J\353+?\236\330n\277m\304~?SHX\277=\234\003?\005\251\226\275\025\357\303\276p\330A?\370Sx\277\235\307y?\003\344E\277\312{\317>0\373H=\']\374\2761\333T?$\023~\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276\205\003\r&\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>H\205\323\246\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\276\024{\277\003\344E?\025\357\303\2766\275\310\275\3329\016?\230\305a\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276F\004\013)\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>cl\017\251\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\000\000\200?\005\276^\277=\234\003?\260\n\311\274\352Z\361\276SHX?\017\261\177\277Y\252d?\3329\016\277\005\251\226=\200\350\332>=MQ\277m\304~?\247\tj\277\300\177\030?s\262\372\275\025\357\303\276\022\321I?\254:}\277\236\330n?\231g\"\277\242\020/>\324|\254>p\330A\277\276\024{?G\024s\277J\353+?\023\\`\2761\240\224\276Bh9?\370Sx\277\007\272v?\363\0045\277\223\216\210>\314\317x>\273\2050\277\013\372t?\235\307y\277\371\256=?\345\232\240\276\302\305G\276V6\'?\010\tq\277(;|?\003\344E\277*D\270>\203@\026>\321\177\035\277^\203l?$\023~\277\002\237M?\312{\317\2766\275\310\275*h\023?\330kg\277mN\177?1\333T\277u3\346>0\373H=\233\365\010\277\230\305a?C\354\177\277\032\224[?\']\374\276D[\004(\']\374>\032\224[\277C\354\177?\230\305a\277\233\365\010?0\373H\275u3\346\2761\333T?mN\177\277\330kg?*h\023\2776\275\310=\312{\317>\002\237M\277$\023~?^\203l\277\321\177\035?\203@\026\276*D\270\276\003\344E?(;|\277\010\tq?V6\'\277\302\305G>\345\232\240>\371\256=\277\235\307y?\013\372t\277\273\2050?\314\317x\276\223\216\210\276\363\0045?\007\272v\277\370Sx?Bh9\2771\240\224>\023\\`>J\353+\277G\024s?\276\024{\277p\330A?\324|\254\276\242\020/\276\231g\"?\236\330n\277\254:}?\022\321I\277\025\357\303>s\262\372=\300\177\030\277\247\tj?m\304~\277=MQ?\200\350\332\276\005\251\226\275\3329\016?Y\252d\277\000\000\200?\032\224[\277\352Z\361>0\373H=\3329\016\277\330kg?m\304~\277\002\237M?\025\357\303\276\203@\026\276\231g\"?\010\tq\277\276\024{?\371\256=\2771\240\224>\314\317x>\363\0045\277\370Sx?\013\372t\277J\353+?\302\305G\276\324|\254\276\003\344E?\254:}\277^\203l?\300\177\030\2776\275\310=\200\350\332>1\333T\277\017\261\177?\230\305a\277=\234\003?\246u\345\247=\234\003\277\230\305a?\017\261\177\2771\333T?\200\350\332\2766\275\310\275\300\177\030?^\203l\277\254:}?\003\344E\277\324|\254>\302\305G>J\353+\277\013\372t?\370Sx\277\363\0045?\314\317x\2761\240\224\276\371\256=?\276\024{\277\010\tq?\231g\"\277\203@\026>\025\357\303>\002\237M\277m\304~?\330kg\277\3329\016?0\373H\275\352Z\361\276\032\224[?\000\000\200\277\032\224[?\352Z\361\2760\373H\275\3329\016?\330kg\277m\304~?\002\237M\277\025\357\303>\203@\026>\231g\"\277\010\tq?\276\024{\277\371\256=?1\240\224\276\314\317x\276\363\0045?\370Sx\277\013\372t?J\353+\277\302\305G>\324|\254>\003\344E\277\254:}?^\203l\277\300\177\030?6\275\310\275\200\350\332\2761\333T?\017\261\177\277\230\305a?=\234\003\277=\030\254(=\234\003?\230\305a\277\017\261\177?1\333T\277\200\350\332>6\275\310=\300\177\030\277^\203l?\254:}\277\003\344E?\324|\254\276\302\305G\276J\353+?\013\372t\277\370Sx?\363\0045\277\314\317x>1\240\224>\371\256=\277\276\024{?\010\tq\277\231g\"?\203@\026\276\025\357\303\276\002\237M?\000\000\200?SHX\277\200\350\332>s\262\372=\231g\"\277G\024s?\370Sx\277\273\2050?\302\305G\276*D\270\276\002\237M?mN\177\277\230\305a?\']\374\2760\373H\275*h\023?^\203l\277(;|?\371\256=\277\223\216\210>1\240\224>p\330A\277\254:}?\247\tj\277\3329\016?\260\n\311\274=\234\003\277Y\252d?m\304~\277\022\321I?\324|\254\276\023\\`\276\363\0045?\235\307y\277\010\tq?\321\177\035\2776\275\310=u3\346>\032\224[\277C\354\177?1\333T\277\312{\317>\203@\026>V6\'\277\013\372t?\007\272v\277J\353+?\242\020/\276\025\357\303\276=MQ?\017\261\177\277\005\276^?\352Z\361\276\005\251\226\275\300\177\030?\236\330n\277\276\024{?Bh9\277\314\317x>\345\232\240>\003\344E\277$\023~?\330kg\277\233\365\010?\004H\243\250\233\365\010\277\330kg?$\023~\277\003\344E?\345\232\240\276\314\317x\276Bh9?\276\024{\277\236\330n?\300\177\030\277\005\251\226=\352Z\361>\005\276^\277\017\261\177?=MQ\277\025\357\303>\242\020/>J\353+\277\007\272v?\013\372t\277V6\'?\203@\026\276\312{\317\2761\333T?C\354\177\277\032\224[?u3\346\2766\275\310\275\321\177\035?\010\tq\277\235\307y?\363\0045\277\023\\`>\324|\254>\022\321I\277m\304~?Y\252d\277=\234\003?\260\n\311<\3329\016\277\247\tj?\254:}\277p\330A?1\240\224\276\223\216\210\276\371\256=?(;|\277^\203l?*h\023\2770\373H=\']\374>\230\305a\277mN\177?\002\237M\277*D\270>\302\305G>\273\2050\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?5\325S\247\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\350\337\036(\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?-\250\014\246\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277;j\345\'\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\270\237\\\250\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\255u9\250\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?w:\330\250\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277C\374\322&\3329\016?\000\000\200?=MQ\277\324|\254>\223\216\210>\003\344E\277mN\177?\032\224[\277\312{\317>\302\305G>Bh9\277\254:}?Y\252d\277\352Z\361>s\262\372=J\353+\277\235\307y?^\203l\277\233\365\010?0\373H=\321\177\035\277\013\372t?G\024s\277\300\177\030?\260\n\311\274\3329\016\277\236\330n?\370Sx\277V6\'?6\275\310\275\']\374\276\330kg?(;|\277\363\0045?\242\020/\276\200\350\332\276\005\276^?m\304~\277p\330A?\314\317x\276*D\270\2761\333T?C\354\177\277\002\237M?\345\232\240\2761\240\224\276\022\321I?\017\261\177\277SHX?\025\357\303\276\023\\`\276\371\256=?$\023~\277\230\305a?u3\346\276\203@\026\276\273\2050?\276\024{\277\247\tj?=\234\003\277\005\251\226\275\231g\"?\007\272v\277\010\tq?*h\023\277\325L\014&*h\023?\010\tq\277\007\272v?\231g\"\277\005\251\226==\234\003?\247\tj\277\276\024{?\273\2050\277\203@\026>u3\346>\230\305a\277$\023~?\371\256=\277\023\\`>\025\357\303>SHX\277\017\261\177?\022\321I\2771\240\224>\345\232\240>\002\237M\277C\354\177?1\333T\277*D\270>\314\317x>p\330A\277m\304~?\005\276^\277\200\350\332>\242\020/>\363\0045\277(;|?\330kg\277\']\374>6\275\310=V6\'\277\370Sx?\236\330n\277\3329\016?\260\n\311<\300\177\030\277G\024s?\013\372t\277\321\177\035?0\373H\275\233\365\010\277^\203l?\235\307y\277J\353+?s\262\372\275\352Z\361\276Y\252d?\254:}\277Bh9?\302\305G\276\312{\317\276\000\000\200?\002\237M\2771\240\224>\324|\254>1\333T\277\017\261\177?\003\344E\277\314\317x>\025\357\303>\032\224[\277m\304~?\371\256=\277\302\305G>\200\350\332>\230\305a\277\254:}?\363\0045\277\203@\026>\352Z\361>\330kg\277\276\024{?J\353+\2776\275\310==\234\003?^\203l\277\370Sx?\231g\"\2770\373H=\3329\016?\010\tq\277\013\372t?\300\177\030\277_\276S\'\300\177\030?\013\372t\277\010\tq?\3329\016\2770\373H\275\231g\"?\370Sx\277^\203l?=\234\003\2776\275\310\275J\353+?\276\024{\277\330kg?\352Z\361\276\203@\026\276\363\0045?\254:}\277\230\305a?\200\350\332\276\302\305G\276\371\256=?m\304~\277\032\224[?\025\357\303\276\314\317x\276\003\344E?\017\261\177\2771\333T?\324|\254\2761\240\224\276\002\237M?\000\000\200\277\002\237M?1\240\224\276\324|\254\2761\333T?\017\261\177\277\003\344E?\314\317x\276\025\357\303\276\032\224[?m\304~\277\371\256=?\302\305G\276\200\350\332\276\230\305a?\254:}\277\363\0045?\203@\026\276\352Z\361\276\330kg?\276\024{\277J\353+?6\275\310\275=\234\003\277^\203l?\370Sx\277\231g\"?0\373H\275\3329\016\277\010\tq?\013\372t\277\300\177\030?qb\302\'\300\177\030\277\013\372t?\010\tq\277\3329\016?0\373H=\231g\"\277\370Sx?^\203l\277=\234\003?6\275\310=J\353+\277\276\024{?\330kg\277\352Z\361>\203@\026>\363\0045\277\254:}?\230\305a\277\200\350\332>\302\305G>\371\256=\277m\304~?\032\224[\277\025\357\303>\314\317x>\000\000\200?\022\321I\277\314\317x>\312{\317>\230\305a\277(;|?J\353+\277\005\251\226=\3329\016?G\024s\277\010\tq?\233\365\010\2776\275\310\275\273\2050?\254:}\277\005\276^?\025\357\303\276\223\216\210\276\002\237M?C\354\177\277\003\344E?\023\\`\276\200\350\332\276Y\252d?\276\024{\277V6\'?0\373H\275*h\023\277\013\372t?\236\330n\277=\234\003?s\262\372=\363\0045\277$\023~?\032\224[\277*D\270>1\240\224>=MQ\277\017\261\177?p\330A\277\302\305G>u3\346>\330kg\277\235\307y?\231g\"\277\260\n\311<\300\177\030?\007\272v\277^\203l?\']\374\276\203@\026\276Bh9?m\304~\277SHX?\324|\254\276\345\232\240\2761\333T?mN\177\277\371\256=?\242\020/\276\352Z\361\276\247\tj?\370Sx\277\321\177\035?\222\371J\250\321\177\035\277\370Sx?\247\tj\277\352Z\361>\242\020/>\371\256=\277mN\177?1\333T\277\345\232\240>\324|\254>SHX\277m\304~?Bh9\277\203@\026>\']\374>^\203l\277\007\272v?\300\177\030\277\260\n\311\274\231g\"?\235\307y\277\330kg?u3\346\276\302\305G\276p\330A?\017\261\177\277=MQ?1\240\224\276*D\270\276\032\224[?$\023~\277\363\0045?s\262\372\275=\234\003\277\236\330n?\013\372t\277*h\023?0\373H=V6\'\277\276\024{?Y\252d\277\200\350\332>\023\\`>\003\344E\277C\354\177?\002\237M\277\223\216\210>\025\357\303>\005\276^\277\254:}?\273\2050\2776\275\310=\233\365\010?\010\tq\277G\024s?\3329\016\277\005\251\226\275\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?\372\t\226\247\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277\357\035\302\'\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\3329\016\277\013\372t?^\203l\277\352Z\361>\302\305G>\003\344E\277\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?y\214\373\250\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277(\272\345\247\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\000\000\200?p\330A\277\203@\026>\233\365\010?\013\372t\277\247\tj?\200\350\332\276\223\216\210\2761\333T?$\023~\277J\353+?\260\n\311\274\231g\"\277(;|?\032\224[\277\345\232\240>\025\357\303>Y\252d\277\370Sx?*h\023\2776\275\310\275Bh9?\017\261\177\277\022\321I?\302\305G\276\']\374\276\010\tq?\236\330n\277\352Z\361>\023\\`>\002\237M\277mN\177?\363\0045\277\005\251\226=\300\177\030?\235\307y\277\230\305a?*D\270\276\324|\254\276\005\276^?\276\024{\277\321\177\035?0\373H=\273\2050\277m\304~?=MQ\277\314\317x>u3\346>^\203l\277G\024s?=\234\003\277\242\020/\276\003\344E?C\354\177\277\371\256=?s\262\372\275\3329\016\277\007\272v?\330kg\277\312{\317>1\240\224>SHX\277\254:}?V6\'\277+\227\306(V6\'?\254:}\277SHX?1\240\224\276\312{\317\276\330kg?\007\272v\277\3329\016?s\262\372=\371\256=\277C\354\177?\003\344E\277\242\020/>=\234\003?G\024s\277^\203l?u3\346\276\314\317x\276=MQ?m\304~\277\273\2050?0\373H\275\321\177\035\277\276\024{?\005\276^\277\324|\254>*D\270>\230\305a\277\235\307y?\300\177\030\277\005\251\226\275\363\0045?mN\177\277\002\237M?\023\\`\276\352Z\361\276\236\330n?\010\tq\277\']\374>\302\305G>\022\321I\277\017\261\177?Bh9\2776\275\310=*h\023?\370Sx\277Y\252d?\025\357\303\276\345\232\240\276\032\224[?(;|\277\231g\"?\260\n\311<J\353+\277$\023~?1\333T\277\223\216\210>\000\000\200?\371\256=\2776\275\310=\300\177\030?\276\024{\277\032\224[?1\240\224\276\200\350\332\276^\203l?\010\tq\277\352Z\361>\314\317x>1\333T\277\254:}?\231g\"\2770\373H\275\363\0045?\017\261\177\277\003\344E?\203@\026\276\3329\016\277\370Sx?\230\305a\277\324|\254>\025\357\303>\330kg\277\013\372t?=\234\003\277\302\305G\276\002\237M?m\304~\277J\353+?6\272\r&J\353+\277m\304~?\002\237M\277\302\305G>=\234\003?\013\372t\277\330kg?\025\357\303\276\324|\254\276\230\305a?\370Sx\277\3329\016?\203@\026>\003\344E\277\017\261\177?\363\0045\2770\373H=\231g\"?\254:}\2771\333T?\314\317x\276\352Z\361\276\010\tq?^\203l\277\200\350\332>1\240\224>\032\224[\277\276\024{?\300\177\030\2776\275\310\275\371\256=?\000\000\200\277\371\256=?6\275\310\275\300\177\030\277\276\024{?\032\224[\2771\240\224>\200\350\332>^\203l\277\010\tq?\352Z\361\276\314\317x\2761\333T?\254:}\277\231g\"?0\373H=\363\0045\277\017\261\177?\003\344E\277\203@\026>\3329\016?\370Sx\277\230\305a?\324|\254\276\025\357\303\276\330kg?\013\372t\277=\234\003?\302\305G>\002\237M\277m\304~?J\353+\277\213\266\362(J\353+?m\304~\277\002\237M?\302\305G\276=\234\003\277\013\372t?\330kg\277\025\357\303>\324|\254>\230\305a\277\370Sx?\3329\016\277\203@\026\276\003\344E?\017\261\177\277\363\0045?0\373H\275\231g\"\277\254:}?1\333T\277\314\317x>\352Z\361>\010\tq\277^\203l?\200\350\332\276\000\000\200?Bh9\2770\373H=V6\'?m\304~\277\022\321I?\203@\026\276*h\023\277\276\024{?SHX\277\314\317x>\']\374>\013\372t\277Y\252d?\324|\254\276\312{\317\276^\203l?\236\330n\277\200\350\332>\345\232\240>\230\305a\277\007\272v?=\234\003\277\023\\`\2761\333T?(;|\277\300\177\030?s\262\372=\003\344E\277mN\177?J\353+\277\260\n\311\274\363\0045?C\354\177\277\371\256=?\005\251\226\275\231g\"\277$\023~?\002\237M\277\242\020/>\3329\016?\235\307y\277\032\224[?\223\216\210\276\352Z\361\276G\024s?\330kg\277*D\270>\025\357\303>\247\tj\277\010\tq?u3\346\2761\240\224\276\005\276^?\370Sx\277\233\365\010?\302\305G>=MQ\277\254:}?\321\177\035\2776\275\310\275p\330A?\017\261\177\277\273\2050?7\306\236\247\273\2050\277\017\261\177?p\330A\2776\275\310=\321\177\035?\254:}\277=MQ?\302\305G\276\233\365\010\277\370Sx?\005\276^\2771\240\224>u3\346>\010\tq\277\247\tj?\025\357\303\276*D\270\276\330kg?G\024s\277\352Z\361>\223\216\210>\032\224[\277\235\307y?\3329\016\277\242\020/\276\002\237M?$\023~\277\231g\"?\005\251\226=\371\256=\277C\354\177?\363\0045\277\260\n\311<J\353+?mN\177\277\003\344E?s\262\372\275\300\177\030\277(;|?1\333T\277\023\\`>=\234\003?\007\272v\277\230\305a?\345\232\240\276\200\350\332\276\236\330n?^\203l\277\312{\317>\324|\254>Y\252d\277\013\372t?\']\374\276\314\317x\276SHX?\276\024{\277*h\023?"
      }
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
          dim {
            size: 122
          }
        }
        tensor_contentn\311\2740\373H\275\005\251\226\2756\275\310\275s\262\372\275\203@\026\276\242\020/\276\302\305G\276\023\\`\276\314\317x\276\223\216\210\2761\240\224\276\345\232\240\276\324|\254\276*D\270\276\025\357\303\276\312{\317\276\200\350\332\276u3\346\276\352Z\361\276\']\374\276=\234\003\277\233\365\010\277\3329\016\277*h\023\277\300\177\030\277\321\177\035\277\231g\"\277V6\'\277J\353+\277\273\2050\277\363\0045\277Bh9\277\371\256=\277p\330A\277\003\344E\277\022\321I\277\002\237M\277=MQ\2771\333T\277SHX\277\032\224[\277\005\276^\277\230\305a\277Y\252d\277\330kg\277\247\tj\277^\203l\277\236\330n\277\010\tq\277G\024s\277\013\372t\277\007\272v\277\370Sx\277\235\307y\277\276\024{\277(;|\277\254:}\277$\023~\277m\304~\277mN\177\277\017\261\177\277C\354\177\277\000\000\200\277C\354\177\277\017\261\177\277mN\177\277m\304~\277$\023~\277\254:}\277(;|\277\276\024{\277\235\307y\277\370Sx\277\007\272v\277\013\372t\277G\024s\277\010\tq\277\236\330n\277^\203l\277\247\tj\277\330kg\277Y\252d\277\230\305a\277\005\276^\277\032\224[\277SHX\2771\333T\277=MQ\277\002\237M\277\022\321I\277\003\344E\277p\330A\277\371\256=\277Bh9\277\363\0045\277\273\2050\277J\353+\277V6\'\277\231g\"\277\321\177\035\277\300\177\030\277*h\023\277\3329\016\277\233\365\010\277=\234\003\277\']\374\276\352Z\361\276u3\346\276\200\350\332\276\312{\317\276\025\357\303\276*D\270\276\324|\254\276\345\232\240\2761\240\224\276\223\216\210\276\314\317x\276\023\\`\276\302\305G\276\242\020/\276\000\000\000\2000\373H\2756\275\310\275\203@\026\276\302\305G\276\314\317x\2761\240\224\276\324|\254\276\025\357\303\276\200\350\332\276\352Z\361\276=\234\003\277\3329\016\277\300\177\030\277\231g\"\277J\353+\277\363\0045\277\371\256=\277\003\344E\277\002\237M\2771\333T\277\032\224[\277\230\305a\277\330kg\277^\203l\277\010\tq\277\013\372t\277\370Sx\277\276\024{\277\254:}\277m\304~\277\017\261\177\277\000\000\200\277\017\261\177\277m\304~\277\254:}\277\276\024{\277\370Sx\277\013\372t\277\010\tq\277^\203l\277\330kg\277\230\305a\277\032\224[\2771\333T\277\002\237M\277\003\344E\277\371\256=\277\363\0045\277J\353+\277\231g\"\277\300\177\030\277\3329\016\277=\234\003\277\352Z\361\276\200\350\332\276\025\357\303\276\324|\254\2761\240\224\276\314\317x\276\302\305G\276\203@\026\2766\275\310\2750\373H\27521\r\2450\373H=6\275\310=\203@\026>\302\305G>\314\317x>1\240\224>\324|\254>\025\357\303>\200\350\332>\352Z\361>=\234\003?\3329\016?\300\177\030?\231g\"?J\353+?\363\0045?\371\256=?\003\344E?\002\237M?1\333T?\032\224[?\230\305a?\330kg?^\203l?\010\tq?\013\372t?\370Sx?\276\024{?\254:}?m\304~?\017\261\177?\000\000\200?\017\261\177?m\304~?\254:}?\276\024{?\370Sx?\013\372t?\010\tq?^\203l?\330kg?\230\305a?\032\224[?1\333T?\002\237M?\003\344E?\371\256=?\363\0045?J\353+?\231g\"?\300\177\030?\3329\016?=\234\003?\352Z\361>\200\350\332>\025\357\303>\324|\254>\000\000\000\200\005\251\226\275\203@\026\276\023\\`\2761\240\224\276*D\270\276\200\350\332\276\']\374\276\3329\016\277\321\177\035\277J\353+\277Bh9\277\003\344E\277=MQ\277\032\224[\277Y\252d\277^\203l\277G\024s\277\370Sx\277(;|\277m\304~\277C\354\177\277\017\261\177\277$\023~\277\276\024{\277\007\272v\277\010\tq\277\247\tj\277\230\305a\277SHX\277\002\237M\277p\330A\277\363\0045\277V6\'\277\300\177\030\277\233\365\010\277\352Z\361\276\312{\317\276\324|\254\276\223\216\210\276\302\305G\276s\262\372\2750\373H\275\260\n\311<6\275\310=\242\020/>\314\317x>\345\232\240>\025\357\303>u3\346>=\234\003?*h\023?\231g\"?\273\2050?\371\256=?\022\321I?1\333T?\005\276^?\330kg?\236\330n?\013\372t?\235\307y?\254:}?mN\177?\000\000\200?mN\177?\254:}?\235\307y?\013\372t?\236\330n?\330kg?\005\276^?1\333T?\022\321I?\371\256=?\273\2050?\231g\"?*h\023?=\234\003?u3\346>\025\357\303>\345\232\240>\314\317x>\242\020/>6\275\310=\260\n\311<0\373H\275s\262\372\275\302\305G\276\223\216\210\276\324|\254\276\312{\317\276\352Z\361\276\233\365\010\277\300\177\030\277V6\'\277\363\0045\277p\330A\277\002\237M\277SHX\277\230\305a\277\247\tj\277\010\tq\277\007\272v\277\276\024{\277$\023~\277\017\261\177\277C\354\177\277m\304~\277(;|\277\370Sx\277G\024s\277^\203l\277Y\252d\277\032\224[\277=MQ\277\003\344E\277Bh9\277J\353+\277\321\177\035\277\3329\016\277\']\374\276\000\000\000\2006\275\310\275\302\305G\2761\240\224\276\025\357\303\276\352Z\361\276\3329\016\277\231g\"\277\363\0045\277\003\344E\2771\333T\277\230\305a\277^\203l\277\013\372t\277\276\024{\277m\304~\277\000\000\200\277m\304~\277\276\024{\277\013\372t\277^\203l\277\230\305a\2771\333T\277\003\344E\277\363\0045\277\231g\"\277\3329\016\277\352Z\361\276\025\357\303\2761\240\224\276\302\305G\2766\275\310\27521\r\2456\275\310=\302\305G>1\240\224>\025\357\303>\352Z\361>\3329\016?\231g\"?\363\0045?\003\344E?1\333T?\230\305a?^\203l?\013\372t?\276\024{?m\304~?\000\000\200?m\304~?\276\024{?\013\372t?^\203l?\230\305a?1\333T?\003\344E?\363\0045?\231g\"?\3329\016?\352Z\361>\025\357\303>1\240\224>\302\305G>6\275\310=21\215%6\275\310\275\302\305G\2761\240\224\276\025\357\303\276\352Z\361\276\3329\016\277\231g\"\277\363\0045\277\003\344E\2771\333T\277\230\305a\277^\203l\277\013\372t\277\276\024{\277m\304~\277\000\000\200\277m\304~\277\276\024{\277\013\372t\277^\203l\277\230\305a\2771\333T\277\003\344E\277\363\0045\277\231g\"\277\3329\016\277\352Z\361\276\025\357\303\2761\240\224\276\302\305G\2766\275\310\275\312\311\323\2456\275\310=\302\305G>1\240\224>\025\357\303>\352Z\361>\3329\016?\231g\"?\363\0045?\003\344E?1\333T?\230\305a?^\203l?\013\372t?\276\024{?m\304~?\000\000\200?m\304~?\276\024{?\013\372t?^\203l?\230\305a?1\333T?\003\344E?\363\0045?\231g\"?\000\000\000\200s\262\372\275\314\317x\276*D\270\276\352Z\361\276*h\023\277J\353+\277p\330A\2771\333T\277Y\252d\277\010\tq\277\235\307y\277m\304~\277C\354\177\277\254:}\277\007\272v\277^\203l\277\005\276^\277\002\237M\277Bh9\277\231g\"\277\233\365\010\277\200\350\332\276\345\232\240\276\302\305G\276\005\251\226\2750\373H=\242\020/>1\240\224>\312{\317>=\234\003?\321\177\035?\363\0045?\022\321I?\032\224[?\247\tj?\013\372t?(;|?\017\261\177?mN\177?\276\024{?G\024s?\330kg?SHX?\003\344E?\273\2050?\300\177\030?\']\374>\025\357\303>\223\216\210>\203@\026>\260\n\311<6\275\310\275\023\\`\276\324|\254\276u3\346\276\3329\016\277V6\'\277\371\256=\277=MQ\277\230\305a\277\236\330n\277\370Sx\277$\023~\277\000\000\200\277$\023~\277\370Sx\277\236\330n\277\230\305a\277=MQ\277\371\256=\277V6\'\277\3329\016\277u3\346\276\324|\254\276\023\\`\2766\275\310\275\260\n\311<\203@\026>\223\216\210>\025\357\303>\']\374>\300\177\030?\273\2050?\003\344E?SHX?\330kg?G\024s?\276\024{?mN\177?\017\261\177?(;|?\013\372t?\247\tj?\032\224[?\022\321I?\363\0045?\321\177\035?=\234\003?\312{\317>1\240\224>\242\020/>0\373H=\005\251\226\275\302\305G\276\345\232\240\276\200\350\332\276\233\365\010\277\231g\"\277Bh9\277\002\237M\277\005\276^\277^\203l\277\007\272v\277\254:}\277C\354\177\277m\304~\277\235\307y\277\010\tq\277Y\252d\2771\333T\277p\330A\277\000\000\000\200\203@\026\2761\240\224\276\200\350\332\276\3329\016\277J\353+\277\003\344E\277\032\224[\277^\203l\277\370Sx\277m\304~\277\017\261\177\277\276\024{\277\010\tq\277\230\305a\277\002\237M\277\363\0045\277\300\177\030\277\352Z\361\276\324|\254\276\302\305G\2760\373H\2756\275\310=\314\317x>\025\357\303>=\234\003?\231g\"?\371\256=?1\333T?\330kg?\013\372t?\254:}?\000\000\200?\254:}?\013\372t?\330kg?1\333T?\371\256=?\231g\"?=\234\003?\025\357\303>\314\317x>6\275\310=0\373H\275\302\305G\276\324|\254\276\352Z\361\276\300\177\030\277\363\0045\277\002\237M\277\230\305a\277\010\tq\277\276\024{\277\017\261\177\277m\304~\277\370Sx\277^\203l\277\032\224[\277\003\344E\277J\353+\277\3329\016\277\200\350\332\2761\240\224\276\203@\026\276\312\311\323\245\203@\026>1\240\224>\200\350\332>\3329\016?J\353+?\003\344E?\032\224[?^\203l?\370Sx?m\304~?\017\261\177?\276\024{?\010\tq?\230\305a?\002\237M?\363\0045?\300\177\030?\352Z\361>\324|\254>\302\305G>0\373H=6\275\310\275\314\317x\276\025\357\303\276=\234\003\277\231g\"\277\371\256=\2771\333T\277\330kg\277\013\372t\277\254:}\277\000\000\200\277\254:}\277\013\372t\277\330kg\2771\333T\277\371\256=\277\231g\"\277=\234\003\277\025\357\303\276\314\317x\2766\275\310\2750\373H=\302\305G>\324|\254>\352Z\361>\300\177\030?\363\0045?\002\237M?\230\305a?\010\tq?\276\024{?\017\261\177?m\304~?\370Sx?^\203l?\032\224[?\000\000\000\200\242\020/\276\324|\254\276\']\374\276\231g\"\277p\330A\277\032\224[\277\236\330n\277\276\024{\277C\354\177\277\254:}\277G\024s\277\230\305a\277\022\321I\277J\353+\277\233\365\010\277\025\357\303\276\023\\`\2760\373H\275s\262\372=1\240\224>u3\346>\300\177\030?Bh9?1\333T?\247\tj?\370Sx?mN\177?m\304~?\007\272v?\330kg?=MQ?\363\0045?*h\023?\200\350\332>\223\216\210>6\275\310=\005\251\226\275\314\317x\276\312{\317\276\3329\016\277\273\2050\277\002\237M\277Y\252d\277\013\372t\277$\023~\277\017\261\177\277\235\307y\277^\203l\277SHX\277\371\256=\277\321\177\035\277\352Z\361\276\345\232\240\276\203@\026\276\260\n\311<\302\305G>*D\270>=\234\003?V6\'?\003\344E?\005\276^?\010\tq?(;|?\000\000\200?(;|?\010\tq?\005\276^?\003\344E?V6\'?=\234\003?*D\270>\302\305G>\260\n\311<\203@\026\276\345\232\240\276\352Z\361\276\321\177\035\277\371\256=\277SHX\277^\203l\277\235\307y\277\017\261\177\277$\023~\277\013\372t\277Y\252d\277\002\237M\277\273\2050\277\3329\016\277\312{\317\276\314\317x\276\005\251\226\2756\275\310=\223\216\210>\200\350\332>*h\023?\363\0045?=MQ?\330kg?\007\272v?m\304~?mN\177?\370Sx?\247\tj?1\333T?Bh9?\300\177\030?u3\346>1\240\224>s\262\372=0\373H\275\023\\`\276\025\357\303\276\233\365\010\277J\353+\277\022\321I\277\230\305a\277G\024s\277\254:}\277C\354\177\277\276\024{\277\236\330n\277\000\000\000\200\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\27621\r\245\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>21\215%\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276\312\311\323\245\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>21\r&\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276~}0\246\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?^\203l?1\333T?\363\0045?\3329\016?\025\357\303>\302\305G>\312\311S&\302\305G\276\025\357\303\276\3329\016\277\363\0045\2771\333T\277^\203l\277\276\024{\277\000\000\200\277\276\024{\277^\203l\2771\333T\277\363\0045\277\3329\016\277\025\357\303\276\302\305G\276\027\026w\246\302\305G>\025\357\303>\3329\016?\363\0045?1\333T?^\203l?\276\024{?\000\000\200?\276\024{?\000\000\000\200\023\\`\276\200\350\332\276\321\177\035\277\003\344E\277Y\252d\277\370Sx\277C\354\177\277\276\024{\277\247\tj\277\002\237M\277V6\'\277\352Z\361\276\223\216\210\2760\373H\275\242\020/>\025\357\303>*h\023?\371\256=?\005\276^?\013\372t?mN\177?\254:}?\236\330n?1\333T?\273\2050?=\234\003?\345\232\240>6\275\310=s\262\372\275\324|\254\276\233\365\010\277\363\0045\277SHX\277\010\tq\277$\023~\277m\304~\277G\024s\277\032\224[\277Bh9\277\3329\016\277*D\270\276\203@\026\276\005\251\226=1\240\224>\']\374>J\353+?=MQ?^\203l?(;|?\017\261\177?\007\272v?\230\305a?p\330A?\300\177\030?\312{\317>\302\305G>\260\n\311\274\314\317x\276u3\346\276\231g\"\277\022\321I\277\330kg\277\235\307y\277\000\000\200\277\235\307y\277\330kg\277\022\321I\277\231g\"\277u3\346\276\314\317x\276\260\n\311\274\302\305G>\312{\317>\300\177\030?p\330A?\230\305a?\007\272v?\017\261\177?(;|?^\203l?=MQ?J\353+?\']\374>1\240\224>\005\251\226=\203@\026\276*D\270\276\3329\016\277Bh9\277\032\224[\277G\024s\277m\304~\277$\023~\277\010\tq\277SHX\277\363\0045\277\233\365\010\277\324|\254\276s\262\372\2756\275\310=\345\232\240>=\234\003?\273\2050?1\333T?\236\330n?\254:}?mN\177?\013\372t?\005\276^?\371\256=?*h\023?\025\357\303>\242\020/>0\373H\275\223\216\210\276\352Z\361\276V6\'\277\002\237M\277\247\tj\277\276\024{\277C\354\177\277\000\000\000\200\314\317x\276\352Z\361\276J\353+\2771\333T\277\010\tq\277m\304~\277\254:}\277^\203l\277\002\237M\277\231g\"\277\200\350\332\276\302\305G\2760\373H=1\240\224>=\234\003?\363\0045?\032\224[?\013\372t?\017\261\177?\276\024{?\330kg?\003\344E?\300\177\030?\025\357\303>\203@\026>6\275\310\275\324|\254\276\3329\016\277\371\256=\277\230\305a\277\370Sx\277\000\000\200\277\370Sx\277\230\305a\277\371\256=\277\3329\016\277\324|\254\2766\275\310\275\203@\026>\025\357\303>\300\177\030?\003\344E?\330kg?\276\024{?\017\261\177?\013\372t?\032\224[?\363\0045?=\234\003?1\240\224>0\373H=\302\305G\276\200\350\332\276\231g\"\277\002\237M\277^\203l\277\254:}\277m\304~\277\010\tq\2771\333T\277J\353+\277\352Z\361\276\314\317x\276~}0\246\314\317x>\352Z\361>J\353+?1\333T?\010\tq?m\304~?\254:}?^\203l?\002\237M?\231g\"?\200\350\332>\302\305G>0\373H\2751\240\224\276=\234\003\277\363\0045\277\032\224[\277\013\372t\277\017\261\177\277\276\024{\277\330kg\277\003\344E\277\300\177\030\277\025\357\303\276\203@\026\2766\275\310=\324|\254>\3329\016?\371\256=?\230\305a?\370Sx?\000\000\200?\370Sx?\230\305a?\371\256=?\3329\016?\324|\254>6\275\310=\203@\026\276\025\357\303\276\300\177\030\277\003\344E\277\330kg\277\276\024{\277\017\261\177\277\013\372t\277\032\224[\277\363\0045\277=\234\003\2771\240\224\2760\373H\275\302\305G>\200\350\332>\231g\"?\002\237M?^\203l?\254:}?\000\000\000\200\223\216\210\276=\234\003\277Bh9\277\230\305a\277\235\307y\277\017\261\177\277G\024s\2771\333T\277V6\'\277\200\350\332\276\242\020/\2766\275\310=*D\270>\300\177\030?\022\321I?^\203l?$\023~?\254:}?\247\tj?\003\344E?*h\023?\324|\254>\005\251\226=\302\305G\276u3\346\276J\353+\277SHX\277\013\372t\277C\354\177\277\370Sx\277\005\276^\277\363\0045\277\']\374\276\314\317x\276\260\n\311<1\240\224>\233\365\010?\371\256=?Y\252d?\276\024{?mN\177?\010\tq?=MQ?\231g\"?\312{\317>\203@\026>s\262\372\275\025\357\303\276\321\177\035\277\002\237M\277\236\330n\277m\304~\277(;|\277\330kg\277p\330A\277\3329\016\277\345\232\240\2760\373H\275\023\\`>\352Z\361>\273\2050?\032\224[?\007\272v?\000\000\200?\007\272v?\032\224[?\273\2050?\352Z\361>\023\\`>0\373H\275\345\232\240\276\3329\016\277p\330A\277\330kg\277(;|\277m\304~\277\236\330n\277\002\237M\277\321\177\035\277\025\357\303\276s\262\372\275\203@\026>\312{\317>\231g\"?=MQ?\010\tq?mN\177?\276\024{?Y\252d?\371\256=?\233\365\010?1\240\224>\260\n\311<\314\317x\276\']\374\276\363\0045\277\005\276^\277\370Sx\277C\354\177\277\013\372t\277SHX\277J\353+\277u3\346\276\302\305G\276\005\251\226=\324|\254>*h\023?\003\344E?\247\tj?\254:}?$\023~?^\203l?\022\321I?\300\177\030?*D\270>6\275\310=\242\020/\276\200\350\332\276V6\'\2771\333T\277G\024s\277\000\000\000\2001\240\224\276\3329\016\277\003\344E\277^\203l\277m\304~\277\276\024{\277\230\305a\277\363\0045\277\352Z\361\276\302\305G\2766\275\310=\025\357\303>\231g\"?1\333T?\013\372t?\000\000\200?\013\372t?1\333T?\231g\"?\025\357\303>6\275\310=\302\305G\276\352Z\361\276\363\0045\277\230\305a\277\276\024{\277m\304~\277^\203l\277\003\344E\277\3329\016\2771\240\224\276\312\311\323\2451\240\224>\3329\016?\003\344E?^\203l?m\304~?\276\024{?\230\305a?\363\0045?\352Z\361>\302\305G>6\275\310\275\025\357\303\276\231g\"\2771\333T\277\013\372t\277\000\000\200\277\013\372t\2771\333T\277\231g\"\277\025\357\303\2766\275\310\275\302\305G>\352Z\361>\363\0045?\230\305a?\276\024{?m\304~?^\203l?\003\344E?\3329\016?1\240\224>\312\311S&1\240\224\276\3329\016\277\003\344E\277^\203l\277m\304~\277\276\024{\277\230\305a\277\363\0045\277\352Z\361\276\302\305G\2766\275\310=\025\357\303>\231g\"?1\333T?\013\372t?\000\000\200?\013\372t?1\333T?\231g\"?\025\357\303>6\275\310=\302\305G\276\352Z\361\276\363\0045\277\230\305a\277\276\024{\277m\304~\277^\203l\277\003\344E\277\3329\016\2771\240\224\276X\327\236\2461\240\224>\3329\016?\003\344E?^\203l?m\304~?\276\024{?\230\305a?\363\0045?\352Z\361>\302\305G>6\275\310\275\025\357\303\276\231g\"\2771\333T\277\013\372t\277\000\000\200\277\013\372t\2771\333T\277\231g\"\277\025\357\303\2766\275\310\275\302\305G>\352Z\361>\363\0045?\230\305a?\000\000\000\200\345\232\240\276\300\177\030\277=MQ\277\013\372t\277C\354\177\277\010\tq\277\022\321I\277\3329\016\277\223\216\210\2760\373H=*D\270>\231g\"?SHX?\370Sx?mN\177?^\203l?p\330A?=\234\003?\023\\`>6\275\310\275\312{\317\276J\353+\277\005\276^\277\276\024{\277$\023~\277\330kg\277Bh9\277\352Z\361\276\242\020/\276\203@\026>u3\346>\363\0045?Y\252d?\254:}?(;|?\230\305a?\273\2050?\200\350\332>s\262\372=\302\305G\276\']\374\276\371\256=\277\247\tj\277m\304~\277\235\307y\277\032\224[\277V6\'\277\025\357\303\276\005\251\226\275\314\317x>\233\365\010?\003\344E?\236\330n?\017\261\177?\007\272v?1\333T?\321\177\035?\324|\254>\260\n\311<1\240\224\276*h\023\277\002\237M\277G\024s\277\000\000\200\277G\024s\277\002\237M\277*h\023\2771\240\224\276\260\n\311<\324|\254>\321\177\035?1\333T?\007\272v?\017\261\177?\236\330n?\003\344E?\233\365\010?\314\317x>\005\251\226\275\025\357\303\276V6\'\277\032\224[\277\235\307y\277m\304~\277\247\tj\277\371\256=\277\']\374\276\302\305G\276s\262\372=\200\350\332>\273\2050?\230\305a?(;|?\254:}?Y\252d?\363\0045?u3\346>\203@\026>\242\020/\276\352Z\361\276Bh9\277\330kg\277$\023~\277\276\024{\277\005\276^\277J\353+\277\312{\317\2766\275\310\275\023\\`>=\234\003?p\330A?^\203l?mN\177?\370Sx?SHX?\231g\"?*D\270>0\373H=\223\216\210\276\3329\016\277\022\321I\277\000\000\000\200\324|\254\276\231g\"\277\032\224[\277\276\024{\277\254:}\277\230\305a\277J\353+\277\025\357\303\2760\373H\2751\240\224>\300\177\030?1\333T?\370Sx?m\304~?\330kg?\363\0045?\200\350\332>6\275\310=\314\317x\276\3329\016\277\002\237M\277\013\372t\277\017\261\177\277^\203l\277\371\256=\277\352Z\361\276\203@\026\276\302\305G>=\234\003?\003\344E?\010\tq?\000\000\200?\010\tq?\003\344E?=\234\003?\302\305G>\203@\026\276\352Z\361\276\371\256=\277^\203l\277\017\261\177\277\013\372t\277\002\237M\277\3329\016\277\314\317x\2766\275\310=\200\350\332>\363\0045?\330kg?m\304~?\370Sx?1\333T?\300\177\030?1\240\224>0\373H\275\025\357\303\276J\353+\277\230\305a\277\254:}\277\276\024{\277\032\224[\277\231g\"\277\324|\254\276\027\026w\246\324|\254>\231g\"?\032\224[?\276\024{?\254:}?\230\305a?J\353+?\025\357\303>0\373H=1\240\224\276\300\177\030\2771\333T\277\370Sx\277m\304~\277\330kg\277\363\0045\277\200\350\332\2766\275\310\275\314\317x>\3329\016?\002\237M?\013\372t?\017\261\177?^\203l?\371\256=?\352Z\361>\203@\026>\302\305G\276=\234\003\277\003\344E\277\010\tq\277\000\000\200\277\010\tq\277\003\344E\277=\234\003\277\302\305G\276\203@\026>\352Z\361>\371\256=?^\203l?\017\261\177?\013\372t?\002\237M?\3329\016?\314\317x>6\275\310\275\200\350\332\276\363\0045\277\330kg\277m\304~\277\370Sx\2771\333T\277\300\177\030\2771\240\224\2760\373H=\025\357\303>J\353+?\000\000\000\200*D\270\276J\353+\277Y\252d\277m\304~\277\007\272v\277\002\237M\277\233\365\010\277\302\305G\276\242\020/>=\234\003?\022\321I?\013\372t?mN\177?\330kg?\273\2050?\025\357\303>\260\n\311<\324|\254\276V6\'\277\230\305a\277$\023~\277\370Sx\277=MQ\277\3329\016\277\023\\`\276\203@\026>\']\374>\003\344E?G\024s?\017\261\177?\247\tj?\363\0045?\312{\317>0\373H=\345\232\240\276\231g\"\277\005\276^\277\254:}\277\235\307y\2771\333T\277*h\023\277\314\317x\276s\262\372=\352Z\361>p\330A?\010\tq?C\354\177?^\203l?Bh9?\200\350\332>\005\251\226=1\240\224\276\321\177\035\277\032\224[\277(;|\277\276\024{\277SHX\277\300\177\030\277\223\216\210\2766\275\310=u3\346>\371\256=?\236\330n?\000\000\200?\236\330n?\371\256=?u3\346>6\275\310=\223\216\210\276\300\177\030\277SHX\277\276\024{\277(;|\277\032\224[\277\321\177\035\2771\240\224\276\005\251\226=\200\350\332>Bh9?^\203l?C\354\177?\010\tq?p\330A?\352Z\361>s\262\372=\314\317x\276*h\023\2771\333T\277\235\307y\277\254:}\277\005\276^\277\231g\"\277\345\232\240\2760\373H=\312{\317>\363\0045?\247\tj?\017\261\177?G\024s?\003\344E?\']\374>\203@\026>\023\\`\276\3329\016\277=MQ\277\370Sx\277$\023~\277\230\305a\277V6\'\277\324|\254\276\260\n\311<\025\357\303>\273\2050?\330kg?mN\177?\013\372t?\022\321I?=\234\003?\242\020/>\302\305G\276\233\365\010\277\000\000\000\200\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\27621\r\245\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>21\215%\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\312\311\323\245\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>21\r&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276~}0\246\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\312\311S&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\027\026w\246\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>21\215&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276X\327\236\246\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>~}\260&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\351\210\260\247\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\312\311\323&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\010H\r\'\025\357\303>\363\0045?^\203l?\000\000\200?^\203l?\363\0045?\025\357\303>\027\026\367&\025\357\303\276\363\0045\277^\203l\277\000\000\200\277^\203l\277\363\0045\277\025\357\303\276\017/\302\247\025\357\303>\000\000\000\200\312{\317\276\371\256=\277G\024s\277m\304~\277\005\276^\277\300\177\030\277\023\\`\276\302\305G>*h\023?\032\224[?$\023~?\013\372t?p\330A?\200\350\332>\260\n\311<\025\357\303\276Bh9\277\010\tq\277mN\177\277\230\305a\277\321\177\035\277\314\317x\276\242\020/>\3329\016?SHX?\254:}?\007\272v?\003\344E?u3\346>0\373H=*D\270\276\363\0045\277\236\330n\277\017\261\177\277Y\252d\277\231g\"\277\223\216\210\276\203@\026>\233\365\010?1\333T?(;|?\370Sx?\022\321I?\352Z\361>\005\251\226=\324|\254\276\273\2050\277^\203l\277C\354\177\277\330kg\277V6\'\2771\240\224\276s\262\372==\234\003?=MQ?\276\024{?\235\307y?\002\237M?\']\374>6\275\310=\345\232\240\276J\353+\277\247\tj\277\000\000\200\277\247\tj\277J\353+\277\345\232\240\2766\275\310=\']\374>\002\237M?\235\307y?\276\024{?=MQ?=\234\003?s\262\372=1\240\224\276V6\'\277\330kg\277C\354\177\277^\203l\277\273\2050\277\324|\254\276\005\251\226=\352Z\361>\022\321I?\370Sx?(;|?1\333T?\233\365\010?\203@\026>\223\216\210\276\231g\"\277Y\252d\277\017\261\177\277\236\330n\277\363\0045\277*D\270\2760\373H=u3\346>\003\344E?\007\272v?\254:}?SHX?\3329\016?\242\020/>\314\317x\276\321\177\035\277\230\305a\277mN\177\277\010\tq\277Bh9\277\025\357\303\276\260\n\311<\200\350\332>p\330A?\013\372t?$\023~?\032\224[?*h\023?\302\305G>\023\\`\276\000\000\000\200\200\350\332\276\003\344E\277\370Sx\277\276\024{\277\002\237M\277\352Z\361\2760\373H\275\025\357\303>\371\256=?\013\372t?\254:}?1\333T?=\234\003?6\275\310=\324|\254\276\363\0045\277\010\tq\277m\304~\277\032\224[\277\3329\016\277\203@\026\2761\240\224>J\353+?^\203l?\017\261\177?\230\305a?\300\177\030?\302\305G>\314\317x\276\231g\"\277\330kg\277\000\000\200\277\330kg\277\231g\"\277\314\317x\276\302\305G>\300\177\030?\230\305a?\017\261\177?^\203l?J\353+?1\240\224>\203@\026\276\3329\016\277\032\224[\277m\304~\277\010\tq\277\363\0045\277\324|\254\2766\275\310==\234\003?1\333T?\254:}?\013\372t?\371\256=?\025\357\303>0\373H\275\352Z\361\276\002\237M\277\276\024{\277\370Sx\277\003\344E\277\200\350\332\276X\327\236\246\200\350\332>\003\344E?\370Sx?\276\024{?\002\237M?\352Z\361>0\373H=\025\357\303\276\371\256=\277\013\372t\277\254:}\2771\333T\277=\234\003\2776\275\310\275\324|\254>\363\0045?\010\tq?m\304~?\032\224[?\3329\016?\203@\026>1\240\224\276J\353+\277^\203l\277\017\261\177\277\230\305a\277\300\177\030\277\302\305G\276\314\317x>\231g\"?\330kg?\000\000\200?\330kg?\231g\"?\314\317x>\302\305G\276\300\177\030\277\230\305a\277\017\261\177\277^\203l\277J\353+\2771\240\224\276\203@\026>\3329\016?\032\224[?m\304~?\010\tq?\363\0045?\324|\254>6\275\310\275=\234\003\2771\333T\277\254:}\277\013\372t\277\371\256=\277\025\357\303\2760\373H=\000\000\000\200u3\346\276\002\237M\277(;|\277\013\372t\277Bh9\277\324|\254\276s\262\372=\3329\016?\005\276^?\017\261\177?\247\tj?\231g\"?\023\\`>\314\317x\276V6\'\277^\203l\277mN\177\277\032\224[\277\233\365\010\2776\275\310\275*D\270>\371\256=?\007\272v?\276\024{?\022\321I?\200\350\332>\260\n\311\274\352Z\361\276=MQ\277\254:}\277G\024s\277\363\0045\277\345\232\240\276\203@\026>*h\023?\230\305a?C\354\177?\330kg?\321\177\035?\302\305G>\223\216\210\276J\353+\277\236\330n\277m\304~\277SHX\277=\234\003\277\005\251\226\275\025\357\303>p\330A?\370Sx?\235\307y?\003\344E?\312{\317>0\373H\275\']\374\2761\333T\277$\023~\277\010\tq\277\273\2050\2771\240\224\276\242\020/>\300\177\030?Y\252d?\000\000\200?Y\252d?\300\177\030?\242\020/>1\240\224\276\273\2050\277\010\tq\277$\023~\2771\333T\277\']\374\2760\373H\275\312{\317>\003\344E?\235\307y?\370Sx?p\330A?\025\357\303>\005\251\226\275=\234\003\277SHX\277m\304~\277\236\330n\277J\353+\277\223\216\210\276\302\305G>\321\177\035?\330kg?C\354\177?\230\305a?*h\023?\203@\026>\345\232\240\276\363\0045\277G\024s\277\254:}\277=MQ\277\352Z\361\276\260\n\311\274\200\350\332>\022\321I?\276\024{?\007\272v?\371\256=?*D\270>6\275\310\275\233\365\010\277\032\224[\277mN\177\277^\203l\277V6\'\277\314\317x\276\023\\`>\231g\"?\247\tj?\017\261\177?\005\276^?\3329\016?s\262\372=\000\000\000\200\352Z\361\2761\333T\277m\304~\277^\203l\277\231g\"\277\302\305G\2761\240\224>\363\0045?\013\372t?\276\024{?\003\344E?\025\357\303>6\275\310\275\3329\016\277\230\305a\277\000\000\200\277\230\305a\277\3329\016\2776\275\310\275\025\357\303>\003\344E?\276\024{?\013\372t?\363\0045?1\240\224>\302\305G\276\231g\"\277^\203l\277m\304~\2771\333T\277\352Z\361\276~}0\246\352Z\361>1\333T?m\304~?^\203l?\231g\"?\302\305G>1\240\224\276\363\0045\277\013\372t\277\276\024{\277\003\344E\277\025\357\303\2766\275\310=\3329\016?\230\305a?\000\000\200?\230\305a?\3329\016?6\275\310=\025\357\303\276\003\344E\277\276\024{\277\013\372t\277\363\0045\2771\240\224\276\302\305G>\231g\"?^\203l?m\304~?1\333T?\352Z\361>~}\260&\352Z\361\2761\333T\277m\304~\277^\203l\277\231g\"\277\302\305G\2761\240\224>\363\0045?\013\372t?\276\024{?\003\344E?\025\357\303>6\275\310\275\3329\016\277\230\305a\277\000\000\200\277\230\305a\277\3329\016\2776\275\310\275\025\357\303>\003\344E?\276\024{?\013\372t?\363\0045?1\240\224>\302\305G\276\231g\"\277^\203l\277m\304~\2771\333T\277\352Z\361\276\017/\302\247\352Z\361>1\333T?m\304~?^\203l?\231g\"?\302\305G>1\240\224\276\363\0045\277\013\372t\277\276\024{\277\003\344E\277\025\357\303\2766\275\310=\3329\016?\230\305a?\000\000\200?\230\305a?\3329\016?6\275\310=\025\357\303\276\003\344E\277\276\024{\277\013\372t\277\363\0045\2771\240\224\276\000\000\000\200\']\374\276\032\224[\277C\354\177\277\230\305a\277\233\365\010\2770\373H\275u3\346>1\333T?mN\177?\330kg?*h\023?6\275\310=\312{\317\276\002\237M\277$\023~\277^\203l\277\321\177\035\277\203@\026\276*D\270>\003\344E?(;|?\010\tq?V6\'?\302\305G>\345\232\240\276\371\256=\277\235\307y\277\013\372t\277\273\2050\277\314\317x\276\223\216\210>\363\0045?\007\272v?\370Sx?Bh9?1\240\224>\023\\`\276J\353+\277G\024s\277\276\024{\277p\330A\277\324|\254\276\242\020/>\231g\"?\236\330n?\254:}?\022\321I?\025\357\303>s\262\372\275\300\177\030\277\247\tj\277m\304~\277=MQ\277\200\350\332\276\005\251\226=\3329\016?Y\252d?\017\261\177?SHX?\352Z\361>\260\n\311\274=\234\003\277\005\276^\277\000\000\200\277\005\276^\277=\234\003\277\260\n\311\274\352Z\361>SHX?\017\261\177?Y\252d?\3329\016?\005\251\226=\200\350\332\276=MQ\277m\304~\277\247\tj\277\300\177\030\277s\262\372\275\025\357\303>\022\321I?\254:}?\236\330n?\231g\"?\242\020/>\324|\254\276p\330A\277\276\024{\277G\024s\277J\353+\277\023\\`\2761\240\224>Bh9?\370Sx?\007\272v?\363\0045?\223\216\210>\314\317x\276\273\2050\277\013\372t\277\235\307y\277\371\256=\277\345\232\240\276\302\305G>V6\'?\010\tq?(;|?\003\344E?*D\270>\203@\026\276\321\177\035\277^\203l\277$\023~\277\002\237M\277\312{\317\2766\275\310=*h\023?\330kg?mN\177?1\333T?u3\346>\000\000\000\200=\234\003\277\230\305a\277\017\261\177\2771\333T\277\200\350\332\2766\275\310=\300\177\030?^\203l?\254:}?\003\344E?\324|\254>\302\305G\276J\353+\277\013\372t\277\370Sx\277\363\0045\277\314\317x\2761\240\224>\371\256=?\276\024{?\010\tq?\231g\"?\203@\026>\025\357\303\276\002\237M\277m\304~\277\330kg\277\3329\016\2770\373H\275\352Z\361>\032\224[?\000\000\200?\032\224[?\352Z\361>0\373H\275\3329\016\277\330kg\277m\304~\277\002\237M\277\025\357\303\276\203@\026>\231g\"?\010\tq?\276\024{?\371\256=?1\240\224>\314\317x\276\363\0045\277\370Sx\277\013\372t\277J\353+\277\302\305G\276\324|\254>\003\344E?\254:}?^\203l?\300\177\030?6\275\310=\200\350\332\2761\333T\277\017\261\177\277\230\305a\277=\234\003\277\351\210\260\247=\234\003?\230\305a?\017\261\177?1\333T?\200\350\332>6\275\310\275\300\177\030\277^\203l\277\254:}\277\003\344E\277\324|\254\276\302\305G>J\353+?\013\372t?\370Sx?\363\0045?\314\317x>1\240\224\276\371\256=\277\276\024{\277\010\tq\277\231g\"\277\203@\026\276\025\357\303>\002\237M?m\304~?\330kg?\3329\016?0\373H=\352Z\361\276\032\224[\277\000\000\200\277\032\224[\277\352Z\361\2760\373H=\3329\016?\330kg?m\304~?\002\237M?\025\357\303>\203@\026\276\231g\"\277\010\tq\277\276\024{\277\371\256=\2771\240\224\276\314\317x>\363\0045?\370Sx?\013\372t?J\353+?\302\305G>\324|\254\276\003\344E\277\254:}\277^\203l\277\300\177\030\277\000\000\000\200\233\365\010\277\330kg\277$\023~\277\003\344E\277\345\232\240\276\314\317x>Bh9?\276\024{?\236\330n?\300\177\030?\005\251\226=\352Z\361\276\005\276^\277\017\261\177\277=MQ\277\025\357\303\276\242\020/>J\353+?\007\272v?\013\372t?V6\'?\203@\026>\312{\317\2761\333T\277C\354\177\277\032\224[\277u3\346\2766\275\310=\321\177\035?\010\tq?\235\307y?\363\0045?\023\\`>\324|\254\276\022\321I\277m\304~\277Y\252d\277=\234\003\277\260\n\311<\3329\016?\247\tj?\254:}?p\330A?1\240\224>\223\216\210\276\371\256=\277(;|\277^\203l\277*h\023\2770\373H\275\']\374>\230\305a?mN\177?\002\237M?*D\270>\302\305G\276\273\2050\277\370Sx\277G\024s\277\231g\"\277s\262\372\275\200\350\332>SHX?\000\000\200?SHX?\200\350\332>s\262\372\275\231g\"\277G\024s\277\370Sx\277\273\2050\277\302\305G\276*D\270>\002\237M?mN\177?\230\305a?\']\374>0\373H\275*h\023\277^\203l\277(;|\277\371\256=\277\223\216\210\2761\240\224>p\330A?\254:}?\247\tj?\3329\016?\260\n\311<=\234\003\277Y\252d\277m\304~\277\022\321I\277\324|\254\276\023\\`>\363\0045?\235\307y?\010\tq?\321\177\035?6\275\310=u3\346\276\032\224[\277C\354\177\2771\333T\277\312{\317\276\203@\026>V6\'?\013\372t?\007\272v?J\353+?\242\020/>\025\357\303\276=MQ\277\017\261\177\277\005\276^\277\352Z\361\276\005\251\226=\300\177\030?\236\330n?\276\024{?Bh9?\000\000\000\200\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\312\311\323\245\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?\312\311S&\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277X\327\236\246\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?\312\311\323&\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\017/\302\247\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\025\357\303\276\302\305G>\363\0045?\276\024{?^\203l?\3329\016?X\327\036\'\3329\016\277^\203l\277\276\024{\277\363\0045\277\302\305G\276\025\357\303>1\333T?\000\000\200?1\333T?\025\357\303>\302\305G\276\363\0045\277\276\024{\277^\203l\277\3329\016\277\336^\215&\3329\016?^\203l?\276\024{?\363\0045?\302\305G>\025\357\303\2761\333T\277\000\000\200\2771\333T\277\000\000\000\200*h\023\277\010\tq\277\007\272v\277\231g\"\277\005\251\226\275=\234\003?\247\tj?\276\024{?\273\2050?\203@\026>u3\346\276\230\305a\277$\023~\277\371\256=\277\023\\`\276\025\357\303>SHX?\017\261\177?\022\321I?1\240\224>\345\232\240\276\002\237M\277C\354\177\2771\333T\277*D\270\276\314\317x>p\330A?m\304~?\005\276^?\200\350\332>\242\020/\276\363\0045\277(;|\277\330kg\277\']\374\2766\275\310=V6\'?\370Sx?\236\330n?\3329\016?\260\n\311\274\300\177\030\277G\024s\277\013\372t\277\321\177\035\2770\373H\275\233\365\010?^\203l?\235\307y?J\353+?s\262\372=\352Z\361\276Y\252d\277\254:}\277Bh9\277\302\305G\276\312{\317>\032\224[?mN\177?\003\344E?\223\216\210>\324|\254\276=MQ\277\000\000\200\277=MQ\277\324|\254\276\223\216\210>\003\344E?mN\177?\032\224[?\312{\317>\302\305G\276Bh9\277\254:}\277Y\252d\277\352Z\361\276s\262\372=J\353+?\235\307y?^\203l?\233\365\010?0\373H\275\321\177\035\277\013\372t\277G\024s\277\300\177\030\277\260\n\311\274\3329\016?\236\330n?\370Sx?V6\'?6\275\310=\']\374\276\330kg\277(;|\277\363\0045\277\242\020/\276\200\350\332>\005\276^?m\304~?p\330A?\314\317x>*D\270\2761\333T\277C\354\177\277\002\237M\277\345\232\240\2761\240\224>\022\321I?\017\261\177?SHX?\025\357\303>\023\\`\276\371\256=\277$\023~\277\230\305a\277u3\346\276\203@\026>\273\2050?\276\024{?\247\tj?\000\000\000\200\300\177\030\277\013\372t\277\010\tq\277\3329\016\2770\373H=\231g\"?\370Sx?^\203l?=\234\003?6\275\310\275J\353+\277\276\024{\277\330kg\277\352Z\361\276\203@\026>\363\0045?\254:}?\230\305a?\200\350\332>\302\305G\276\371\256=\277m\304~\277\032\224[\277\025\357\303\276\314\317x>\003\344E?\017\261\177?1\333T?\324|\254>1\240\224\276\002\237M\277\000\000\200\277\002\237M\2771\240\224\276\324|\254>1\333T?\017\261\177?\003\344E?\314\317x>\025\357\303\276\032\224[\277m\304~\277\371\256=\277\302\305G\276\200\350\332>\230\305a?\254:}?\363\0045?\203@\026>\352Z\361\276\330kg\277\276\024{\277J\353+\2776\275\310\275=\234\003?^\203l?\370Sx?\231g\"?0\373H=\3329\016\277\010\tq\277\013\372t\277\300\177\030\277\010H\r\'\300\177\030?\013\372t?\010\tq?\3329\016?0\373H\275\231g\"\277\370Sx\277^\203l\277=\234\003\2776\275\310=J\353+?\276\024{?\330kg?\352Z\361>\203@\026\276\363\0045\277\254:}\277\230\305a\277\200\350\332\276\302\305G>\371\256=?m\304~?\032\224[?\025\357\303>\314\317x\276\003\344E\277\017\261\177\2771\333T\277\324|\254\2761\240\224>\002\237M?\000\000\200?\002\237M?1\240\224>\324|\254\2761\333T\277\017\261\177\277\003\344E\277\314\317x\276\025\357\303>\032\224[?m\304~?\371\256=?\302\305G>\200\350\332\276\230\305a\277\254:}\277\363\0045\277\203@\026\276\352Z\361>\330kg?\276\024{?J\353+?6\275\310==\234\003\277^\203l\277\370Sx\277\000\000\000\200\321\177\035\277\370Sx\277\247\tj\277\352Z\361\276\242\020/>\371\256=?mN\177?1\333T?\345\232\240>\324|\254\276SHX\277m\304~\277Bh9\277\203@\026\276\']\374>^\203l?\007\272v?\300\177\030?\260\n\311\274\231g\"\277\235\307y\277\330kg\277u3\346\276\302\305G>p\330A?\017\261\177?=MQ?1\240\224>*D\270\276\032\224[\277$\023~\277\363\0045\277s\262\372\275=\234\003?\236\330n?\013\372t?*h\023?0\373H\275V6\'\277\276\024{\277Y\252d\277\200\350\332\276\023\\`>\003\344E?C\354\177?\002\237M?\223\216\210>\025\357\303\276\005\276^\277\254:}\277\273\2050\2776\275\310\275\233\365\010?\010\tq?G\024s?\3329\016?\005\251\226\275J\353+\277(;|\277\230\305a\277\312{\317\276\314\317x>\022\321I?\000\000\200?\022\321I?\314\317x>\312{\317\276\230\305a\277(;|\277J\353+\277\005\251\226\275\3329\016?G\024s?\010\tq?\233\365\010?6\275\310\275\273\2050\277\254:}\277\005\276^\277\025\357\303\276\223\216\210>\002\237M?C\354\177?\003\344E?\023\\`>\200\350\332\276Y\252d\277\276\024{\277V6\'\2770\373H\275*h\023?\013\372t?\236\330n?=\234\003?s\262\372\275\363\0045\277$\023~\277\032\224[\277*D\270\2761\240\224>=MQ?\017\261\177?p\330A?\302\305G>u3\346\276\330kg\277\235\307y\277\231g\"\277\260\n\311\274\300\177\030?\007\272v?^\203l?\']\374>\203@\026\276Bh9\277m\304~\277SHX\277\324|\254\276\345\232\240>1\333T?mN\177?\000\000\000\200\231g\"\277\276\024{\277\230\305a\277\025\357\303\2761\240\224>1\333T?m\304~?\363\0045?6\275\310=\3329\016\277\013\372t\277^\203l\277\352Z\361\276\302\305G>\003\344E?\000\000\200?\003\344E?\302\305G>\352Z\361\276^\203l\277\013\372t\277\3329\016\2776\275\310=\363\0045?m\304~?1\333T?1\240\224>\025\357\303\276\230\305a\277\276\024{\277\231g\"\277\027\026w\246\231g\"?\276\024{?\230\305a?\025\357\303>1\240\224\2761\333T\277m\304~\277\363\0045\2776\275\310\275\3329\016?\013\372t?^\203l?\352Z\361>\302\305G\276\003\344E\277\000\000\200\277\003\344E\277\302\305G\276\352Z\361>^\203l?\013\372t?\3329\016?6\275\310\275\363\0045\277m\304~\2771\333T\2771\240\224\276\025\357\303>\230\305a?\276\024{?\231g\"?\027\026\367&\231g\"\277\276\024{\277\230\305a\277\025\357\303\2761\240\224>1\333T?m\304~?\363\0045?6\275\310=\3329\016\277\013\372t\277^\203l\277\352Z\361\276\302\305G>\003\344E?\000\000\200?\003\344E?\302\305G>\352Z\361\276^\203l\277\013\372t\277\3329\016\2776\275\310=\363\0045?m\304~?1\333T?1\240\224>\025\357\303\276\230\305a\277\276\024{\277\231g\"\277\336^\215&\231g\"?\276\024{?\230\305a?\025\357\303>1\240\224\2761\333T\277m\304~\277\363\0045\2776\275\310\275\3329\016?\013\372t?^\203l?\352Z\361>\302\305G\276\003\344E\277\000\000\200\277\003\344E\277\302\305G\276\352Z\361>^\203l?\013\372t?\3329\016?6\275\310\275\363\0045\277m\304~\277\000\000\000\200V6\'\277\254:}\277SHX\2771\240\224\276\312{\317>\330kg?\007\272v?\3329\016?s\262\372\275\371\256=\277C\354\177\277\003\344E\277\242\020/\276=\234\003?G\024s?^\203l?u3\346>\314\317x\276=MQ\277m\304~\277\273\2050\2770\373H\275\321\177\035?\276\024{?\005\276^?\324|\254>*D\270\276\230\305a\277\235\307y\277\300\177\030\277\005\251\226=\363\0045?mN\177?\002\237M?\023\\`>\352Z\361\276\236\330n\277\010\tq\277\']\374\276\302\305G>\022\321I?\017\261\177?Bh9?6\275\310=*h\023\277\370Sx\277Y\252d\277\025\357\303\276\345\232\240>\032\224[?(;|?\231g\"?\260\n\311\274J\353+\277$\023~\2771\333T\277\223\216\210\276\200\350\332>\247\tj?\013\372t?\233\365\010?\203@\026\276p\330A\277\000\000\200\277p\330A\277\203@\026\276\233\365\010?\013\372t?\247\tj?\200\350\332>\223\216\210\2761\333T\277$\023~\277J\353+\277\260\n\311\274\231g\"?(;|?\032\224[?\345\232\240>\025\357\303\276Y\252d\277\370Sx\277*h\023\2776\275\310=Bh9?\017\261\177?\022\321I?\302\305G>\']\374\276\010\tq\277\236\330n\277\352Z\361\276\023\\`>\002\237M?mN\177?\363\0045?\005\251\226=\300\177\030\277\235\307y\277\230\305a\277*D\270\276\324|\254>\005\276^?\276\024{?\321\177\035?0\373H\275\273\2050\277m\304~\277=MQ\277\314\317x\276u3\346>^\203l?G\024s?=\234\003?\242\020/\276\003\344E\277C\354\177\277\371\256=\277s\262\372\275\3329\016?\007\272v?\000\000\000\200J\353+\277m\304~\277\002\237M\277\302\305G\276=\234\003?\013\372t?\330kg?\025\357\303>\324|\254\276\230\305a\277\370Sx\277\3329\016\277\203@\026>\003\344E?\017\261\177?\363\0045?0\373H=\231g\"\277\254:}\2771\333T\277\314\317x\276\352Z\361>\010\tq?^\203l?\200\350\332>1\240\224\276\032\224[\277\276\024{\277\300\177\030\2776\275\310=\371\256=?\000\000\200?\371\256=?6\275\310=\300\177\030\277\276\024{\277\032\224[\2771\240\224\276\200\350\332>^\203l?\010\tq?\352Z\361>\314\317x\2761\333T\277\254:}\277\231g\"\2770\373H=\363\0045?\017\261\177?\003\344E?\203@\026>\3329\016\277\370Sx\277\230\305a\277\324|\254\276\025\357\303>\330kg?\013\372t?=\234\003?\302\305G\276\002\237M\277m\304~\277J\353+\277\017/\302\247J\353+?m\304~?\002\237M?\302\305G>=\234\003\277\013\372t\277\330kg\277\025\357\303\276\324|\254>\230\305a?\370Sx?\3329\016?\203@\026\276\003\344E\277\017\261\177\277\363\0045\2770\373H\275\231g\"?\254:}?1\333T?\314\317x>\352Z\361\276\010\tq\277^\203l\277\200\350\332\2761\240\224>\032\224[?\276\024{?\300\177\030?6\275\310\275\371\256=\277\000\000\200\277\371\256=\2776\275\310\275\300\177\030?\276\024{?\032\224[?1\240\224>\200\350\332\276^\203l\277\010\tq\277\352Z\361\276\314\317x>1\333T?\254:}?\231g\"?0\373H\275\363\0045\277\017\261\177\277\003\344E\277\203@\026\276\3329\016?\370Sx?\230\305a?\324|\254>\025\357\303\276\330kg\277\000\000\000\200\273\2050\277\017\261\177\277p\330A\2776\275\310\275\321\177\035?\254:}?=MQ?\302\305G>\233\365\010\277\370Sx\277\005\276^\2771\240\224\276u3\346>\010\tq?\247\tj?\025\357\303>*D\270\276\330kg\277G\024s\277\352Z\361\276\223\216\210>\032\224[?\235\307y?\3329\016?\242\020/\276\002\237M\277$\023~\277\231g\"\277\005\251\226=\371\256=?C\354\177?\363\0045?\260\n\311<J\353+\277mN\177\277\003\344E\277s\262\372\275\300\177\030?(;|?1\333T?\023\\`>=\234\003\277\007\272v\277\230\305a\277\345\232\240\276\200\350\332>\236\330n?^\203l?\312{\317>\324|\254\276Y\252d\277\013\372t\277\']\374\276\314\317x>SHX?\276\024{?*h\023?\203@\026\276\022\321I\277m\304~\277V6\'\2770\373H=Bh9?\000\000\200?Bh9?0\373H=V6\'\277m\304~\277\022\321I\277\203@\026\276*h\023?\276\024{?SHX?\314\317x>\']\374\276\013\372t\277Y\252d\277\324|\254\276\312{\317>^\203l?\236\330n?\200\350\332>\345\232\240\276\230\305a\277\007\272v\277=\234\003\277\023\\`>1\333T?(;|?\300\177\030?s\262\372\275\003\344E\277mN\177\277J\353+\277\260\n\311<\363\0045?C\354\177?\371\256=?\005\251\226=\231g\"\277$\023~\277\002\237M\277\242\020/\276\3329\016?\235\307y?\032\224[?\223\216\210>\352Z\361\276G\024s\277\330kg\277*D\270\276\025\357\303>\247\tj?\010\tq?u3\346>1\240\224\276\005\276^\277\370Sx\277\233\365\010\277\302\305G>=MQ?\000\000\000\200\363\0045\277\000\000\200\277\363\0045\27721\r\245\363\0045?\000\000\200?\363\0045?21\215%\363\0045\277\000\000\200\277\363\0045\277\312\311\323\245\363\0045?\000\000\200?\363\0045?21\r&\363\0045\277\000\000\200\277\363\0045\277~}0\246\363\0045?\000\000\200?\363\0045?\312\311S&\363\0045\277\000\000\200\277\363\0045\277\027\026w\246\363\0045?\000\000\200?\363\0045?21\215&\363\0045\277\000\000\200\277\363\0045\277X\327\236\246\363\0045?\000\000\200?\363\0045?~}\260&\363\0045\277\000\000\200\277\363\0045\277\351\210\260\247\363\0045?\000\000\200?\363\0045?\312\311\323&\363\0045\277\000\000\200\277\363\0045\277\010H\r\'\363\0045?\000\000\200?\363\0045?\027\026\367&\363\0045\277\000\000\200\277\363\0045\277\017/\302\247\363\0045?\000\000\200?\363\0045?21\r\'\363\0045\277\000\000\200\277\363\0045\277w\367\323&\363\0045?\000\000\200?\363\0045?X\327\036\'\363\0045\277\000\000\200\277\363\0045\2775\325\323\247\363\0045?\000\000\200?\363\0045?~}0\'\363\0045\277\000\000\200\277\363\0045\277\336^\215&\363\0045?\000\000\200?\363\0045?\351\2100(\363\0045\277\000\000\200\277\363\0045\277\\{\345\247\363\0045?\000\000\200?\363\0045?\312\311S\'\363\0045\277\000\000\200\277\363\0045\277\212\214\r&\363\0045?\000\000\200?\363\0045?\010H\215\247\363\0045\277\000\000\200\277\363\0045\277\202!\367\247\363\0045?\000\000\200?\363\0045?\027\026w\'\363\0045\277\000\000\200\277\363\0045\277\333\260\266!\363\0045?\000\000\200?\363\0045?\017/B(\363\0045\277\000\000\000\200Bh9\277\017\261\177\277V6\'\2776\275\310=\022\321I?\254:}?*h\023?\302\305G\276SHX\277\370Sx\277\']\374\2761\240\224>Y\252d?\010\tq?\312{\317>\025\357\303\276\236\330n\277\330kg\277\345\232\240\276\352Z\361>\007\272v?\032\224[?\023\\`>\3329\016\277(;|\277\002\237M\277s\262\372\275\231g\"?mN\177?\371\256=?\260\n\311<\363\0045\277C\354\177\277J\353+\277\005\251\226=\003\344E?$\023~?\300\177\030?\242\020/\2761\333T\277\235\307y\277=\234\003\277\223\216\210>\230\305a?G\024s?\200\350\332>*D\270\276^\203l\277\247\tj\277\324|\254\276u3\346>\013\372t?\005\276^?\314\317x>\233\365\010\277\276\024{\277=MQ\277\203@\026\276\321\177\035?m\304~?p\330A?0\373H=\273\2050\277\000\000\200\277\273\2050\2770\373H=p\330A?m\304~?\321\177\035?\203@\026\276=MQ\277\276\024{\277\233\365\010\277\314\317x>\005\276^?\013\372t?u3\346>\324|\254\276\247\tj\277^\203l\277*D\270\276\200\350\332>G\024s?\230\305a?\223\216\210>=\234\003\277\235\307y\2771\333T\277\242\020/\276\300\177\030?$\023~?\003\344E?\005\251\226=J\353+\277C\354\177\277\363\0045\277\260\n\311<\371\256=?mN\177?\231g\"?s\262\372\275\002\237M\277(;|\277\3329\016\277\023\\`>\032\224[?\007\272v?\352Z\361>\345\232\240\276\330kg\277\236\330n\277\025\357\303\276\312{\317>\010\tq?Y\252d?1\240\224>\']\374\276\370Sx\277SHX\277\302\305G\276*h\023?\000\000\000\200\371\256=\277m\304~\277\300\177\030\277\302\305G>\032\224[?\013\372t?\200\350\332>\025\357\303\276\010\tq\277\230\305a\277\314\317x\276\3329\016?\254:}?\003\344E?0\373H=\363\0045\277\017\261\177\277\231g\"\277\203@\026>1\333T?\370Sx?\352Z\361>\324|\254\276^\203l\277\330kg\2771\240\224\276=\234\003?\276\024{?\002\237M?6\275\310=J\353+\277\000\000\200\277J\353+\2776\275\310=\002\237M?\276\024{?=\234\003?1\240\224\276\330kg\277^\203l\277\324|\254\276\352Z\361>\370Sx?1\333T?\203@\026>\231g\"\277\017\261\177\277\363\0045\2770\373H=\003\344E?\254:}?\3329\016?\314\317x\276\230\305a\277\010\tq\277\025\357\303\276\200\350\332>\013\372t?\032\224[?\302\305G>\300\177\030\277m\304~\277\371\256=\277w\367\323&\371\256=?m\304~?\300\177\030?\302\305G\276\032\224[\277\013\372t\277\200\350\332\276\025\357\303>\010\tq?\230\305a?\314\317x>\3329\016\277\254:}\277\003\344E\2770\373H\275\363\0045?\017\261\177?\231g\"?\203@\026\2761\333T\277\370Sx\277\352Z\361\276\324|\254>^\203l?\330kg?1\240\224>=\234\003\277\276\024{\277\002\237M\2776\275\310\275J\353+?\000\000\200?J\353+?6\275\310\275\002\237M\277\276\024{\277=\234\003\2771\240\224>\330kg?^\203l?\324|\254>\352Z\361\276\370Sx\2771\333T\277\203@\026\276\231g\"?\017\261\177?\363\0045?0\373H\275\003\344E\277\254:}\277\3329\016\277\314\317x>\230\305a?\010\tq?\025\357\303>\200\350\332\276\000\000\000\200p\330A\277\254:}\277\233\365\010\2771\240\224>\247\tj?\330kg?\223\216\210>\3329\016\277$\023~\277\371\256=\277\260\n\311<\003\344E?(;|?=\234\003?\345\232\240\276^\203l\277Y\252d\277\314\317x\276*h\023?m\304~?Bh9?0\373H\275\022\321I\277\276\024{\277\']\374\276\324|\254>\236\330n?\230\305a?\023\\`>\300\177\030\277mN\177\277\363\0045\277\005\251\226=\002\237M?\235\307y?\352Z\361>*D\270\276\010\tq\277\005\276^\277\302\305G\276\321\177\035?\017\261\177?\273\2050?6\275\310\275=MQ\277\370Sx\277u3\346\276\025\357\303>G\024s?\032\224[?\242\020/>\231g\"\277C\354\177\277J\353+\277s\262\372=1\333T?\007\272v?\200\350\332>\312{\317\276\013\372t\277SHX\277\203@\026\276V6\'?\000\000\200?V6\'?\203@\026\276SHX\277\013\372t\277\312{\317\276\200\350\332>\007\272v?1\333T?s\262\372=J\353+\277C\354\177\277\231g\"\277\242\020/>\032\224[?G\024s?\025\357\303>u3\346\276\370Sx\277=MQ\2776\275\310\275\273\2050?\017\261\177?\321\177\035?\302\305G\276\005\276^\277\010\tq\277*D\270\276\352Z\361>\235\307y?\002\237M?\005\251\226=\363\0045\277mN\177\277\300\177\030\277\023\\`>\230\305a?\236\330n?\324|\254>\']\374\276\276\024{\277\022\321I\2770\373H\275Bh9?m\304~?*h\023?\314\317x\276Y\252d\277^\203l\277\345\232\240\276=\234\003?(;|?\003\344E?\260\n\311<\371\256=\277$\023~\277\3329\016\277\223\216\210>\000\000\000\200\003\344E\277\276\024{\277\352Z\361\276\025\357\303>\013\372t?1\333T?6\275\310=\363\0045\277m\304~\277\3329\016\2771\240\224>^\203l?\230\305a?\302\305G>\231g\"\277\000\000\200\277\231g\"\277\302\305G>\230\305a?^\203l?1\240\224>\3329\016\277m\304~\277\363\0045\2776\275\310=1\333T?\013\372t?\025\357\303>\352Z\361\276\276\024{\277\003\344E\277X\327\236\246\003\344E?\276\024{?\352Z\361>\025\357\303\276\013\372t\2771\333T\2776\275\310\275\363\0045?m\304~?\3329\016?1\240\224\276^\203l\277\230\305a\277\302\305G\276\231g\"?\000\000\200?\231g\"?\302\305G\276\230\305a\277^\203l\2771\240\224\276\3329\016?m\304~?\363\0045?6\275\310\2751\333T\277\013\372t\277\025\357\303\276\352Z\361>\276\024{?\003\344E?X\327\036\'\003\344E\277\276\024{\277\352Z\361\276\025\357\303>\013\372t?1\333T?6\275\310=\363\0045\277m\304~\277\3329\016\2771\240\224>^\203l?\230\305a?\302\305G>\231g\"\277\000\000\200\277\231g\"\277\302\305G>\230\305a?^\203l?1\240\224>\3329\016\277m\304~\277\363\0045\2776\275\310=1\333T?\013\372t?\025\357\303>\352Z\361\276\276\024{\277\003\344E\277\202!\367\247\003\344E?\276\024{?\352Z\361>\025\357\303\276\013\372t\2771\333T\2776\275\310\275\363\0045?m\304~?\3329\016?1\240\224\276^\203l\277\230\305a\277\302\305G\276\231g\"?\000\000\200?\231g\"?\302\305G\276\230\305a\277^\203l\2771\240\224\276\3329\016?m\304~?\363\0045?6\275\310\275\000\000\000\200\022\321I\277\370Sx\277\312{\317\276\352Z\361>(;|?\371\256=?\005\251\226\2751\333T\277G\024s\277\324|\254\276\233\365\010?m\304~?\273\2050?\203@\026\276\005\276^\277^\203l\277\223\216\210\276\300\177\030?C\354\177?\231g\"?\023\\`\276\330kg\277Y\252d\277\302\305G\276V6\'?\017\261\177?*h\023?1\240\224\276\236\330n\277\032\224[\277s\262\372\275\363\0045?$\023~?=\234\003?*D\270\276\013\372t\277=MQ\2770\373H\275p\330A?\276\024{?u3\346>\200\350\332\276\235\307y\277\003\344E\277\260\n\311<\002\237M?\007\272v?\025\357\303>\']\374\276\254:}\277Bh9\2776\275\310=SHX?\010\tq?\345\232\240>\3329\016\277mN\177\277J\353+\277\242\020/>\230\305a?\247\tj?\314\317x>\321\177\035\277\000\000\200\277\321\177\035\277\314\317x>\247\tj?\230\305a?\242\020/>J\353+\277mN\177\277\3329\016\277\345\232\240>\010\tq?SHX?6\275\310=Bh9\277\254:}\277\']\374\276\025\357\303>\007\272v?\002\237M?\260\n\311<\003\344E\277\235\307y\277\200\350\332\276u3\346>\276\024{?p\330A?0\373H\275=MQ\277\013\372t\277*D\270\276=\234\003?$\023~?\363\0045?s\262\372\275\032\224[\277\236\330n\2771\240\224\276*h\023?\017\261\177?V6\'?\302\305G\276Y\252d\277\330kg\277\023\\`\276\231g\"?C\354\177?\300\177\030?\223\216\210\276^\203l\277\005\276^\277\203@\026\276\273\2050?m\304~?\233\365\010?\324|\254\276G\024s\2771\333T\277\005\251\226\275\000\000\000\200\002\237M\277\013\372t\277\324|\254\276\3329\016?\017\261\177?\231g\"?\314\317x\276^\203l\277\032\224[\2776\275\310\275\371\256=?\276\024{?\200\350\332>\352Z\361\276\254:}\277\363\0045\277\203@\026>\230\305a?\330kg?\302\305G>J\353+\277m\304~\277=\234\003\277\025\357\303>\370Sx?\003\344E?0\373H\2751\333T\277\010\tq\2771\240\224\276\300\177\030?\000\000\200?\300\177\030?1\240\224\276\010\tq\2771\333T\2770\373H\275\003\344E?\370Sx?\025\357\303>=\234\003\277m\304~\277J\353+\277\302\305G>\330kg?\230\305a?\203@\026>\363\0045\277\254:}\277\352Z\361\276\200\350\332>\276\024{?\371\256=?6\275\310\275\032\224[\277^\203l\277\314\317x\276\231g\"?\017\261\177?\3329\016?\324|\254\276\013\372t\277\002\237M\2775\325\323\247\002\237M?\013\372t?\324|\254>\3329\016\277\017\261\177\277\231g\"\277\314\317x>^\203l?\032\224[?6\275\310=\371\256=\277\276\024{\277\200\350\332\276\352Z\361>\254:}?\363\0045?\203@\026\276\230\305a\277\330kg\277\302\305G\276J\353+?m\304~?=\234\003?\025\357\303\276\370Sx\277\003\344E\2770\373H=1\333T?\010\tq?1\240\224>\300\177\030\277\000\000\200\277\300\177\030\2771\240\224>\010\tq?1\333T?0\373H=\003\344E\277\370Sx\277\025\357\303\276=\234\003?m\304~?J\353+?\302\305G\276\330kg\277\230\305a\277\203@\026\276\363\0045?\254:}?\352Z\361>\200\350\332\276\276\024{\277\371\256=\2776\275\310=\032\224[?^\203l?\314\317x>\000\000\000\200=MQ\277\010\tq\277\223\216\210\276\231g\"?mN\177?=\234\003?\312{\317\276\276\024{\277Bh9\277\203@\026>Y\252d?\230\305a?s\262\372=\371\256=\277\235\307y\277\025\357\303\276\233\365\010?\017\261\177?\321\177\035?1\240\224\276G\024s\277\002\237M\277\260\n\311<1\333T?\236\330n?\314\317x>V6\'\277m\304~\277\']\374\276\200\350\332>(;|?\363\0045?\242\020/\276\330kg\277\005\276^\2776\275\310\275p\330A?\370Sx?*D\270>\3329\016\277C\354\177\277\300\177\030\277\345\232\240>\013\372t?\022\321I?0\373H\275SHX\277^\203l\277\023\\`\276J\353+?$\023~?\352Z\361>u3\346\276\254:}\277\273\2050\277\302\305G>\247\tj?\032\224[?\005\251\226=\003\344E\277\007\272v\277\324|\254\276*h\023?\000\000\200?*h\023?\324|\254\276\007\272v\277\003\344E\277\005\251\226=\032\224[?\247\tj?\302\305G>\273\2050\277\254:}\277u3\346\276\352Z\361>$\023~?J\353+?\023\\`\276^\203l\277SHX\2770\373H\275\022\321I?\013\372t?\345\232\240>\300\177\030\277C\354\177\277\3329\016\277*D\270>\370Sx?p\330A?6\275\310\275\005\276^\277\330kg\277\242\020/\276\363\0045?(;|?\200\350\332>\']\374\276m\304~\277V6\'\277\314\317x>\236\330n?1\333T?\260\n\311<\002\237M\277G\024s\2771\240\224\276\321\177\035?\017\261\177?\233\365\010?\025\357\303\276\235\307y\277\371\256=\277s\262\372=\230\305a?Y\252d?\203@\026>Bh9\277\276\024{\277\312{\317\276\000\000\000\2001\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277~}0\2461\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?~}\260&1\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277\017/\302\2471\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?~}0\'1\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277\212\214\r&1\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\025\357\303\276\276\024{\277\363\0045\277\302\305G>^\203l?1\333T?\017/B(1\333T\277^\203l\277\302\305G\276\363\0045?\276\024{?\025\357\303>\3329\016\277\000\000\200\277\3329\016\277\025\357\303>\276\024{?\363\0045?\302\305G\276^\203l\2771\333T\277\3476\r\2501\333T?^\203l?\302\305G>\363\0045\277\276\024{\277\025\357\303\276\3329\016?\000\000\200?\3329\016?\000\000\000\200SHX\277\330kg\277s\262\372\275\003\344E?G\024s?\314\317x>\273\2050\277\276\024{\277*D\270\276\300\177\030?mN\177?\352Z\361>\']\374\276\017\261\177\277*h\023\277\025\357\303>(;|?J\353+?\223\216\210\276\013\372t\277p\330A\277\203@\026>\247\tj?1\333T?\260\n\311\274\032\224[\277Y\252d\2776\275\310\275\022\321I?\010\tq?\023\\`>\363\0045\277\235\307y\277\324|\254\276\321\177\035?m\304~?u3\346>=\234\003\277C\354\177\277\3329\016\277\312{\317>\254:}?V6\'?1\240\224\276\007\272v\277\371\256=\277\242\020/>^\203l?=MQ?0\373H\275\005\276^\277\230\305a\277\005\251\226\275\002\237M?\236\330n?\302\305G>Bh9\277\370Sx\277\345\232\240\276\231g\"?$\023~?\200\350\332>\233\365\010\277\000\000\200\277\233\365\010\277\200\350\332>$\023~?\231g\"?\345\232\240\276\370Sx\277Bh9\277\302\305G>\236\330n?\002\237M?\005\251\226\275\230\305a\277\005\276^\2770\373H\275=MQ?^\203l?\242\020/>\371\256=\277\007\272v\2771\240\224\276V6\'?\254:}?\312{\317>\3329\016\277C\354\177\277=\234\003\277u3\346>m\304~?\321\177\035?\324|\254\276\235\307y\277\363\0045\277\023\\`>\010\tq?\022\321I?6\275\310\275Y\252d\277\032\224[\277\260\n\311\2741\333T?\247\tj?\203@\026>p\330A\277\013\372t\277\223\216\210\276J\353+?(;|?\025\357\303>*h\023\277\017\261\177\277\']\374\276\352Z\361>mN\177?\300\177\030?*D\270\276\276\024{\277\273\2050\277\000\000\000\200\032\224[\277\230\305a\2770\373H\2751\333T?\330kg?6\275\310=\002\237M\277^\203l\277\203@\026\276\003\344E?\010\tq?\302\305G>\371\256=\277\013\372t\277\314\317x\276\363\0045?\370Sx?1\240\224>J\353+\277\276\024{\277\324|\254\276\231g\"?\254:}?\025\357\303>\300\177\030\277m\304~\277\200\350\332\276\3329\016?\017\261\177?\352Z\361>=\234\003\277\000\000\200\277=\234\003\277\352Z\361>\017\261\177?\3329\016?\200\350\332\276m\304~\277\300\177\030\277\025\357\303>\254:}?\231g\"?\324|\254\276\276\024{\277J\353+\2771\240\224>\370Sx?\363\0045?\314\317x\276\013\372t\277\371\256=\277\302\305G>\010\tq?\003\344E?\203@\026\276^\203l\277\002\237M\2776\275\310=\330kg?1\333T?0\373H\275\230\305a\277\032\224[\277\336^\215&\032\224[?\230\305a?0\373H=1\333T\277\330kg\2776\275\310\275\002\237M?^\203l?\203@\026>\003\344E\277\010\tq\277\302\305G\276\371\256=?\013\372t?\314\317x>\363\0045\277\370Sx\2771\240\224\276J\353+?\276\024{?\324|\254>\231g\"\277\254:}\277\025\357\303\276\300\177\030?m\304~?\200\350\332>\3329\016\277\017\261\177\277\352Z\361\276=\234\003?\000\000\200?=\234\003?\352Z\361\276\017\261\177\277\3329\016\277\200\350\332>m\304~?\300\177\030?\025\357\303\276\254:}\277\231g\"\277\324|\254>\276\024{?J\353+?1\240\224\276\370Sx\277\363\0045\277\314\317x>\013\372t?\371\256=?\302\305G\276\010\tq\277\003\344E\277\203@\026>^\203l?\002\237M?\000\000\000\200\005\276^\277\032\224[\277\260\n\311<\230\305a?SHX?0\373H\275Y\252d\2771\333T\277\005\251\226=\330kg?=MQ?6\275\310\275\247\tj\277\002\237M\277s\262\372=^\203l?\022\321I?\203@\026\276\236\330n\277\003\344E\277\242\020/>\010\tq?p\330A?\302\305G\276G\024s\277\371\256=\277\023\\`>\013\372t?Bh9?\314\317x\276\007\272v\277\363\0045\277\223\216\210>\370Sx?\273\2050?1\240\224\276\235\307y\277J\353+\277\345\232\240>\276\024{?V6\'?\324|\254\276(;|\277\231g\"\277*D\270>\254:}?\321\177\035?\025\357\303\276$\023~\277\300\177\030\277\312{\317>m\304~?*h\023?\200\350\332\276mN\177\277\3329\016\277u3\346>\017\261\177?\233\365\010?\352Z\361\276C\354\177\277=\234\003\277\']\374>\000\000\200?\']\374>=\234\003\277C\354\177\277\352Z\361\276\233\365\010?\017\261\177?u3\346>\3329\016\277mN\177\277\200\350\332\276*h\023?m\304~?\312{\317>\300\177\030\277$\023~\277\025\357\303\276\321\177\035?\254:}?*D\270>\231g\"\277(;|\277\324|\254\276V6\'?\276\024{?\345\232\240>J\353+\277\235\307y\2771\240\224\276\273\2050?\370Sx?\223\216\210>\363\0045\277\007\272v\277\314\317x\276Bh9?\013\372t?\023\\`>\371\256=\277G\024s\277\302\305G\276p\330A?\010\tq?\242\020/>\003\344E\277\236\330n\277\203@\026\276\022\321I?^\203l?s\262\372=\002\237M\277\247\tj\2776\275\310\275=MQ?\330kg?\005\251\226=1\333T\277Y\252d\277\000\000\000\200\230\305a\2771\333T\2776\275\310=^\203l?\003\344E?\302\305G\276\013\372t\277\363\0045\2771\240\224>\276\024{?\231g\"?\025\357\303\276m\304~\277\3329\016\277\352Z\361>\000\000\200?\352Z\361>\3329\016\277m\304~\277\025\357\303\276\231g\"?\276\024{?1\240\224>\363\0045\277\013\372t\277\302\305G\276\003\344E?^\203l?6\275\310=1\333T\277\230\305a\277\351\210\260\247\230\305a?1\333T?6\275\310\275^\203l\277\003\344E\277\302\305G>\013\372t?\363\0045?1\240\224\276\276\024{\277\231g\"\277\025\357\303>m\304~?\3329\016?\352Z\361\276\000\000\200\277\352Z\361\276\3329\016?m\304~?\025\357\303>\231g\"\277\276\024{\2771\240\224\276\363\0045?\013\372t?\302\305G>\003\344E\277^\203l\2776\275\310\2751\333T?\230\305a?\351\2100(\230\305a\2771\333T\2776\275\310=^\203l?\003\344E?\302\305G\276\013\372t\277\363\0045\2771\240\224>\276\024{?\231g\"?\025\357\303\276m\304~\277\3329\016\277\352Z\361>\000\000\200?\352Z\361>\3329\016\277m\304~\277\025\357\303\276\231g\"?\276\024{?1\240\224>\363\0045\277\013\372t\277\302\305G\276\003\344E?^\203l?6\275\310=1\333T\277\230\305a\277\331\325\014\246\230\305a?1\333T?6\275\310\275^\203l\277\003\344E\277\302\305G>\013\372t?\363\0045?1\240\224\276\276\024{\277\231g\"\277\025\357\303>m\304~?\3329\016?\352Z\361\276\000\000\200\277\352Z\361\276\3329\016?m\304~?\025\357\303>\231g\"\277\276\024{\2771\240\224\276\363\0045?\013\372t?\000\000\000\200Y\252d\277\002\237M\277\242\020/>\013\372t?\273\2050?\324|\254\276$\023~\277\3329\016\277\']\374>\017\261\177?\312{\317>\231g\"\277\235\307y\277\314\317x\276p\330A?^\203l?\005\251\226=\032\224[\277SHX\2776\275\310=\236\330n?\371\256=?\223\216\210\276\276\024{\277\321\177\035\277\200\350\332>C\354\177?\352Z\361>*h\023\277\254:}\277\345\232\240\276\363\0045?G\024s?\203@\026>=MQ\277\230\305a\277\260\n\311<\330kg?\022\321I?\302\305G\276\007\272v\277J\353+\277*D\270>m\304~?\233\365\010?=\234\003\277mN\177\277\025\357\303\276V6\'?\370Sx?\023\\`>\003\344E\277\247\tj\2770\373H\275\005\276^?1\333T?s\262\372\275\010\tq\277Bh9\2771\240\224>(;|?\300\177\030?u3\346\276\000\000\200\277u3\346\276\300\177\030?(;|?1\240\224>Bh9\277\010\tq\277s\262\372\2751\333T?\005\276^?0\373H\275\247\tj\277\003\344E\277\023\\`>\370Sx?V6\'?\025\357\303\276mN\177\277=\234\003\277\233\365\010?m\304~?*D\270>J\353+\277\007\272v\277\302\305G\276\022\321I?\330kg?\260\n\311<\230\305a\277=MQ\277\203@\026>G\024s?\363\0045?\345\232\240\276\254:}\277*h\023\277\352Z\361>C\354\177?\200\350\332>\321\177\035\277\276\024{\277\223\216\210\276\371\256=?\236\330n?6\275\310=SHX\277\032\224[\277\005\251\226=^\203l?p\330A?\314\317x\276\235\307y\277\231g\"\277\312{\317>\017\261\177?\']\374>\3329\016\277$\023~\277\000\000\000\200\330kg\277\003\344E\277\314\317x>\276\024{?\300\177\030?\352Z\361\276\017\261\177\277\025\357\303\276J\353+?\013\372t?\203@\026>1\333T\277\032\224[\2776\275\310=\010\tq?\363\0045?\324|\254\276m\304~\277=\234\003\277\3329\016?\254:}?1\240\224>\371\256=\277^\203l\2770\373H\275\230\305a?\002\237M?\302\305G\276\370Sx\277\231g\"\277\200\350\332>\000\000\200?\200\350\332>\231g\"\277\370Sx\277\302\305G\276\002\237M?\230\305a?0\373H\275^\203l\277\371\256=\2771\240\224>\254:}?\3329\016?=\234\003\277m\304~\277\324|\254\276\363\0045?\010\tq?6\275\310=\032\224[\2771\333T\277\203@\026>\013\372t?J\353+?\025\357\303\276\017\261\177\277\352Z\361\276\300\177\030?\276\024{?\314\317x>\003\344E\277\330kg\277\\{\345\247\330kg?\003\344E?\314\317x\276\276\024{\277\300\177\030\277\352Z\361>\017\261\177?\025\357\303>J\353+\277\013\372t\277\203@\026\2761\333T?\032\224[?6\275\310\275\010\tq\277\363\0045\277\324|\254>m\304~?=\234\003?\3329\016\277\254:}\2771\240\224\276\371\256=?^\203l?0\373H=\230\305a\277\002\237M\277\302\305G>\370Sx?\231g\"?\200\350\332\276\000\000\200\277\200\350\332\276\231g\"?\370Sx?\302\305G>\002\237M\277\230\305a\2770\373H=^\203l?\371\256=?1\240\224\276\254:}\277\3329\016\277=\234\003?m\304~?\324|\254>\363\0045\277\010\tq\2776\275\310\275\032\224[?1\333T?\203@\026\276\013\372t\277J\353+\277\025\357\303>\017\261\177?\000\000\000\200\247\tj\277\371\256=\277\345\232\240>m\304~?\']\374>\300\177\030\277\235\307y\277\302\305G\276=MQ?\032\224[?s\262\372\275\013\372t\277V6\'\277\200\350\332>C\354\177?\025\357\303>\273\2050\277\010\tq\277\005\251\226\275\230\305a?\022\321I?\314\317x\276(;|\277\3329\016\277\233\365\010?\254:}?\223\216\210>\003\344E\277Y\252d\2770\373H=\236\330n?\363\0045?*D\270\276\017\261\177\277u3\346\276\231g\"?\007\272v?\203@\026>SHX\2771\333T\277\242\020/>\370Sx?\321\177\035?\352Z\361\276mN\177\277\324|\254\276Bh9?^\203l?\260\n\311<\330kg\277p\330A\2771\240\224>$\023~?=\234\003?*h\023\277\276\024{\277\023\\`\276\002\237M?\005\276^?6\275\310\275G\024s\277J\353+\277\312{\317>\000\000\200?\312{\317>J\353+\277G\024s\2776\275\310\275\005\276^?\002\237M?\023\\`\276\276\024{\277*h\023\277=\234\003?$\023~?1\240\224>p\330A\277\330kg\277\260\n\311<^\203l?Bh9?\324|\254\276mN\177\277\352Z\361\276\321\177\035?\370Sx?\242\020/>1\333T\277SHX\277\203@\026>\007\272v?\231g\"?u3\346\276\017\261\177\277*D\270\276\363\0045?\236\330n?0\373H=Y\252d\277\003\344E\277\223\216\210>\254:}?\233\365\010?\3329\016\277(;|\277\314\317x\276\022\321I?\230\305a?\005\251\226\275\010\tq\277\273\2050\277\025\357\303>C\354\177?\200\350\332>V6\'\277\013\372t\277s\262\372\275\032\224[?=MQ?\302\305G\276\235\307y\277\000\000\000\200^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\312\311\323\245^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\312\311S&^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277X\327\236\246^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\312\311\323&^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\017/\302\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?X\327\036\'^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\336^\215&^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\312\311S\'^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\202!\367\247^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\017/B(^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\331\325\014\246^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?X\327\236\'^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277\372\t\026\250^\203l?\363\0045?\025\357\303\276\000\000\200\277\025\357\303\276\363\0045?^\203l?\336^\r\247^\203l\277\363\0045\277\025\357\303>\000\000\200?\025\357\303>\363\0045\277^\203l\277[\032\r\247^\203l?\000\000\000\200\236\330n\277J\353+\277u3\346>m\304~?\223\216\210>\002\237M\277SHX\277\302\305G>(;|?=\234\003?\321\177\035\277\013\372t\277\005\251\226\275\330kg?Bh9?\025\357\303\276C\354\177\277\324|\254\276p\330A?\230\305a?s\262\372\275\370Sx\277*h\023\277\3329\016?\235\307y?\203@\026>\005\276^\277\003\344E\277\345\232\240>\017\261\177?\312{\317>\363\0045\277\247\tj\2770\373H=G\024s?\231g\"?\']\374\276\254:}\277\023\\`\2761\333T?=MQ?\314\317x\276$\023~\277\352Z\361\276V6\'?\010\tq?\260\n\311<^\203l\277\273\2050\277\200\350\332>mN\177?1\240\224>\022\321I\277\032\224[\277\242\020/>\276\024{?\233\365\010?\300\177\030\277\007\272v\2776\275\310\275Y\252d?\371\256=?*D\270\276\000\000\200\277*D\270\276\371\256=?Y\252d?6\275\310\275\007\272v\277\300\177\030\277\233\365\010?\276\024{?\242\020/>\032\224[\277\022\321I\2771\240\224>mN\177?\200\350\332>\273\2050\277^\203l\277\260\n\311<\010\tq?V6\'?\352Z\361\276$\023~\277\314\317x\276=MQ?1\333T?\023\\`\276\254:}\277\']\374\276\231g\"?G\024s?0\373H=\247\tj\277\363\0045\277\312{\317>\017\261\177?\345\232\240>\003\344E\277\005\276^\277\203@\026>\235\307y?\3329\016?*h\023\277\370Sx\277s\262\372\275\230\305a?p\330A?\324|\254\276C\354\177\277\025\357\303\276Bh9?\330kg?\005\251\226\275\013\372t\277\321\177\035\277=\234\003?(;|?\302\305G>SHX\277\000\000\000\200\010\tq\277\231g\"\277=\234\003?\276\024{?\203@\026>\230\305a\277\371\256=\277\025\357\303>\017\261\177?1\240\224>\002\237M\2771\333T\277\314\317x>m\304~?\200\350\332>\363\0045\277\330kg\2776\275\310=\370Sx?\3329\016?\300\177\030\277\013\372t\2770\373H\275^\203l?J\353+?\352Z\361\276\254:}\277\302\305G\276\032\224[?\003\344E?\324|\254\276\000\000\200\277\324|\254\276\003\344E?\032\224[?\302\305G\276\254:}\277\352Z\361\276J\353+?^\203l?0\373H\275\013\372t\277\300\177\030\277\3329\016?\370Sx?6\275\310=\330kg\277\363\0045\277\200\350\332>m\304~?\314\317x>1\333T\277\002\237M\2771\240\224>\017\261\177?\025\357\303>\371\256=\277\230\305a\277\203@\026>\276\024{?=\234\003?\231g\"\277\010\tq\277\212\214\r&\010\tq?\231g\"?=\234\003\277\276\024{\277\203@\026\276\230\305a?\371\256=?\025\357\303\276\017\261\177\2771\240\224\276\002\237M?1\333T?\314\317x\276m\304~\277\200\350\332\276\363\0045?\330kg?6\275\310\275\370Sx\277\3329\016\277\300\177\030?\013\372t?0\373H=^\203l\277J\353+\277\352Z\361>\254:}?\302\305G>\032\224[\277\003\344E\277\324|\254>\000\000\200?\324|\254>\003\344E\277\032\224[\277\302\305G>\254:}?\352Z\361>J\353+\277^\203l\2770\373H=\013\372t?\300\177\030?\3329\016\277\370Sx\2776\275\310\275\330kg?\363\0045?\200\350\332\276m\304~\277\314\317x\2761\333T?\002\237M?1\240\224\276\017\261\177\277\025\357\303\276\371\256=?\000\000\000\200G\024s\277\300\177\030\277*h\023?\013\372t?\260\n\311<\010\tq\277\321\177\035\277\3329\016?\007\272v?0\373H=\236\330n\277\231g\"\277\233\365\010?\370Sx?\005\251\226=^\203l\277V6\'\277=\234\003?\235\307y?6\275\310=\247\tj\277J\353+\277\']\374>\276\024{?s\262\372=\330kg\277\273\2050\277\352Z\361>(;|?\203@\026>Y\252d\277\363\0045\277u3\346>\254:}?\242\020/>\230\305a\277Bh9\277\200\350\332>$\023~?\302\305G>\005\276^\277\371\256=\277\312{\317>m\304~?\023\\`>\032\224[\277p\330A\277\025\357\303>mN\177?\314\317x>SHX\277\003\344E\277*D\270>\017\261\177?\223\216\210>1\333T\277\022\321I\277\324|\254>C\354\177?1\240\224>=MQ\277\002\237M\277\345\232\240>\000\000\200?\345\232\240>\002\237M\277=MQ\2771\240\224>C\354\177?\324|\254>\022\321I\2771\333T\277\223\216\210>\017\261\177?*D\270>\003\344E\277SHX\277\314\317x>mN\177?\025\357\303>p\330A\277\032\224[\277\023\\`>m\304~?\312{\317>\371\256=\277\005\276^\277\302\305G>$\023~?\200\350\332>Bh9\277\230\305a\277\242\020/>\254:}?u3\346>\363\0045\277Y\252d\277\203@\026>(;|?\352Z\361>\273\2050\277\330kg\277s\262\372=\276\024{?\']\374>J\353+\277\247\tj\2776\275\310=\235\307y?=\234\003?V6\'\277^\203l\277\005\251\226=\370Sx?\233\365\010?\231g\"\277\236\330n\2770\373H=\007\272v?\3329\016?\321\177\035\277\000\000\000\200\013\372t\277\3329\016\277\231g\"?^\203l?6\275\310\275\276\024{\277\352Z\361\276\363\0045?\230\305a?\302\305G\276m\304~\277\025\357\303\276\003\344E?1\333T?1\240\224\276\000\000\200\2771\240\224\2761\333T?\003\344E?\025\357\303\276m\304~\277\302\305G\276\230\305a?\363\0045?\352Z\361\276\276\024{\2776\275\310\275^\203l?\231g\"?\3329\016\277\013\372t\277\010H\r\'\013\372t?\3329\016?\231g\"\277^\203l\2776\275\310=\276\024{?\352Z\361>\363\0045\277\230\305a\277\302\305G>m\304~?\025\357\303>\003\344E\2771\333T\2771\240\224>\000\000\200?1\240\224>1\333T\277\003\344E\277\025\357\303>m\304~?\302\305G>\230\305a\277\363\0045\277\352Z\361>\276\024{?6\275\310=^\203l\277\231g\"\277\3329\016?\013\372t?\010H\215\247\013\372t\277\3329\016\277\231g\"?^\203l?6\275\310\275\276\024{\277\352Z\361\276\363\0045?\230\305a?\302\305G\276m\304~\277\025\357\303\276\003\344E?1\333T?1\240\224\276\000\000\200\2771\240\224\2761\333T?\003\344E?\025\357\303\276m\304~\277\302\305G\276\230\305a?\363\0045?\352Z\361\276\276\024{\2776\275\310\275^\203l?\231g\"?\3329\016\277\013\372t\277\372\t\026\250\013\372t?\3329\016?\231g\"\277^\203l\2776\275\310=\276\024{?\352Z\361>\363\0045\277\230\305a\277\302\305G>m\304~?\025\357\303>\003\344E\2771\333T\2771\240\224>\000\000\200?1\240\224>1\333T\277\003\344E\277\025\357\303>m\304~?\302\305G>\230\305a\277\363\0045\277\352Z\361>\000\000\000\200\007\272v\277=\234\003\277\273\2050?\230\305a?\023\\`\276\017\261\177\277\345\232\240\2761\333T?p\330A?\200\350\332\276(;|\2776\275\310\275\236\330n?\300\177\030?\321\177\035\277^\203l\277s\262\372=\254:}?\312{\317>\003\344E\277=MQ\277\324|\254>mN\177?\302\305G>Y\252d\277J\353+\277\233\365\010?\013\372t?\260\n\311\274\370Sx\277\']\374\276\363\0045?\005\276^?\314\317x\276C\354\177\2771\240\224\276SHX?\371\256=?u3\346\276\276\024{\277\005\251\226\275\010\tq?*h\023?\231g\"\277\247\tj\277\203@\026>$\023~?\025\357\303>\022\321I\277\002\237M\277*D\270>m\304~?\242\020/>\330kg\277V6\'\277\3329\016?G\024s?0\373H\275\235\307y\277\352Z\361\276Bh9?\032\224[?\223\216\210\276\000\000\200\277\223\216\210\276\032\224[?Bh9?\352Z\361\276\235\307y\2770\373H\275G\024s?\3329\016?V6\'\277\330kg\277\242\020/>m\304~?*D\270>\002\237M\277\022\321I\277\025\357\303>$\023~?\203@\026>\247\tj\277\231g\"\277*h\023?\010\tq?\005\251\226\275\276\024{\277u3\346\276\371\256=?SHX?1\240\224\276C\354\177\277\314\317x\276\005\276^?\363\0045?\']\374\276\370Sx\277\260\n\311\274\013\372t?\233\365\010?J\353+\277Y\252d\277\302\305G>mN\177?\324|\254>=MQ\277\003\344E\277\312{\317>\254:}?s\262\372=^\203l\277\321\177\035\277\300\177\030?\236\330n?6\275\310\275(;|\277\200\350\332\276p\330A?1\333T?\345\232\240\276\000\000\000\200\370Sx\277\352Z\361\276\371\256=?1\333T?\324|\254\276m\304~\277\203@\026\276^\203l?\300\177\030?\231g\"\277\330kg\277\302\305G>\017\261\177?1\240\224>\032\224[\277\363\0045\277=\234\003?\013\372t?0\373H\275\276\024{\277\200\350\332\276\003\344E?\002\237M?\025\357\303\276\254:}\2776\275\310\275\010\tq?\3329\016?J\353+\277\230\305a\277\314\317x>\000\000\200?\314\317x>\230\305a\277J\353+\277\3329\016?\010\tq?6\275\310\275\254:}\277\025\357\303\276\002\237M?\003\344E?\200\350\332\276\276\024{\2770\373H\275\013\372t?=\234\003?\363\0045\277\032\224[\2771\240\224>\017\261\177?\302\305G>\330kg\277\231g\"\277\300\177\030?^\203l?\203@\026\276m\304~\277\324|\254\2761\333T?\371\256=?\352Z\361\276\370Sx\277\202!\367\247\370Sx?\352Z\361>\371\256=\2771\333T\277\324|\254>m\304~?\203@\026>^\203l\277\300\177\030\277\231g\"?\330kg?\302\305G\276\017\261\177\2771\240\224\276\032\224[?\363\0045?=\234\003\277\013\372t\2770\373H=\276\024{?\200\350\332>\003\344E\277\002\237M\277\025\357\303>\254:}?6\275\310=\010\tq\277\3329\016\277J\353+?\230\305a?\314\317x\276\000\000\200\277\314\317x\276\230\305a?J\353+?\3329\016\277\010\tq\2776\275\310=\254:}?\025\357\303>\002\237M\277\003\344E\277\200\350\332>\276\024{?0\373H=\013\372t\277=\234\003\277\363\0045?\032\224[?1\240\224\276\017\261\177\277\302\305G\276\330kg?\231g\"?\300\177\030\277^\203l\277\203@\026>\000\000\000\200\235\307y\277\200\350\332\276\022\321I?\003\344E?u3\346\276\370Sx\277\260\n\311<\276\024{?\312{\317>\002\237M\277p\330A\277\352Z\361>\007\272v?0\373H\275(;|\277\025\357\303\276=MQ?\371\256=?\']\374\276\013\372t\277\005\251\226=\254:}?*D\270>1\333T\277Bh9\277=\234\003?G\024s?6\275\310\275$\023~\277\324|\254\276SHX?\363\0045?\233\365\010\277\010\tq\277s\262\372=m\304~?\345\232\240>\032\224[\277\273\2050\277\3329\016?\236\330n?\203@\026\276mN\177\2771\240\224\276\005\276^?J\353+?*h\023\277^\203l\277\242\020/>\017\261\177?\223\216\210>\230\305a\277V6\'\277\300\177\030?\247\tj?\302\305G\276C\354\177\277\314\317x\276Y\252d?\231g\"?\321\177\035\277\330kg\277\023\\`>\000\000\200?\023\\`>\330kg\277\321\177\035\277\231g\"?Y\252d?\314\317x\276C\354\177\277\302\305G\276\247\tj?\300\177\030?V6\'\277\230\305a\277\223\216\210>\017\261\177?\242\020/>^\203l\277*h\023\277J\353+?\005\276^?1\240\224\276mN\177\277\203@\026\276\236\330n?\3329\016?\273\2050\277\032\224[\277\345\232\240>m\304~?s\262\372=\010\tq\277\233\365\010\277\363\0045?SHX?\324|\254\276$\023~\2776\275\310\275G\024s?=\234\003?Bh9\2771\333T\277*D\270>\254:}?\005\251\226=\013\372t\277\']\374\276\371\256=?=MQ?\025\357\303\276(;|\2770\373H\275\007\272v?\352Z\361>p\330A\277\002\237M\277\312{\317>\276\024{?\260\n\311<\000\000\000\200\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\027\026w\246\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?\027\026\367&\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\336^\215&\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?\027\026w\'\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\3476\r\250\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276^\203l?\3329\016?\363\0045\2771\333T\277\025\357\303>\276\024{?\336^\r\247\276\024{\277\025\357\303\2761\333T?\363\0045?\3329\016\277^\203l\277\302\305G>\000\000\200?\302\305G>^\203l\277\3329\016\277\363\0045?1\333T?\025\357\303\276\276\024{\277\325\014\226\250\276\024{?\025\357\303>1\333T\277\363\0045\277\3329\016?^\203l?\302\305G\276\000\000\200\277\302\305G\276\000\000\000\200(;|\277\324|\254\276\005\276^?\231g\"?V6\'\277\032\224[\277*D\270>\276\024{?\260\n\311\274\254:}\277\345\232\240\276\230\305a?\321\177\035?J\353+\277SHX\277\025\357\303>\235\307y?0\373H\275$\023~\2771\240\224\276Y\252d?\300\177\030?\273\2050\2771\333T\277\312{\317>\370Sx?\005\251\226\275m\304~\277\223\216\210\276\330kg?*h\023?\363\0045\277=MQ\277\200\350\332>\007\272v?6\275\310\275mN\177\277\314\317x\276\247\tj?\3329\016?Bh9\277\002\237M\277u3\346>\013\372t?s\262\372\275\017\261\177\277\023\\`\276^\203l?\233\365\010?\371\256=\277\022\321I\277\352Z\361>G\024s?\203@\026\276C\354\177\277\302\305G\276\236\330n?=\234\003?p\330A\277\003\344E\277\']\374>\010\tq?\242\020/\276\000\000\200\277\242\020/\276\010\tq?\']\374>\003\344E\277p\330A\277=\234\003?\236\330n?\302\305G\276C\354\177\277\203@\026\276G\024s?\352Z\361>\022\321I\277\371\256=\277\233\365\010?^\203l?\023\\`\276\017\261\177\277s\262\372\275\013\372t?u3\346>\002\237M\277Bh9\277\3329\016?\247\tj?\314\317x\276mN\177\2776\275\310\275\007\272v?\200\350\332>=MQ\277\363\0045\277*h\023?\330kg?\223\216\210\276m\304~\277\005\251\226\275\370Sx?\312{\317>1\333T\277\273\2050\277\300\177\030?Y\252d?1\240\224\276$\023~\2770\373H\275\235\307y?\025\357\303>SHX\277J\353+\277\321\177\035?\230\305a?\345\232\240\276\254:}\277\260\n\311\274\276\024{?*D\270>\000\000\000\200\254:}\2771\240\224\276\330kg?\3329\016?\371\256=\277\003\344E\277=\234\003?^\203l?\314\317x\276m\304~\2770\373H\275\276\024{?\324|\254>\230\305a\277\300\177\030\277\363\0045?\002\237M?\352Z\361\276\010\tq\277\302\305G>\017\261\177?6\275\310=\370Sx\277\025\357\303\276\032\224[?\231g\"?J\353+\2771\333T\277\200\350\332>\013\372t?\203@\026\276\000\000\200\277\203@\026\276\013\372t?\200\350\332>1\333T\277J\353+\277\231g\"?\032\224[?\025\357\303\276\370Sx\2776\275\310=\017\261\177?\302\305G>\010\tq\277\352Z\361\276\002\237M?\363\0045?\300\177\030\277\230\305a\277\324|\254>\276\024{?0\373H\275m\304~\277\314\317x\276^\203l?=\234\003?\003\344E\277\371\256=\277\3329\016?\330kg?1\240\224\276\254:}\277\333\260\266!\254:}?1\240\224>\330kg\277\3329\016\277\371\256=?\003\344E?=\234\003\277^\203l\277\314\317x>m\304~?0\373H=\276\024{\277\324|\254\276\230\305a?\300\177\030?\363\0045\277\002\237M\277\352Z\361>\010\tq?\302\305G\276\017\261\177\2776\275\310\275\370Sx?\025\357\303>\032\224[\277\231g\"\277J\353+?1\333T?\200\350\332\276\013\372t\277\203@\026>\000\000\200?\203@\026>\013\372t\277\200\350\332\2761\333T?J\353+?\231g\"\277\032\224[\277\025\357\303>\370Sx?6\275\310\275\017\261\177\277\302\305G\276\010\tq?\352Z\361>\002\237M\277\363\0045\277\300\177\030?\230\305a?\324|\254\276\276\024{\2770\373H=m\304~?\314\317x>^\203l\277=\234\003\277\000\000\000\200$\023~\277\314\317x\276\236\330n?\352Z\361>=MQ\277J\353+\277V6\'?1\333T?u3\346\276\010\tq\277\023\\`>m\304~?\260\n\311<\254:}\277\223\216\210\276^\203l?\']\374>\002\237M\277\273\2050\277\231g\"?SHX?\200\350\332\276G\024s\277\302\305G>mN\177?0\373H=(;|\2771\240\224\276\247\tj?=\234\003?\022\321I\277\363\0045\277\321\177\035?\032\224[?\312{\317\276\013\372t\277\242\020/>\017\261\177?\005\251\226=\276\024{\277\345\232\240\276\330kg?\233\365\010?\003\344E\277Bh9\277\300\177\030?\005\276^?\025\357\303\276\007\272v\277\203@\026>C\354\177?6\275\310=\235\307y\277\324|\254\276Y\252d?\3329\016?p\330A\277\371\256=\277*h\023?\230\305a?*D\270\276\370Sx\277s\262\372=\000\000\200?s\262\372=\370Sx\277*D\270\276\230\305a?*h\023?\371\256=\277p\330A\277\3329\016?Y\252d?\324|\254\276\235\307y\2776\275\310=C\354\177?\203@\026>\007\272v\277\025\357\303\276\005\276^?\300\177\030?Bh9\277\003\344E\277\233\365\010?\330kg?\345\232\240\276\276\024{\277\005\251\226=\017\261\177?\242\020/>\013\372t\277\312{\317\276\032\224[?\321\177\035?\363\0045\277\022\321I\277=\234\003?\247\tj?1\240\224\276(;|\2770\373H=mN\177?\302\305G>G\024s\277\200\350\332\276SHX?\231g\"?\273\2050\277\002\237M\277\']\374>^\203l?\223\216\210\276\254:}\277\260\n\311<m\304~?\023\\`>\010\tq\277u3\346\2761\333T?V6\'?\000\000\000\200m\304~\277\302\305G\276\013\372t?\025\357\303>\230\305a\277\3329\016\277\003\344E?\363\0045?\231g\"\2771\333T\277\352Z\361>^\203l?1\240\224\276\276\024{\2776\275\310=\000\000\200?6\275\310=\276\024{\2771\240\224\276^\203l?\352Z\361>1\333T\277\231g\"\277\363\0045?\003\344E?\3329\016\277\230\305a\277\025\357\303>\013\372t?\302\305G\276m\304~\277\017/\302\247m\304~?\302\305G>\013\372t\277\025\357\303\276\230\305a?\3329\016?\003\344E\277\363\0045\277\231g\"?1\333T?\352Z\361\276^\203l\2771\240\224>\276\024{?6\275\310\275\000\000\200\2776\275\310\275\276\024{?1\240\224>^\203l\277\352Z\361\2761\333T?\231g\"?\363\0045\277\003\344E\277\3329\016?\230\305a?\025\357\303\276\013\372t\277\302\305G>m\304~?\017/B(m\304~\277\302\305G\276\013\372t?\025\357\303>\230\305a\277\3329\016\277\003\344E?\363\0045?\231g\"\2771\333T\277\352Z\361>^\203l?1\240\224\276\276\024{\2776\275\310=\000\000\200?6\275\310=\276\024{\2771\240\224\276^\203l?\352Z\361>1\333T\277\231g\"\277\363\0045?\003\344E?\3329\016\277\230\305a\277\025\357\303>\013\372t?\302\305G\276m\304~\277[\032\r\247m\304~?\302\305G>\013\372t\277\025\357\303\276\230\305a?\3329\016?\003\344E\277\363\0045\277\231g\"?1\333T?\352Z\361\276^\203l\2771\240\224>\276\024{?6\275\310\275\000\000\200\2776\275\310\275\276\024{?1\240\224>^\203l\277\352Z\361\2761\333T?\231g\"?\363\0045\277\003\344E\277\000\000\000\200mN\177\277\203@\026\276\235\307y?1\240\224>\236\330n\277\200\350\332\276\005\276^?\3329\016?\022\321I\277J\353+\277\273\2050?\003\344E?*h\023\277\032\224[\277u3\346>^\203l?\345\232\240\276\370Sx\277\242\020/>m\304~?\260\n\311\274\017\261\177\277s\262\372\275\276\024{?\223\216\210>\010\tq\277\312{\317\276\230\305a?\233\365\010?\002\237M\277V6\'\277\363\0045?p\330A?\300\177\030\277SHX\277\352Z\361>\247\tj?\324|\254\276\007\272v\277\302\305G>$\023~?0\373H\275C\354\177\2776\275\310\275(;|?\314\317x>G\024s\277\025\357\303\276Y\252d?=\234\003?=MQ\277\231g\"\277Bh9?\371\256=?\321\177\035\2771\333T\277\']\374>\330kg?*D\270\276\013\372t\277\023\\`>\254:}?\005\251\226\275\000\000\200\277\005\251\226\275\254:}?\023\\`>\013\372t\277*D\270\276\330kg?\']\374>1\333T\277\321\177\035\277\371\256=?Bh9?\231g\"\277=MQ\277=\234\003?Y\252d?\025\357\303\276G\024s\277\314\317x>(;|?6\275\310\275C\354\177\2770\373H\275$\023~?\302\305G>\007\272v\277\324|\254\276\247\tj?\352Z\361>SHX\277\300\177\030\277p\330A?\363\0045?V6\'\277\002\237M\277\233\365\010?\230\305a?\312{\317\276\010\tq\277\223\216\210>\276\024{?s\262\372\275\017\261\177\277\260\n\311\274m\304~?\242\020/>\370Sx\277\345\232\240\276^\203l?u3\346>\032\224[\277*h\023\277\003\344E?\273\2050?J\353+\277\022\321I\277\3329\016?\005\276^?\000\000\000\200\017\261\177\2776\275\310\275\254:}?\302\305G>\370Sx\2771\240\224\276\010\tq?\025\357\303>\330kg\277\352Z\361\276\032\224[?\3329\016?\002\237M\277\231g\"\277\371\256=?\363\0045?J\353+\277\003\344E\277\300\177\030?1\333T?=\234\003\277\230\305a\277\200\350\332>^\203l?\324|\254\276\013\372t\277\314\317x>\276\024{?\203@\026\276m\304~\2770\373H=\000\000\200?0\373H=m\304~\277\203@\026\276\276\024{?\314\317x>\013\372t\277\324|\254\276^\203l?\200\350\332>\230\305a\277=\234\003\2771\333T?\300\177\030?\003\344E\277J\353+\277\363\0045?\371\256=?\231g\"\277\002\237M\277\3329\016?\032\224[?\352Z\361\276\330kg\277\025\357\303>\010\tq?1\240\224\276\370Sx\277\302\305G>\254:}?6\275\310\275\017\261\177\277\324c\004\250\017\261\177?6\275\310=\254:}\277\302\305G\276\370Sx?1\240\224>\010\tq\277\025\357\303\276\330kg?\352Z\361>\032\224[\277\3329\016\277\002\237M?\231g\"?\371\256=\277\363\0045\277J\353+?\003\344E?\300\177\030\2771\333T\277=\234\003?\230\305a?\200\350\332\276^\203l\277\324|\254>\013\372t?\314\317x\276\276\024{\277\203@\026>m\304~?0\373H\275\000\000\200\2770\373H\275m\304~?\203@\026>\276\024{\277\314\317x\276\013\372t?\324|\254>^\203l\277\200\350\332\276\230\305a?=\234\003?1\333T\277\300\177\030\277\003\344E?J\353+?\363\0045\277\371\256=\277\231g\"?\002\237M?\3329\016\277\032\224[\277\352Z\361>\330kg?\025\357\303\276\010\tq\277\000\000\000\200C\354\177\2770\373H\275mN\177?6\275\310=$\023~\277\203@\026\276(;|?\302\305G>\235\307y\277\314\317x\276\007\272v?1\240\224>G\024s\277\324|\254\276\236\330n?\025\357\303>\247\tj\277\200\350\332\276Y\252d?\352Z\361>\005\276^\277=\234\003\277SHX?\3329\016?=MQ\277\300\177\030\277\022\321I?\231g\"?p\330A\277J\353+\277Bh9?\363\0045?\273\2050\277\371\256=\277V6\'?\003\344E?\321\177\035\277\002\237M\277*h\023?1\333T?\233\365\010\277\032\224[\277\']\374>\230\305a?u3\346\276\330kg\277\312{\317>^\203l?*D\270\276\010\tq\277\345\232\240>\013\372t?\223\216\210\276\370Sx\277\023\\`>\276\024{?\242\020/\276\254:}\277s\262\372=m\304~?\005\251\226\275\017\261\177\277\260\n\311<\000\000\200?\260\n\311<\017\261\177\277\005\251\226\275m\304~?s\262\372=\254:}\277\242\020/\276\276\024{?\023\\`>\370Sx\277\223\216\210\276\013\372t?\345\232\240>\010\tq\277*D\270\276^\203l?\312{\317>\330kg\277u3\346\276\230\305a?\']\374>\032\224[\277\233\365\010\2771\333T?*h\023?\002\237M\277\321\177\035\277\003\344E?V6\'?\371\256=\277\273\2050\277\363\0045?Bh9?J\353+\277p\330A\277\231g\"?\022\321I?\300\177\030\277=MQ\277\3329\016?SHX?=\234\003\277\005\276^\277\352Z\361>Y\252d?\200\350\332\276\247\tj\277\025\357\303>\236\330n?\324|\254\276G\024s\2771\240\224>\007\272v?\314\317x\276\235\307y\277\302\305G>(;|?\000\000\000\200\000\000\200\27721\r\245\000\000\200?21\215%\000\000\200\277\312\311\323\245\000\000\200?21\r&\000\000\200\277~}0\246\000\000\200?\312\311S&\000\000\200\277\027\026w\246\000\000\200?21\215&\000\000\200\277X\327\236\246\000\000\200?~}\260&\000\000\200\277\351\210\260\247\000\000\200?\312\311\323&\000\000\200\277\010H\r\'\000\000\200?\027\026\367&\000\000\200\277\017/\302\247\000\000\200?21\r\'\000\000\200\277w\367\323&\000\000\200?X\327\036\'\000\000\200\2775\325\323\247\000\000\200?~}0\'\000\000\200\277\336^\215&\000\000\200?\351\2100(\000\000\200\277\\{\345\247\000\000\200?\312\311S\'\000\000\200\277\212\214\r&\000\000\200?\010H\215\247\000\000\200\277\202!\367\247\000\000\200?\027\026w\'\000\000\200\277\333\260\266!\000\000\200?\017/B(\000\000\200\277\324c\004\250\000\000\200?21\215\'\000\000\200\277\331\325\014\246\000\000\200?w\367S\247\000\000\200\277\3476\r\250\000\000\200?X\327\236\'\000\000\200\277\205\003\215\246\000\000\200?5\325S(\000\000\200\277\372\t\026\250\000\000\200?~}\260\'\000\000\200\277\3029\215\250\000\000\200?\336^\r\247\000\000\200\277\r\335\036\250\000\000\200?\351\210\260(\000\000\200\277[\032\r\247\000\000\200?\\{e(\000\000\200\277\277\237\260\'\000\000\200?\312\311\323\'\000\000\200\277\325\014\226\250\000\000\200?\212\214\215\246\000\000\200\2774\2030\250\000\000\200?\010H\r\250\000\000\200\277\364\262S\247\000\000\200?\202!w(\000\000\200\277sS\215\'\000\000\200?\027\026\367\'\000\000\200\277\350\337\236\250\000\000\200?\333\2606\242\000\000\200\277Z)B\250\000\000\200?\017/\302(\000\000\200\277\000\000\000\200C\354\177\2770\373H=mN\177?6\275\310\275$\023~\277\203@\026>(;|?\302\305G\276\235\307y\277\314\317x>\007\272v?1\240\224\276G\024s\277\324|\254>\236\330n?\025\357\303\276\247\tj\277\200\350\332>Y\252d?\352Z\361\276\005\276^\277=\234\003?SHX?\3329\016\277=MQ\277\300\177\030?\022\321I?\231g\"\277p\330A\277J\353+?Bh9?\363\0045\277\273\2050\277\371\256=?V6\'?\003\344E\277\321\177\035\277\002\237M?*h\023?1\333T\277\233\365\010\277\032\224[?\']\374>\230\305a\277u3\346\276\330kg?\312{\317>^\203l\277*D\270\276\010\tq?\345\232\240>\013\372t\277\223\216\210\276\370Sx?\023\\`>\276\024{\277\242\020/\276\254:}?s\262\372=m\304~\277\005\251\226\275\017\261\177?\260\n\311<\000\000\200\277\260\n\311<\017\261\177?\005\251\226\275m\304~\277s\262\372=\254:}?\242\020/\276\276\024{\277\023\\`>\370Sx?\223\216\210\276\013\372t\277\345\232\240>\010\tq?*D\270\276^\203l\277\312{\317>\330kg?u3\346\276\230\305a\277\']\374>\032\224[?\233\365\010\2771\333T\277*h\023?\002\237M?\321\177\035\277\003\344E\277V6\'?\371\256=?\273\2050\277\363\0045\277Bh9?J\353+?p\330A\277\231g\"\277\022\321I?\300\177\030?=MQ\277\3329\016\277SHX?=\234\003?\005\276^\277\352Z\361\276Y\252d?\200\350\332>\247\tj\277\025\357\303\276\236\330n?\324|\254>G\024s\2771\240\224\276\007\272v?\314\317x>\235\307y\277\302\305G\276(;|?\000\000\000\200\017\261\177\2776\275\310=\254:}?\302\305G\276\370Sx\2771\240\224>\010\tq?\025\357\303\276\330kg\277\352Z\361>\032\224[?\3329\016\277\002\237M\277\231g\"?\371\256=?\363\0045\277J\353+\277\003\344E?\300\177\030?1\333T\277=\234\003\277\230\305a?\200\350\332>^\203l\277\324|\254\276\013\372t?\314\317x>\276\024{\277\203@\026\276m\304~?0\373H=\000\000\200\2770\373H=m\304~?\203@\026\276\276\024{\277\314\317x>\013\372t?\324|\254\276^\203l\277\200\350\332>\230\305a?=\234\003\2771\333T\277\300\177\030?\003\344E?J\353+\277\363\0045\277\371\256=?\231g\"?\002\237M\277\3329\016\277\032\224[?\352Z\361>\330kg\277\025\357\303\276\010\tq?1\240\224>\370Sx\277\302\305G\276\254:}?6\275\310=\017\261\177\277\331\325\014\246\017\261\177?6\275\310\275\254:}\277\302\305G>\370Sx?1\240\224\276\010\tq\277\025\357\303>\330kg?\352Z\361\276\032\224[\277\3329\016?\002\237M?\231g\"\277\371\256=\277\363\0045?J\353+?\003\344E\277\300\177\030\2771\333T?=\234\003?\230\305a\277\200\350\332\276^\203l?\324|\254>\013\372t\277\314\317x\276\276\024{?\203@\026>m\304~\2770\373H\275\000\000\200?0\373H\275m\304~\277\203@\026>\276\024{?\314\317x\276\013\372t\277\324|\254>^\203l?\200\350\332\276\230\305a\277=\234\003?1\333T?\300\177\030\277\003\344E\277J\353+?\363\0045?\371\256=\277\231g\"\277\002\237M?\3329\016?\032\224[\277\352Z\361\276\330kg?\025\357\303>\010\tq\277\000\000\000\200mN\177\277\203@\026>\235\307y?1\240\224\276\236\330n\277\200\350\332>\005\276^?\3329\016\277\022\321I\277J\353+?\273\2050?\003\344E\277*h\023\277\032\224[?u3\346>^\203l\277\345\232\240\276\370Sx?\242\020/>m\304~\277\260\n\311\274\017\261\177?s\262\372\275\276\024{\277\223\216\210>\010\tq?\312{\317\276\230\305a\277\233\365\010?\002\237M?V6\'\277\363\0045\277p\330A?\300\177\030?SHX\277\352Z\361\276\247\tj?\324|\254>\007\272v\277\302\305G\276$\023~?0\373H=C\354\177\2776\275\310=(;|?\314\317x\276G\024s\277\025\357\303>Y\252d?=\234\003\277=MQ\277\231g\"?Bh9?\371\256=\277\321\177\035\2771\333T?\']\374>\330kg\277*D\270\276\013\372t?\023\\`>\254:}\277\005\251\226\275\000\000\200?\005\251\226\275\254:}\277\023\\`>\013\372t?*D\270\276\330kg\277\']\374>1\333T?\321\177\035\277\371\256=\277Bh9?\231g\"?=MQ\277=\234\003\277Y\252d?\025\357\303>G\024s\277\314\317x\276(;|?6\275\310=C\354\177\2770\373H=$\023~?\302\305G\276\007\272v\277\324|\254>\247\tj?\352Z\361\276SHX\277\300\177\030?p\330A?\363\0045\277V6\'\277\002\237M?\233\365\010?\230\305a\277\312{\317\276\010\tq?\223\216\210>\276\024{\277s\262\372\275\017\261\177?\260\n\311\274m\304~\277\242\020/>\370Sx?\345\232\240\276^\203l\277u3\346>\032\224[?*h\023\277\003\344E\277\273\2050?J\353+?\022\321I\277\3329\016\277\005\276^?\000\000\000\200m\304~\277\302\305G>\013\372t?\025\357\303\276\230\305a\277\3329\016?\003\344E?\363\0045\277\231g\"\2771\333T?\352Z\361>^\203l\2771\240\224\276\276\024{?6\275\310=\000\000\200\2776\275\310=\276\024{?1\240\224\276^\203l\277\352Z\361>1\333T?\231g\"\277\363\0045\277\003\344E?\3329\016?\230\305a\277\025\357\303\276\013\372t?\302\305G>m\304~\277w\367\323&m\304~?\302\305G\276\013\372t\277\025\357\303>\230\305a?\3329\016\277\003\344E\277\363\0045?\231g\"?1\333T\277\352Z\361\276^\203l?1\240\224>\276\024{\2776\275\310\275\000\000\200?6\275\310\275\276\024{\2771\240\224>^\203l?\352Z\361\2761\333T\277\231g\"?\363\0045?\003\344E\277\3329\016\277\230\305a?\025\357\303>\013\372t\277\302\305G\276m\304~?w\367S\247m\304~\277\302\305G>\013\372t?\025\357\303\276\230\305a\277\3329\016?\003\344E?\363\0045\277\231g\"\2771\333T?\352Z\361>^\203l\2771\240\224\276\276\024{?6\275\310=\000\000\200\2776\275\310=\276\024{?1\240\224\276^\203l\277\352Z\361>1\333T?\231g\"\277\363\0045\277\003\344E?\3329\016?\230\305a\277\025\357\303\276\013\372t?\302\305G>m\304~\2774\2030\250m\304~?\302\305G\276\013\372t\277\025\357\303>\230\305a?\3329\016\277\003\344E\277\363\0045?\231g\"?1\333T\277\352Z\361\276^\203l?1\240\224>\276\024{\2776\275\310\275\000\000\200?6\275\310\275\276\024{\2771\240\224>^\203l?\352Z\361\2761\333T\277\231g\"?\363\0045?\003\344E\277\000\000\000\200$\023~\277\314\317x>\236\330n?\352Z\361\276=MQ\277J\353+?V6\'?1\333T\277u3\346\276\010\tq?\023\\`>m\304~\277\260\n\311<\254:}?\223\216\210\276^\203l\277\']\374>\002\237M?\273\2050\277\231g\"\277SHX?\200\350\332>G\024s\277\302\305G\276mN\177?0\373H\275(;|\2771\240\224>\247\tj?=\234\003\277\022\321I\277\363\0045?\321\177\035?\032\224[\277\312{\317\276\013\372t?\242\020/>\017\261\177\277\005\251\226=\276\024{?\345\232\240\276\330kg\277\233\365\010?\003\344E?Bh9\277\300\177\030\277\005\276^?\025\357\303>\007\272v\277\203@\026\276C\354\177?6\275\310\275\235\307y\277\324|\254>Y\252d?\3329\016\277p\330A\277\371\256=?*h\023?\230\305a\277*D\270\276\370Sx?s\262\372=\000\000\200\277s\262\372=\370Sx?*D\270\276\230\305a\277*h\023?\371\256=?p\330A\277\3329\016\277Y\252d?\324|\254>\235\307y\2776\275\310\275C\354\177?\203@\026\276\007\272v\277\025\357\303>\005\276^?\300\177\030\277Bh9\277\003\344E?\233\365\010?\330kg\277\345\232\240\276\276\024{?\005\251\226=\017\261\177\277\242\020/>\013\372t?\312{\317\276\032\224[\277\321\177\035?\363\0045?\022\321I\277=\234\003\277\247\tj?1\240\224>(;|\2770\373H\275mN\177?\302\305G\276G\024s\277\200\350\332>SHX?\231g\"\277\273\2050\277\002\237M?\']\374>^\203l\277\223\216\210\276\254:}?\260\n\311<m\304~\277\023\\`>\010\tq?u3\346\2761\333T\277V6\'?\000\000\000\200\254:}\2771\240\224>\330kg?\3329\016\277\371\256=\277\003\344E?=\234\003?^\203l\277\314\317x\276m\304~?0\373H\275\276\024{\277\324|\254>\230\305a?\300\177\030\277\363\0045\277\002\237M?\352Z\361>\010\tq\277\302\305G\276\017\261\177?6\275\310\275\370Sx\277\025\357\303>\032\224[?\231g\"\277J\353+\2771\333T?\200\350\332>\013\372t\277\203@\026\276\000\000\200?\203@\026\276\013\372t\277\200\350\332>1\333T?J\353+\277\231g\"\277\032\224[?\025\357\303>\370Sx\2776\275\310\275\017\261\177?\302\305G\276\010\tq\277\352Z\361>\002\237M?\363\0045\277\300\177\030\277\230\305a?\324|\254>\276\024{\2770\373H\275m\304~?\314\317x\276^\203l\277=\234\003?\003\344E?\371\256=\277\3329\016\277\330kg?1\240\224>\254:}\277\3476\r\250\254:}?1\240\224\276\330kg\277\3329\016?\371\256=?\003\344E\277=\234\003\277^\203l?\314\317x>m\304~\2770\373H=\276\024{?\324|\254\276\230\305a\277\300\177\030?\363\0045?\002\237M\277\352Z\361\276\010\tq?\302\305G>\017\261\177\2776\275\310=\370Sx?\025\357\303\276\032\224[\277\231g\"?J\353+?1\333T\277\200\350\332\276\013\372t?\203@\026>\000\000\200\277\203@\026>\013\372t?\200\350\332\2761\333T\277J\353+?\231g\"?\032\224[\277\025\357\303\276\370Sx?6\275\310=\017\261\177\277\302\305G>\010\tq?\352Z\361\276\002\237M\277\363\0045?\300\177\030?\230\305a\277\324|\254\276\276\024{?0\373H=m\304~\277\314\317x>^\203l?=\234\003\277\000\000\000\200(;|\277\324|\254>\005\276^?\231g\"\277V6\'\277\032\224[?*D\270>\276\024{\277\260\n\311\274\254:}?\345\232\240\276\230\305a\277\321\177\035?J\353+?SHX\277\025\357\303\276\235\307y?0\373H=$\023~\2771\240\224>Y\252d?\300\177\030\277\273\2050\2771\333T?\312{\317>\370Sx\277\005\251\226\275m\304~?\223\216\210\276\330kg\277*h\023?\363\0045?=MQ\277\200\350\332\276\007\272v?6\275\310=mN\177\277\314\317x>\247\tj?\3329\016\277Bh9\277\002\237M?u3\346>\013\372t\277s\262\372\275\017\261\177?\023\\`\276^\203l\277\233\365\010?\371\256=?\022\321I\277\352Z\361\276G\024s?\203@\026>C\354\177\277\302\305G>\236\330n?=\234\003\277p\330A\277\003\344E?\']\374>\010\tq\277\242\020/\276\000\000\200?\242\020/\276\010\tq\277\']\374>\003\344E?p\330A\277=\234\003\277\236\330n?\302\305G>C\354\177\277\203@\026>G\024s?\352Z\361\276\022\321I\277\371\256=?\233\365\010?^\203l\277\023\\`\276\017\261\177?s\262\372\275\013\372t\277u3\346>\002\237M?Bh9\277\3329\016\277\247\tj?\314\317x>mN\177\2776\275\310=\007\272v?\200\350\332\276=MQ\277\363\0045?*h\023?\330kg\277\223\216\210\276m\304~?\005\251\226\275\370Sx\277\312{\317>1\333T?\273\2050\277\300\177\030\277Y\252d?1\240\224>$\023~\2770\373H=\235\307y?\025\357\303\276SHX\277J\353+?\321\177\035?\230\305a\277\345\232\240\276\254:}?\260\n\311\274\276\024{\277*D\270>\000\000\000\200\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277X\327\236\246\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?X\327\036\'\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277\202!\367\247\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?X\327\236\'\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277[\032\r\247\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276^\203l\277\3329\016?\363\0045?1\333T\277\025\357\303\276\276\024{?\202!w(\276\024{\277\025\357\303>1\333T?\363\0045\277\3329\016\277^\203l?\302\305G>\000\000\200\277\302\305G>^\203l?\3329\016\277\363\0045\2771\333T?\025\357\303>\276\024{\277M\016T\'\276\024{?\025\357\303\2761\333T\277\363\0045?\3329\016?^\203l\277\302\305G\276\000\000\200?\302\305G\276\000\000\000\200\235\307y\277\200\350\332>\022\321I?\003\344E\277u3\346\276\370Sx?\260\n\311<\276\024{\277\312{\317>\002\237M?p\330A\277\352Z\361\276\007\272v?0\373H=(;|\277\025\357\303>=MQ?\371\256=\277\']\374\276\013\372t?\005\251\226=\254:}\277*D\270>1\333T?Bh9\277=\234\003\277G\024s?6\275\310=$\023~\277\324|\254>SHX?\363\0045\277\233\365\010\277\010\tq?s\262\372=m\304~\277\345\232\240>\032\224[?\273\2050\277\3329\016\277\236\330n?\203@\026>mN\177\2771\240\224>\005\276^?J\353+\277*h\023\277^\203l?\242\020/>\017\261\177\277\223\216\210>\230\305a?V6\'\277\300\177\030\277\247\tj?\302\305G>C\354\177\277\314\317x>Y\252d?\231g\"\277\321\177\035\277\330kg?\023\\`>\000\000\200\277\023\\`>\330kg?\321\177\035\277\231g\"\277Y\252d?\314\317x>C\354\177\277\302\305G>\247\tj?\300\177\030\277V6\'\277\230\305a?\223\216\210>\017\261\177\277\242\020/>^\203l?*h\023\277J\353+\277\005\276^?1\240\224>mN\177\277\203@\026>\236\330n?\3329\016\277\273\2050\277\032\224[?\345\232\240>m\304~\277s\262\372=\010\tq?\233\365\010\277\363\0045\277SHX?\324|\254>$\023~\2776\275\310=G\024s?=\234\003\277Bh9\2771\333T?*D\270>\254:}\277\005\251\226=\013\372t?\']\374\276\371\256=\277=MQ?\025\357\303>(;|\2770\373H=\007\272v?\352Z\361\276p\330A\277\002\237M?\312{\317>\276\024{\277\260\n\311<\000\000\000\200\370Sx\277\352Z\361>\371\256=?1\333T\277\324|\254\276m\304~?\203@\026\276^\203l\277\300\177\030?\231g\"?\330kg\277\302\305G\276\017\261\177?1\240\224\276\032\224[\277\363\0045?=\234\003?\013\372t\2770\373H\275\276\024{?\200\350\332\276\003\344E\277\002\237M?\025\357\303>\254:}\2776\275\310=\010\tq?\3329\016\277J\353+\277\230\305a?\314\317x>\000\000\200\277\314\317x>\230\305a?J\353+\277\3329\016\277\010\tq?6\275\310=\254:}\277\025\357\303>\002\237M?\003\344E\277\200\350\332\276\276\024{?0\373H\275\013\372t\277=\234\003?\363\0045?\032\224[\2771\240\224\276\017\261\177?\302\305G\276\330kg\277\231g\"?\300\177\030?^\203l\277\203@\026\276m\304~?\324|\254\2761\333T\277\371\256=?\352Z\361>\370Sx\277\205\003\215\246\370Sx?\352Z\361\276\371\256=\2771\333T?\324|\254>m\304~\277\203@\026>^\203l?\300\177\030\277\231g\"\277\330kg?\302\305G>\017\261\177\2771\240\224>\032\224[?\363\0045\277=\234\003\277\013\372t?0\373H=\276\024{\277\200\350\332>\003\344E?\002\237M\277\025\357\303\276\254:}?6\275\310\275\010\tq\277\3329\016?J\353+?\230\305a\277\314\317x\276\000\000\200?\314\317x\276\230\305a\277J\353+?\3329\016?\010\tq\2776\275\310\275\254:}?\025\357\303\276\002\237M\277\003\344E?\200\350\332>\276\024{\2770\373H=\013\372t?=\234\003\277\363\0045\277\032\224[?1\240\224>\017\261\177\277\302\305G>\330kg?\231g\"\277\300\177\030\277^\203l?\203@\026>\000\000\000\200\007\272v\277=\234\003?\273\2050?\230\305a\277\023\\`\276\017\261\177?\345\232\240\2761\333T\277p\330A?\200\350\332>(;|\2776\275\310=\236\330n?\300\177\030\277\321\177\035\277^\203l?s\262\372=\254:}\277\312{\317>\003\344E?=MQ\277\324|\254\276mN\177?\302\305G\276Y\252d\277J\353+?\233\365\010?\013\372t\277\260\n\311\274\370Sx?\']\374\276\363\0045\277\005\276^?\314\317x>C\354\177\2771\240\224>SHX?\371\256=\277u3\346\276\276\024{?\005\251\226\275\010\tq\277*h\023?\231g\"?\247\tj\277\203@\026\276$\023~?\025\357\303\276\022\321I\277\002\237M?*D\270>m\304~\277\242\020/>\330kg?V6\'\277\3329\016\277G\024s?0\373H=\235\307y\277\352Z\361>Bh9?\032\224[\277\223\216\210\276\000\000\200?\223\216\210\276\032\224[\277Bh9?\352Z\361>\235\307y\2770\373H=G\024s?\3329\016\277V6\'\277\330kg?\242\020/>m\304~\277*D\270>\002\237M?\022\321I\277\025\357\303\276$\023~?\203@\026\276\247\tj\277\231g\"?*h\023?\010\tq\277\005\251\226\275\276\024{?u3\346\276\371\256=\277SHX?1\240\224>C\354\177\277\314\317x>\005\276^?\363\0045\277\']\374\276\370Sx?\260\n\311\274\013\372t\277\233\365\010?J\353+?Y\252d\277\302\305G\276mN\177?\324|\254\276=MQ\277\003\344E?\312{\317>\254:}\277s\262\372=^\203l?\321\177\035\277\300\177\030\277\236\330n?6\275\310=(;|\277\200\350\332>p\330A?1\333T\277\345\232\240\276\000\000\000\200\013\372t\277\3329\016?\231g\"?^\203l\2776\275\310\275\276\024{?\352Z\361\276\363\0045\277\230\305a?\302\305G>m\304~\277\025\357\303>\003\344E?1\333T\2771\240\224\276\000\000\200?1\240\224\2761\333T\277\003\344E?\025\357\303>m\304~\277\302\305G>\230\305a?\363\0045\277\352Z\361\276\276\024{?6\275\310\275^\203l\277\231g\"?\3329\016?\013\372t\2775\325\323\247\013\372t?\3329\016\277\231g\"\277^\203l?6\275\310=\276\024{\277\352Z\361>\363\0045?\230\305a\277\302\305G\276m\304~?\025\357\303\276\003\344E\2771\333T?1\240\224>\000\000\200\2771\240\224>1\333T?\003\344E\277\025\357\303\276m\304~?\302\305G\276\230\305a\277\363\0045?\352Z\361>\276\024{\2776\275\310=^\203l?\231g\"\277\3329\016\277\013\372t?5\325S(\013\372t\277\3329\016?\231g\"?^\203l\2776\275\310\275\276\024{?\352Z\361\276\363\0045\277\230\305a?\302\305G>m\304~\277\025\357\303>\003\344E?1\333T\2771\240\224\276\000\000\200?1\240\224\2761\333T\277\003\344E?\025\357\303>m\304~\277\302\305G>\230\305a?\363\0045\277\352Z\361\276\276\024{?6\275\310\275^\203l\277\231g\"?\3329\016?\013\372t\277\350\337\236\250\013\372t?\3329\016\277\231g\"\277^\203l?6\275\310=\276\024{\277\352Z\361>\363\0045?\230\305a\277\302\305G\276m\304~?\025\357\303\276\003\344E\2771\333T?1\240\224>\000\000\200\2771\240\224>1\333T?\003\344E\277\025\357\303\276m\304~?\302\305G\276\230\305a\277\363\0045?\352Z\361>\000\000\000\200G\024s\277\300\177\030?*h\023?\013\372t\277\260\n\311<\010\tq?\321\177\035\277\3329\016\277\007\272v?0\373H\275\236\330n\277\231g\"?\233\365\010?\370Sx\277\005\251\226=^\203l?V6\'\277=\234\003\277\235\307y?6\275\310\275\247\tj\277J\353+?\']\374>\276\024{\277s\262\372=\330kg?\273\2050\277\352Z\361\276(;|?\203@\026\276Y\252d\277\363\0045?u3\346>\254:}\277\242\020/>\230\305a?Bh9\277\200\350\332\276$\023~?\302\305G\276\005\276^\277\371\256=?\312{\317>m\304~\277\023\\`>\032\224[?p\330A\277\025\357\303\276mN\177?\314\317x\276SHX\277\003\344E?*D\270>\017\261\177\277\223\216\210>1\333T?\022\321I\277\324|\254\276C\354\177?1\240\224\276=MQ\277\002\237M?\345\232\240>\000\000\200\277\345\232\240>\002\237M?=MQ\2771\240\224\276C\354\177?\324|\254\276\022\321I\2771\333T?\223\216\210>\017\261\177\277*D\270>\003\344E?SHX\277\314\317x\276mN\177?\025\357\303\276p\330A\277\032\224[?\023\\`>m\304~\277\312{\317>\371\256=?\005\276^\277\302\305G\276$\023~?\200\350\332\276Bh9\277\230\305a?\242\020/>\254:}\277u3\346>\363\0045?Y\252d\277\203@\026\276(;|?\352Z\361\276\273\2050\277\330kg?s\262\372=\276\024{\277\']\374>J\353+?\247\tj\2776\275\310\275\235\307y?=\234\003\277V6\'\277^\203l?\005\251\226=\370Sx\277\233\365\010?\231g\"?\236\330n\2770\373H\275\007\272v?\3329\016\277\321\177\035\277\000\000\000\200\010\tq\277\231g\"?=\234\003?\276\024{\277\203@\026>\230\305a?\371\256=\277\025\357\303\276\017\261\177?1\240\224\276\002\237M\2771\333T?\314\317x>m\304~\277\200\350\332>\363\0045?\330kg\2776\275\310\275\370Sx?\3329\016\277\300\177\030\277\013\372t?0\373H\275^\203l\277J\353+?\352Z\361>\254:}\277\302\305G>\032\224[?\003\344E\277\324|\254\276\000\000\200?\324|\254\276\003\344E\277\032\224[?\302\305G>\254:}\277\352Z\361>J\353+?^\203l\2770\373H\275\013\372t?\300\177\030\277\3329\016\277\370Sx?6\275\310\275\330kg\277\363\0045?\200\350\332>m\304~\277\314\317x>1\333T?\002\237M\2771\240\224\276\017\261\177?\025\357\303\276\371\256=\277\230\305a?\203@\026>\276\024{\277=\234\003?\231g\"?\010\tq\277\372\t\026\250\010\tq?\231g\"\277=\234\003\277\276\024{?\203@\026\276\230\305a\277\371\256=?\025\357\303>\017\261\177\2771\240\224>\002\237M?1\333T\277\314\317x\276m\304~?\200\350\332\276\363\0045\277\330kg?6\275\310=\370Sx\277\3329\016?\300\177\030?\013\372t\2770\373H=^\203l?J\353+\277\352Z\361\276\254:}?\302\305G\276\032\224[\277\003\344E?\324|\254>\000\000\200\277\324|\254>\003\344E?\032\224[\277\302\305G\276\254:}?\352Z\361\276J\353+\277^\203l?0\373H=\013\372t\277\300\177\030?\3329\016?\370Sx\2776\275\310=\330kg?\363\0045\277\200\350\332\276m\304~?\314\317x\2761\333T\277\002\237M?1\240\224>\017\261\177\277\025\357\303>\371\256=?\000\000\000\200\236\330n\277J\353+?u3\346>m\304~\277\223\216\210>\002\237M?SHX\277\302\305G\276(;|?=\234\003\277\321\177\035\277\013\372t?\005\251\226\275\330kg\277Bh9?\025\357\303>C\354\177\277\324|\254>p\330A?\230\305a\277s\262\372\275\370Sx?*h\023\277\3329\016\277\235\307y?\203@\026\276\005\276^\277\003\344E?\345\232\240>\017\261\177\277\312{\317>\363\0045?\247\tj\2770\373H\275G\024s?\231g\"\277\']\374\276\254:}?\023\\`\2761\333T\277=MQ?\314\317x>$\023~\277\352Z\361>V6\'?\010\tq\277\260\n\311<^\203l?\273\2050\277\200\350\332\276mN\177?1\240\224\276\022\321I\277\032\224[?\242\020/>\276\024{\277\233\365\010?\300\177\030?\007\272v\2776\275\310=Y\252d?\371\256=\277*D\270\276\000\000\200?*D\270\276\371\256=\277Y\252d?6\275\310=\007\272v\277\300\177\030?\233\365\010?\276\024{\277\242\020/>\032\224[?\022\321I\2771\240\224\276mN\177?\200\350\332\276\273\2050\277^\203l?\260\n\311<\010\tq\277V6\'?\352Z\361>$\023~\277\314\317x>=MQ?1\333T\277\023\\`\276\254:}?\']\374\276\231g\"\277G\024s?0\373H\275\247\tj\277\363\0045?\312{\317>\017\261\177\277\345\232\240>\003\344E?\005\276^\277\203@\026\276\235\307y?\3329\016\277*h\023\277\370Sx?s\262\372\275\230\305a\277p\330A?\324|\254>C\354\177\277\025\357\303>Bh9?\330kg\277\005\251\226\275\013\372t?\321\177\035\277=\234\003\277(;|?\302\305G\276SHX\277\000\000\000\200^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277~}0\246^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?~}\260&^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\017/\302\247^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?~}0\'^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\212\214\r&^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\017/B(^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\3476\r\250^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?~}\260\'^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277[\032\r\247^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\212\214\215\246^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277sS\215\'^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\017/\302(^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\373\262\247\250^\203l?\363\0045\277\025\357\303\276\000\000\200?\025\357\303\276\363\0045\277^\203l?\3476\215(^\203l\277\363\0045?\025\357\303>\000\000\200\277\025\357\303>\363\0045?^\203l\277\246ue\250^\203l?\000\000\000\200\247\tj\277\371\256=?\345\232\240>m\304~\277\']\374>\300\177\030?\235\307y\277\302\305G>=MQ?\032\224[\277s\262\372\275\013\372t?V6\'\277\200\350\332\276C\354\177?\025\357\303\276\273\2050\277\010\tq?\005\251\226\275\230\305a\277\022\321I?\314\317x>(;|\277\3329\016?\233\365\010?\254:}\277\223\216\210>\003\344E?Y\252d\2770\373H\275\236\330n?\363\0045\277*D\270\276\017\261\177?u3\346\276\231g\"\277\007\272v?\203@\026\276SHX\2771\333T?\242\020/>\370Sx\277\321\177\035?\352Z\361>mN\177\277\324|\254>Bh9?^\203l\277\260\n\311<\330kg?p\330A\2771\240\224\276$\023~?=\234\003\277*h\023\277\276\024{?\023\\`\276\002\237M\277\005\276^?6\275\310=G\024s\277J\353+?\312{\317>\000\000\200\277\312{\317>J\353+?G\024s\2776\275\310=\005\276^?\002\237M\277\023\\`\276\276\024{?*h\023\277=\234\003\277$\023~?1\240\224\276p\330A\277\330kg?\260\n\311<^\203l\277Bh9?\324|\254>mN\177\277\352Z\361>\321\177\035?\370Sx\277\242\020/>1\333T?SHX\277\203@\026\276\007\272v?\231g\"\277u3\346\276\017\261\177?*D\270\276\363\0045\277\236\330n?0\373H\275Y\252d\277\003\344E?\223\216\210>\254:}\277\233\365\010?\3329\016?(;|\277\314\317x>\022\321I?\230\305a\277\005\251\226\275\010\tq?\273\2050\277\025\357\303\276C\354\177?\200\350\332\276V6\'\277\013\372t?s\262\372\275\032\224[\277=MQ?\302\305G>\235\307y\277\000\000\000\200\330kg\277\003\344E?\314\317x>\276\024{\277\300\177\030?\352Z\361>\017\261\177\277\025\357\303>J\353+?\013\372t\277\203@\026>1\333T?\032\224[\2776\275\310\275\010\tq?\363\0045\277\324|\254\276m\304~?=\234\003\277\3329\016\277\254:}?1\240\224\276\371\256=\277^\203l?0\373H\275\230\305a\277\002\237M?\302\305G>\370Sx\277\231g\"?\200\350\332>\000\000\200\277\200\350\332>\231g\"?\370Sx\277\302\305G>\002\237M?\230\305a\2770\373H\275^\203l?\371\256=\2771\240\224\276\254:}?\3329\016\277=\234\003\277m\304~?\324|\254\276\363\0045\277\010\tq?6\275\310\275\032\224[\2771\333T?\203@\026>\013\372t\277J\353+?\025\357\303>\017\261\177\277\352Z\361>\300\177\030?\276\024{\277\314\317x>\003\344E?\330kg\277\3029\215\250\330kg?\003\344E\277\314\317x\276\276\024{?\300\177\030\277\352Z\361\276\017\261\177?\025\357\303\276J\353+\277\013\372t?\203@\026\2761\333T\277\032\224[?6\275\310=\010\tq\277\363\0045?\324|\254>m\304~\277=\234\003?\3329\016?\254:}\2771\240\224>\371\256=?^\203l\2770\373H=\230\305a?\002\237M\277\302\305G\276\370Sx?\231g\"\277\200\350\332\276\000\000\200?\200\350\332\276\231g\"\277\370Sx?\302\305G\276\002\237M\277\230\305a?0\373H=^\203l\277\371\256=?1\240\224>\254:}\277\3329\016?=\234\003?m\304~\277\324|\254>\363\0045?\010\tq\2776\275\310=\032\224[?1\333T\277\203@\026\276\013\372t?J\353+\277\025\357\303\276\017\261\177?\000\000\000\200Y\252d\277\002\237M?\242\020/>\013\372t\277\273\2050?\324|\254>$\023~\277\3329\016?\']\374>\017\261\177\277\312{\317>\231g\"?\235\307y\277\314\317x>p\330A?^\203l\277\005\251\226=\032\224[?SHX\2776\275\310\275\236\330n?\371\256=\277\223\216\210\276\276\024{?\321\177\035\277\200\350\332\276C\354\177?\352Z\361\276*h\023\277\254:}?\345\232\240\276\363\0045\277G\024s?\203@\026\276=MQ\277\230\305a?\260\n\311<\330kg\277\022\321I?\302\305G>\007\272v\277J\353+?*D\270>m\304~\277\233\365\010?=\234\003?mN\177\277\025\357\303>V6\'?\370Sx\277\023\\`>\003\344E?\247\tj\2770\373H=\005\276^?1\333T\277s\262\372\275\010\tq?Bh9\2771\240\224\276(;|?\300\177\030\277u3\346\276\000\000\200?u3\346\276\300\177\030\277(;|?1\240\224\276Bh9\277\010\tq?s\262\372\2751\333T\277\005\276^?0\373H=\247\tj\277\003\344E?\023\\`>\370Sx\277V6\'?\025\357\303>mN\177\277=\234\003?\233\365\010?m\304~\277*D\270>J\353+?\007\272v\277\302\305G>\022\321I?\330kg\277\260\n\311<\230\305a?=MQ\277\203@\026\276G\024s?\363\0045\277\345\232\240\276\254:}?*h\023\277\352Z\361\276C\354\177?\200\350\332\276\321\177\035\277\276\024{?\223\216\210\276\371\256=\277\236\330n?6\275\310\275SHX\277\032\224[?\005\251\226=^\203l\277p\330A?\314\317x>\235\307y\277\231g\"?\312{\317>\017\261\177\277\']\374>\3329\016?$\023~\277\000\000\000\200\230\305a\2771\333T?6\275\310=^\203l\277\003\344E?\302\305G>\013\372t\277\363\0045?1\240\224>\276\024{\277\231g\"?\025\357\303>m\304~\277\3329\016?\352Z\361>\000\000\200\277\352Z\361>\3329\016?m\304~\277\025\357\303>\231g\"?\276\024{\2771\240\224>\363\0045?\013\372t\277\302\305G>\003\344E?^\203l\2776\275\310=1\333T?\230\305a\277\336^\215&\230\305a?1\333T\2776\275\310\275^\203l?\003\344E\277\302\305G\276\013\372t?\363\0045\2771\240\224\276\276\024{?\231g\"\277\025\357\303\276m\304~?\3329\016\277\352Z\361\276\000\000\200?\352Z\361\276\3329\016\277m\304~?\025\357\303\276\231g\"\277\276\024{?1\240\224\276\363\0045\277\013\372t?\302\305G\276\003\344E\277^\203l?6\275\310\2751\333T\277\230\305a?\336^\r\247\230\305a\2771\333T?6\275\310=^\203l\277\003\344E?\302\305G>\013\372t\277\363\0045?1\240\224>\276\024{\277\231g\"?\025\357\303>m\304~\277\3329\016?\352Z\361>\000\000\200\277\352Z\361>\3329\016?m\304~\277\025\357\303>\231g\"?\276\024{\2771\240\224>\363\0045?\013\372t\277\302\305G>\003\344E?^\203l\2776\275\310=1\333T?\230\305a\277M\016T\'\230\305a?1\333T\2776\275\310\275^\203l?\003\344E\277\302\305G\276\013\372t?\363\0045\2771\240\224\276\276\024{?\231g\"\277\025\357\303\276m\304~?\3329\016\277\352Z\361\276\000\000\200?\352Z\361\276\3329\016\277m\304~?\025\357\303\276\231g\"\277\276\024{?1\240\224\276\363\0045\277\013\372t?\000\000\000\200\005\276^\277\032\224[?\260\n\311<\230\305a\277SHX?0\373H=Y\252d\2771\333T?\005\251\226=\330kg\277=MQ?6\275\310=\247\tj\277\002\237M?s\262\372=^\203l\277\022\321I?\203@\026>\236\330n\277\003\344E?\242\020/>\010\tq\277p\330A?\302\305G>G\024s\277\371\256=?\023\\`>\013\372t\277Bh9?\314\317x>\007\272v\277\363\0045?\223\216\210>\370Sx\277\273\2050?1\240\224>\235\307y\277J\353+?\345\232\240>\276\024{\277V6\'?\324|\254>(;|\277\231g\"?*D\270>\254:}\277\321\177\035?\025\357\303>$\023~\277\300\177\030?\312{\317>m\304~\277*h\023?\200\350\332>mN\177\277\3329\016?u3\346>\017\261\177\277\233\365\010?\352Z\361>C\354\177\277=\234\003?\']\374>\000\000\200\277\']\374>=\234\003?C\354\177\277\352Z\361>\233\365\010?\017\261\177\277u3\346>\3329\016?mN\177\277\200\350\332>*h\023?m\304~\277\312{\317>\300\177\030?$\023~\277\025\357\303>\321\177\035?\254:}\277*D\270>\231g\"?(;|\277\324|\254>V6\'?\276\024{\277\345\232\240>J\353+?\235\307y\2771\240\224>\273\2050?\370Sx\277\223\216\210>\363\0045?\007\272v\277\314\317x>Bh9?\013\372t\277\023\\`>\371\256=?G\024s\277\302\305G>p\330A?\010\tq\277\242\020/>\003\344E?\236\330n\277\203@\026>\022\321I?^\203l\277s\262\372=\002\237M?\247\tj\2776\275\310==MQ?\330kg\277\005\251\226=1\333T?Y\252d\277\000\000\000\200\032\224[\277\230\305a?0\373H\2751\333T\277\330kg?6\275\310\275\002\237M\277^\203l?\203@\026\276\003\344E\277\010\tq?\302\305G\276\371\256=\277\013\372t?\314\317x\276\363\0045\277\370Sx?1\240\224\276J\353+\277\276\024{?\324|\254\276\231g\"\277\254:}?\025\357\303\276\300\177\030\277m\304~?\200\350\332\276\3329\016\277\017\261\177?\352Z\361\276=\234\003\277\000\000\200?=\234\003\277\352Z\361\276\017\261\177?\3329\016\277\200\350\332\276m\304~?\300\177\030\277\025\357\303\276\254:}?\231g\"\277\324|\254\276\276\024{?J\353+\2771\240\224\276\370Sx?\363\0045\277\314\317x\276\013\372t?\371\256=\277\302\305G\276\010\tq?\003\344E\277\203@\026\276^\203l?\002\237M\2776\275\310\275\330kg?1\333T\2770\373H\275\230\305a?\032\224[\277\r\335\036\250\032\224[?\230\305a\2770\373H=1\333T?\330kg\2776\275\310=\002\237M?^\203l\277\203@\026>\003\344E?\010\tq\277\302\305G>\371\256=?\013\372t\277\314\317x>\363\0045?\370Sx\2771\240\224>J\353+?\276\024{\277\324|\254>\231g\"?\254:}\277\025\357\303>\300\177\030?m\304~\277\200\350\332>\3329\016?\017\261\177\277\352Z\361>=\234\003?\000\000\200\277=\234\003?\352Z\361>\017\261\177\277\3329\016?\200\350\332>m\304~\277\300\177\030?\025\357\303>\254:}\277\231g\"?\324|\254>\276\024{\277J\353+?1\240\224>\370Sx\277\363\0045?\314\317x>\013\372t\277\371\256=?\302\305G>\010\tq\277\003\344E?\203@\026>^\203l\277\002\237M?\000\000\000\200SHX\277\330kg?s\262\372\275\003\344E\277G\024s?\314\317x\276\273\2050\277\276\024{?*D\270\276\300\177\030\277mN\177?\352Z\361\276\']\374\276\017\261\177?*h\023\277\025\357\303\276(;|?J\353+\277\223\216\210\276\013\372t?p\330A\277\203@\026\276\247\tj?1\333T\277\260\n\311\274\032\224[?Y\252d\2776\275\310=\022\321I?\010\tq\277\023\\`>\363\0045?\235\307y\277\324|\254>\321\177\035?m\304~\277u3\346>=\234\003?C\354\177\277\3329\016?\312{\317>\254:}\277V6\'?1\240\224>\007\272v\277\371\256=?\242\020/>^\203l\277=MQ?0\373H=\005\276^\277\230\305a?\005\251\226\275\002\237M\277\236\330n?\302\305G\276Bh9\277\370Sx?\345\232\240\276\231g\"\277$\023~?\200\350\332\276\233\365\010\277\000\000\200?\233\365\010\277\200\350\332\276$\023~?\231g\"\277\345\232\240\276\370Sx?Bh9\277\302\305G\276\236\330n?\002\237M\277\005\251\226\275\230\305a?\005\276^\2770\373H==MQ?^\203l\277\242\020/>\371\256=?\007\272v\2771\240\224>V6\'?\254:}\277\312{\317>\3329\016?C\354\177\277=\234\003?u3\346>m\304~\277\321\177\035?\324|\254>\235\307y\277\363\0045?\023\\`>\010\tq\277\022\321I?6\275\310=Y\252d\277\032\224[?\260\n\311\2741\333T\277\247\tj?\203@\026\276p\330A\277\013\372t?\223\216\210\276J\353+\277(;|?\025\357\303\276*h\023\277\017\261\177?\']\374\276\352Z\361\276mN\177?\300\177\030\277*D\270\276\276\024{?\273\2050\277\000\000\000\2001\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277\351\210\260\2471\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?\351\2100(1\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277\331\325\014\2461\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?\351\210\260(1\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277sS\215\'1\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\025\357\303>\276\024{\277\363\0045?\302\305G>^\203l\2771\333T?\331\325\214&1\333T\277^\203l?\302\305G\276\363\0045\277\276\024{?\025\357\303\276\3329\016\277\000\000\200?\3329\016\277\025\357\303\276\276\024{?\363\0045\277\302\305G\276^\203l?1\333T\277_\276\323\2471\333T?^\203l\277\302\305G>\363\0045?\276\024{\277\025\357\303>\3329\016?\000\000\200\277\3329\016?\000\000\000\200=MQ\277\010\tq?\223\216\210\276\231g\"\277mN\177?=\234\003\277\312{\317\276\276\024{?Bh9\277\203@\026\276Y\252d?\230\305a\277s\262\372=\371\256=?\235\307y\277\025\357\303>\233\365\010?\017\261\177\277\321\177\035?1\240\224>G\024s\277\002\237M?\260\n\311<1\333T\277\236\330n?\314\317x\276V6\'\277m\304~?\']\374\276\200\350\332\276(;|?\363\0045\277\242\020/\276\330kg?\005\276^\2776\275\310=p\330A?\370Sx\277*D\270>\3329\016?C\354\177\277\300\177\030?\345\232\240>\013\372t\277\022\321I?0\373H=SHX\277^\203l?\023\\`\276J\353+\277$\023~?\352Z\361\276u3\346\276\254:}?\273\2050\277\302\305G\276\247\tj?\032\224[\277\005\251\226=\003\344E?\007\272v\277\324|\254>*h\023?\000\000\200\277*h\023?\324|\254>\007\272v\277\003\344E?\005\251\226=\032\224[\277\247\tj?\302\305G\276\273\2050\277\254:}?u3\346\276\352Z\361\276$\023~?J\353+\277\023\\`\276^\203l?SHX\2770\373H=\022\321I?\013\372t\277\345\232\240>\300\177\030?C\354\177\277\3329\016?*D\270>\370Sx\277p\330A?6\275\310=\005\276^\277\330kg?\242\020/\276\363\0045\277(;|?\200\350\332\276\']\374\276m\304~?V6\'\277\314\317x\276\236\330n?1\333T\277\260\n\311<\002\237M?G\024s\2771\240\224>\321\177\035?\017\261\177\277\233\365\010?\025\357\303>\235\307y\277\371\256=?s\262\372=\230\305a\277Y\252d?\203@\026\276Bh9\277\276\024{?\312{\317\276\000\000\000\200\002\237M\277\013\372t?\324|\254\276\3329\016\277\017\261\177?\231g\"\277\314\317x\276^\203l?\032\224[\2776\275\310=\371\256=?\276\024{\277\200\350\332>\352Z\361>\254:}\277\363\0045?\203@\026>\230\305a\277\330kg?\302\305G\276J\353+\277m\304~?=\234\003\277\025\357\303\276\370Sx?\003\344E\2770\373H\2751\333T?\010\tq\2771\240\224>\300\177\030?\000\000\200\277\300\177\030?1\240\224>\010\tq\2771\333T?0\373H\275\003\344E\277\370Sx?\025\357\303\276=\234\003\277m\304~?J\353+\277\302\305G\276\330kg?\230\305a\277\203@\026>\363\0045?\254:}\277\352Z\361>\200\350\332>\276\024{\277\371\256=?6\275\310=\032\224[\277^\203l?\314\317x\276\231g\"\277\017\261\177?\3329\016\277\324|\254\276\013\372t?\002\237M\277[\032\r\247\002\237M?\013\372t\277\324|\254>\3329\016?\017\261\177\277\231g\"?\314\317x>^\203l\277\032\224[?6\275\310\275\371\256=\277\276\024{?\200\350\332\276\352Z\361\276\254:}?\363\0045\277\203@\026\276\230\305a?\330kg\277\302\305G>J\353+?m\304~\277=\234\003?\025\357\303>\370Sx\277\003\344E?0\373H=1\333T\277\010\tq?1\240\224\276\300\177\030\277\000\000\200?\300\177\030\2771\240\224\276\010\tq?1\333T\2770\373H=\003\344E?\370Sx\277\025\357\303>=\234\003?m\304~\277J\353+?\302\305G>\330kg\277\230\305a?\203@\026\276\363\0045\277\254:}?\352Z\361\276\200\350\332\276\276\024{?\371\256=\2776\275\310\275\032\224[?^\203l\277\314\317x>\000\000\000\200\022\321I\277\370Sx?\312{\317\276\352Z\361\276(;|?\371\256=\277\005\251\226\2751\333T?G\024s\277\324|\254>\233\365\010?m\304~\277\273\2050?\203@\026>\005\276^\277^\203l?\223\216\210\276\300\177\030\277C\354\177?\231g\"\277\023\\`\276\330kg?Y\252d\277\302\305G>V6\'?\017\261\177\277*h\023?1\240\224>\236\330n\277\032\224[?s\262\372\275\363\0045\277$\023~?=\234\003\277*D\270\276\013\372t?=MQ\2770\373H=p\330A?\276\024{\277u3\346>\200\350\332>\235\307y\277\003\344E?\260\n\311<\002\237M\277\007\272v?\025\357\303\276\']\374\276\254:}?Bh9\2776\275\310\275SHX?\010\tq\277\345\232\240>\3329\016?mN\177\277J\353+?\242\020/>\230\305a\277\247\tj?\314\317x\276\321\177\035\277\000\000\200?\321\177\035\277\314\317x\276\247\tj?\230\305a\277\242\020/>J\353+?mN\177\277\3329\016?\345\232\240>\010\tq\277SHX?6\275\310\275Bh9\277\254:}?\']\374\276\025\357\303\276\007\272v?\002\237M\277\260\n\311<\003\344E?\235\307y\277\200\350\332>u3\346>\276\024{\277p\330A?0\373H==MQ\277\013\372t?*D\270\276=\234\003\277$\023~?\363\0045\277s\262\372\275\032\224[?\236\330n\2771\240\224>*h\023?\017\261\177\277V6\'?\302\305G>Y\252d\277\330kg?\023\\`\276\231g\"\277C\354\177?\300\177\030\277\223\216\210\276^\203l?\005\276^\277\203@\026>\273\2050?m\304~\277\233\365\010?\324|\254>G\024s\2771\333T?\005\251\226\275\000\000\000\200\003\344E\277\276\024{?\352Z\361\276\025\357\303\276\013\372t?1\333T\2776\275\310=\363\0045?m\304~\277\3329\016?1\240\224>^\203l\277\230\305a?\302\305G\276\231g\"\277\000\000\200?\231g\"\277\302\305G\276\230\305a?^\203l\2771\240\224>\3329\016?m\304~\277\363\0045?6\275\310=1\333T\277\013\372t?\025\357\303\276\352Z\361\276\276\024{?\003\344E\277\\{\345\247\003\344E?\276\024{\277\352Z\361>\025\357\303>\013\372t\2771\333T?6\275\310\275\363\0045\277m\304~?\3329\016\2771\240\224\276^\203l?\230\305a\277\302\305G>\231g\"?\000\000\200\277\231g\"?\302\305G>\230\305a\277^\203l?1\240\224\276\3329\016\277m\304~?\363\0045\2776\275\310\2751\333T?\013\372t\277\025\357\303>\352Z\361>\276\024{\277\003\344E?\\{e(\003\344E\277\276\024{?\352Z\361\276\025\357\303\276\013\372t?1\333T\2776\275\310=\363\0045?m\304~\277\3329\016?1\240\224>^\203l\277\230\305a?\302\305G\276\231g\"\277\000\000\200?\231g\"\277\302\305G\276\230\305a?^\203l\2771\240\224>\3329\016?m\304~\277\363\0045?6\275\310=1\333T\277\013\372t?\025\357\303\276\352Z\361\276\276\024{?\003\344E\277\023r\260\247\003\344E?\276\024{\277\352Z\361>\025\357\303>\013\372t\2771\333T?6\275\310\275\363\0045\277m\304~?\3329\016\2771\240\224\276^\203l?\230\305a\277\302\305G>\231g\"?\000\000\200\277\231g\"?\302\305G>\230\305a\277^\203l?1\240\224\276\3329\016\277m\304~?\363\0045\2776\275\310\275\000\000\000\200p\330A\277\254:}?\233\365\010\2771\240\224\276\247\tj?\330kg\277\223\216\210>\3329\016?$\023~\277\371\256=?\260\n\311<\003\344E\277(;|?=\234\003\277\345\232\240\276^\203l?Y\252d\277\314\317x>*h\023?m\304~\277Bh9?0\373H=\022\321I\277\276\024{?\']\374\276\324|\254\276\236\330n?\230\305a\277\023\\`>\300\177\030?mN\177\277\363\0045?\005\251\226=\002\237M\277\235\307y?\352Z\361\276*D\270\276\010\tq?\005\276^\277\302\305G>\321\177\035?\017\261\177\277\273\2050?6\275\310==MQ\277\370Sx?u3\346\276\025\357\303\276G\024s?\032\224[\277\242\020/>\231g\"?C\354\177\277J\353+?s\262\372=1\333T\277\007\272v?\200\350\332\276\312{\317\276\013\372t?SHX\277\203@\026>V6\'?\000\000\200\277V6\'?\203@\026>SHX\277\013\372t?\312{\317\276\200\350\332\276\007\272v?1\333T\277s\262\372=J\353+?C\354\177\277\231g\"?\242\020/>\032\224[\277G\024s?\025\357\303\276u3\346\276\370Sx?=MQ\2776\275\310=\273\2050?\017\261\177\277\321\177\035?\302\305G>\005\276^\277\010\tq?*D\270\276\352Z\361\276\235\307y?\002\237M\277\005\251\226=\363\0045?mN\177\277\300\177\030?\023\\`>\230\305a\277\236\330n?\324|\254\276\']\374\276\276\024{?\022\321I\2770\373H=Bh9?m\304~\277*h\023?\314\317x>Y\252d\277^\203l?\345\232\240\276=\234\003\277(;|?\003\344E\277\260\n\311<\371\256=?$\023~\277\3329\016?\223\216\210>\000\000\000\200\371\256=\277m\304~?\300\177\030\277\302\305G\276\032\224[?\013\372t\277\200\350\332>\025\357\303>\010\tq\277\230\305a?\314\317x\276\3329\016\277\254:}?\003\344E\2770\373H=\363\0045?\017\261\177\277\231g\"?\203@\026>1\333T\277\370Sx?\352Z\361\276\324|\254\276^\203l?\330kg\2771\240\224>=\234\003?\276\024{\277\002\237M?6\275\310\275J\353+\277\000\000\200?J\353+\2776\275\310\275\002\237M?\276\024{\277=\234\003?1\240\224>\330kg\277^\203l?\324|\254\276\352Z\361\276\370Sx?1\333T\277\203@\026>\231g\"?\017\261\177\277\363\0045?0\373H=\003\344E\277\254:}?\3329\016\277\314\317x\276\230\305a?\010\tq\277\025\357\303>\200\350\332>\013\372t\277\032\224[?\302\305G\276\300\177\030\277m\304~?\371\256=\277\277\237\260\'\371\256=?m\304~\277\300\177\030?\302\305G>\032\224[\277\013\372t?\200\350\332\276\025\357\303\276\010\tq?\230\305a\277\314\317x>\3329\016?\254:}\277\003\344E?0\373H\275\363\0045\277\017\261\177?\231g\"\277\203@\026\2761\333T?\370Sx\277\352Z\361>\324|\254>^\203l\277\330kg?1\240\224\276=\234\003\277\276\024{?\002\237M\2776\275\310=J\353+?\000\000\200\277J\353+?6\275\310=\002\237M\277\276\024{?=\234\003\2771\240\224\276\330kg?^\203l\277\324|\254>\352Z\361>\370Sx\2771\333T?\203@\026\276\231g\"\277\017\261\177?\363\0045\2770\373H\275\003\344E?\254:}\277\3329\016?\314\317x>\230\305a\277\010\tq?\025\357\303\276\200\350\332\276\000\000\000\200Bh9\277\017\261\177?V6\'\2776\275\310\275\022\321I?\254:}\277*h\023?\302\305G>SHX\277\370Sx?\']\374\2761\240\224\276Y\252d?\010\tq\277\312{\317>\025\357\303>\236\330n\277\330kg?\345\232\240\276\352Z\361\276\007\272v?\032\224[\277\023\\`>\3329\016?(;|\277\002\237M?s\262\372\275\231g\"\277mN\177?\371\256=\277\260\n\311<\363\0045?C\354\177\277J\353+?\005\251\226=\003\344E\277$\023~?\300\177\030\277\242\020/\2761\333T?\235\307y\277=\234\003?\223\216\210>\230\305a\277G\024s?\200\350\332\276*D\270\276^\203l?\247\tj\277\324|\254>u3\346>\013\372t\277\005\276^?\314\317x\276\233\365\010\277\276\024{?=MQ\277\203@\026>\321\177\035?m\304~\277p\330A?0\373H\275\273\2050\277\000\000\200?\273\2050\2770\373H\275p\330A?m\304~\277\321\177\035?\203@\026>=MQ\277\276\024{?\233\365\010\277\314\317x\276\005\276^?\013\372t\277u3\346>\324|\254>\247\tj\277^\203l?*D\270\276\200\350\332\276G\024s?\230\305a\277\223\216\210>=\234\003?\235\307y\2771\333T?\242\020/\276\300\177\030\277$\023~?\003\344E\277\005\251\226=J\353+?C\354\177\277\363\0045?\260\n\311<\371\256=\277mN\177?\231g\"\277s\262\372\275\002\237M?(;|\277\3329\016?\023\\`>\032\224[\277\007\272v?\352Z\361\276\345\232\240\276\330kg?\236\330n\277\025\357\303>\312{\317>\010\tq\277Y\252d?1\240\224\276\']\374\276\370Sx?SHX\277\302\305G>*h\023?\000\000\000\200\363\0045\277\000\000\200?\363\0045\277\312\311\323\245\363\0045?\000\000\200\277\363\0045?\312\311S&\363\0045\277\000\000\200?\363\0045\277X\327\236\246\363\0045?\000\000\200\277\363\0045?\312\311\323&\363\0045\277\000\000\200?\363\0045\277\017/\302\247\363\0045?\000\000\200\277\363\0045?X\327\036\'\363\0045\277\000\000\200?\363\0045\277\336^\215&\363\0045?\000\000\200\277\363\0045?\312\311S\'\363\0045\277\000\000\200?\363\0045\277\202!\367\247\363\0045?\000\000\200\277\363\0045?\017/B(\363\0045\277\000\000\200?\363\0045\277\331\325\014\246\363\0045?\000\000\200\277\363\0045?X\327\236\'\363\0045\277\000\000\200?\363\0045\277\372\t\026\250\363\0045?\000\000\200\277\363\0045?\336^\r\247\363\0045\277\000\000\200?\363\0045\277[\032\r\247\363\0045?\000\000\200\277\363\0045?\312\311\323\'\363\0045\277\000\000\200?\363\0045\2774\2030\250\363\0045?\000\000\200\277\363\0045?\202!w(\363\0045\277\000\000\200?\363\0045\277\350\337\236\250\363\0045?\000\000\200\277\363\0045?\017/\302(\363\0045\277\000\000\200?\363\0045\277M\016T\'\363\0045?\000\000\200\277\363\0045?\331\325\214&\363\0045\277\000\000\200?\363\0045\277\023r\260\247\363\0045?\000\000\200\277\363\0045?X\327\036(\363\0045\277\000\000\200?\363\0045\277\246ue\250\363\0045?\000\000\200\277\363\0045?\372\t\226(\363\0045\277\000\000\200?\363\0045\277!Y\271\250\363\0045?\000\000\200\277\363\0045?\336^\215\247\363\0045\277\000\000\200?\363\0045\277p\367\377\250\363\0045?\000\000\200\277\363\0045?[\032\215\'\363\0045\277\000\000\000\200\273\2050\277\017\261\177?p\330A\2776\275\310=\321\177\035?\254:}\277=MQ?\302\305G\276\233\365\010\277\370Sx?\005\276^\2771\240\224>u3\346>\010\tq\277\247\tj?\025\357\303\276*D\270\276\330kg?G\024s\277\352Z\361>\223\216\210>\032\224[\277\235\307y?\3329\016\277\242\020/\276\002\237M?$\023~\277\231g\"?\005\251\226=\371\256=\277C\354\177?\363\0045\277\260\n\311<J\353+?mN\177\277\003\344E?s\262\372\275\300\177\030\277(;|?1\333T\277\023\\`>=\234\003?\007\272v\277\230\305a?\345\232\240\276\200\350\332\276\236\330n?^\203l\277\312{\317>\324|\254>Y\252d\277\013\372t?\']\374\276\314\317x\276SHX?\276\024{\277*h\023?\203@\026>\022\321I\277m\304~?V6\'\2770\373H\275Bh9?\000\000\200\277Bh9?0\373H\275V6\'\277m\304~?\022\321I\277\203@\026>*h\023?\276\024{\277SHX?\314\317x\276\']\374\276\013\372t?Y\252d\277\324|\254>\312{\317>^\203l\277\236\330n?\200\350\332\276\345\232\240\276\230\305a?\007\272v\277=\234\003?\023\\`>1\333T\277(;|?\300\177\030\277s\262\372\275\003\344E?mN\177\277J\353+?\260\n\311<\363\0045\277C\354\177?\371\256=\277\005\251\226=\231g\"?$\023~\277\002\237M?\242\020/\276\3329\016\277\235\307y?\032\224[\277\223\216\210>\352Z\361>G\024s\277\330kg?*D\270\276\025\357\303\276\247\tj?\010\tq\277u3\346>1\240\224>\005\276^\277\370Sx?\233\365\010\277\302\305G\276=MQ?\000\000\000\200J\353+\277m\304~?\002\237M\277\302\305G>=\234\003?\013\372t\277\330kg?\025\357\303\276\324|\254\276\230\305a?\370Sx\277\3329\016?\203@\026>\003\344E\277\017\261\177?\363\0045\2770\373H=\231g\"?\254:}\2771\333T?\314\317x\276\352Z\361\276\010\tq?^\203l\277\200\350\332>1\240\224>\032\224[\277\276\024{?\300\177\030\2776\275\310\275\371\256=?\000\000\200\277\371\256=?6\275\310\275\300\177\030\277\276\024{?\032\224[\2771\240\224>\200\350\332>^\203l\277\010\tq?\352Z\361\276\314\317x\2761\333T?\254:}\277\231g\"?0\373H=\363\0045\277\017\261\177?\003\344E\277\203@\026>\3329\016?\370Sx\277\230\305a?\324|\254\276\025\357\303\276\330kg?\013\372t\277=\234\003?\302\305G>\002\237M\277m\304~?J\353+\277\325\014\226\250J\353+?m\304~\277\002\237M?\302\305G\276=\234\003\277\013\372t?\330kg\277\025\357\303>\324|\254>\230\305a\277\370Sx?\3329\016\277\203@\026\276\003\344E?\017\261\177\277\363\0045?0\373H\275\231g\"\277\254:}?1\333T\277\314\317x>\352Z\361>\010\tq\277^\203l?\200\350\332\2761\240\224\276\032\224[?\276\024{\277\300\177\030?6\275\310=\371\256=\277\000\000\200?\371\256=\2776\275\310=\300\177\030?\276\024{\277\032\224[?1\240\224\276\200\350\332\276^\203l?\010\tq\277\352Z\361>\314\317x>1\333T\277\254:}?\231g\"\2770\373H\275\363\0045?\017\261\177\277\003\344E?\203@\026\276\3329\016\277\370Sx?\230\305a\277\324|\254>\025\357\303>\330kg\277\000\000\000\200V6\'\277\254:}?SHX\2771\240\224>\312{\317>\330kg\277\007\272v?\3329\016\277s\262\372\275\371\256=?C\354\177\277\003\344E?\242\020/\276=\234\003\277G\024s?^\203l\277u3\346>\314\317x>=MQ\277m\304~?\273\2050\2770\373H=\321\177\035?\276\024{\277\005\276^?\324|\254\276*D\270\276\230\305a?\235\307y\277\300\177\030?\005\251\226=\363\0045\277mN\177?\002\237M\277\023\\`>\352Z\361>\236\330n\277\010\tq?\']\374\276\302\305G\276\022\321I?\017\261\177\277Bh9?6\275\310\275*h\023\277\370Sx?Y\252d\277\025\357\303>\345\232\240>\032\224[\277(;|?\231g\"\277\260\n\311\274J\353+?$\023~\2771\333T?\223\216\210\276\200\350\332\276\247\tj?\013\372t\277\233\365\010?\203@\026>p\330A\277\000\000\200?p\330A\277\203@\026>\233\365\010?\013\372t\277\247\tj?\200\350\332\276\223\216\210\2761\333T?$\023~\277J\353+?\260\n\311\274\231g\"\277(;|?\032\224[\277\345\232\240>\025\357\303>Y\252d\277\370Sx?*h\023\2776\275\310\275Bh9?\017\261\177\277\022\321I?\302\305G\276\']\374\276\010\tq?\236\330n\277\352Z\361>\023\\`>\002\237M\277mN\177?\363\0045\277\005\251\226=\300\177\030?\235\307y\277\230\305a?*D\270\276\324|\254\276\005\276^?\276\024{\277\321\177\035?0\373H=\273\2050\277m\304~?=MQ\277\314\317x>u3\346>^\203l\277G\024s?=\234\003\277\242\020/\276\003\344E?C\354\177\277\371\256=?s\262\372\275\3329\016\277\007\272v?\000\000\000\200\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277\212\214\r&\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\3329\016\277\013\372t?^\203l\277\352Z\361>\302\305G>\003\344E\277\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?\212\214\215\246\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277\246ue\250\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\3329\016\277\013\372t?^\203l\277\352Z\361>\302\305G>\003\344E\277\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\277\000\000\000\200\321\177\035\277\370Sx?\247\tj\277\352Z\361>\242\020/>\371\256=\277mN\177?1\333T\277\345\232\240>\324|\254>SHX\277m\304~?Bh9\277\203@\026>\']\374>^\203l\277\007\272v?\300\177\030\277\260\n\311\274\231g\"?\235\307y\277\330kg?u3\346\276\302\305G\276p\330A?\017\261\177\277=MQ?1\240\224\276*D\270\276\032\224[?$\023~\277\363\0045?s\262\372\275=\234\003\277\236\330n?\013\372t\277*h\023?0\373H=V6\'\277\276\024{?Y\252d\277\200\350\332>\023\\`>\003\344E\277C\354\177?\002\237M\277\223\216\210>\025\357\303>\005\276^\277\254:}?\273\2050\2776\275\310=\233\365\010?\010\tq\277G\024s?\3329\016\277\005\251\226\275J\353+?(;|\277\230\305a?\312{\317\276\314\317x\276\022\321I?\000\000\200\277\022\321I?\314\317x\276\312{\317\276\230\305a?(;|\277J\353+?\005\251\226\275\3329\016\277G\024s?\010\tq\277\233\365\010?6\275\310=\273\2050\277\254:}?\005\276^\277\025\357\303>\223\216\210>\002\237M\277C\354\177?\003\344E\277\023\\`>\200\350\332>Y\252d\277\276\024{?V6\'\2770\373H=*h\023?\013\372t\277\236\330n?=\234\003\277s\262\372\275\363\0045?$\023~\277\032\224[?*D\270\2761\240\224\276=MQ?\017\261\177\277p\330A?\302\305G\276u3\346\276\330kg?\235\307y\277\231g\"?\260\n\311\274\300\177\030\277\007\272v?^\203l\277\']\374>\203@\026>Bh9\277m\304~?SHX\277\324|\254>\345\232\240>1\333T\277mN\177?\000\000\000\200\300\177\030\277\013\372t?\010\tq\277\3329\016?0\373H=\231g\"\277\370Sx?^\203l\277=\234\003?6\275\310=J\353+\277\276\024{?\330kg\277\352Z\361>\203@\026>\363\0045\277\254:}?\230\305a\277\200\350\332>\302\305G>\371\256=\277m\304~?\032\224[\277\025\357\303>\314\317x>\003\344E\277\017\261\177?1\333T\277\324|\254>1\240\224>\002\237M\277\000\000\200?\002\237M\2771\240\224>\324|\254>1\333T\277\017\261\177?\003\344E\277\314\317x>\025\357\303>\032\224[\277m\304~?\371\256=\277\302\305G>\200\350\332>\230\305a\277\254:}?\363\0045\277\203@\026>\352Z\361>\330kg\277\276\024{?J\353+\2776\275\310==\234\003?^\203l\277\370Sx?\231g\"\2770\373H=\3329\016?\010\tq\277\013\372t?\300\177\030\2774\2030\250\300\177\030?\013\372t\277\010\tq?\3329\016\2770\373H\275\231g\"?\370Sx\277^\203l?=\234\003\2776\275\310\275J\353+?\276\024{\277\330kg?\352Z\361\276\203@\026\276\363\0045?\254:}\277\230\305a?\200\350\332\276\302\305G\276\371\256=?m\304~\277\032\224[?\025\357\303\276\314\317x\276\003\344E?\017\261\177\2771\333T?\324|\254\2761\240\224\276\002\237M?\000\000\200\277\002\237M?1\240\224\276\324|\254\2761\333T?\017\261\177\277\003\344E?\314\317x\276\025\357\303\276\032\224[?m\304~\277\371\256=?\302\305G\276\200\350\332\276\230\305a?\254:}\277\363\0045?\203@\026\276\352Z\361\276\330kg?\276\024{\277J\353+?6\275\310\275=\234\003\277^\203l?\370Sx\277\000\000\000\200*h\023\277\010\tq?\007\272v\277\231g\"?\005\251\226\275=\234\003\277\247\tj?\276\024{\277\273\2050?\203@\026\276u3\346\276\230\305a?$\023~\277\371\256=?\023\\`\276\025\357\303\276SHX?\017\261\177\277\022\321I?1\240\224\276\345\232\240\276\002\237M?C\354\177\2771\333T?*D\270\276\314\317x\276p\330A?m\304~\277\005\276^?\200\350\332\276\242\020/\276\363\0045?(;|\277\330kg?\']\374\2766\275\310\275V6\'?\370Sx\277\236\330n?\3329\016\277\260\n\311\274\300\177\030?G\024s\277\013\372t?\321\177\035\2770\373H=\233\365\010?^\203l\277\235\307y?J\353+\277s\262\372=\352Z\361>Y\252d\277\254:}?Bh9\277\302\305G>\312{\317>\032\224[\277mN\177?\003\344E\277\223\216\210>\324|\254>=MQ\277\000\000\200?=MQ\277\324|\254>\223\216\210>\003\344E\277mN\177?\032\224[\277\312{\317>\302\305G>Bh9\277\254:}?Y\252d\277\352Z\361>s\262\372=J\353+\277\235\307y?^\203l\277\233\365\010?0\373H=\321\177\035\277\013\372t?G\024s\277\300\177\030?\260\n\311\274\3329\016\277\236\330n?\370Sx\277V6\'?6\275\310\275\']\374\276\330kg?(;|\277\363\0045?\242\020/\276\200\350\332\276\005\276^?m\304~\277p\330A?\314\317x\276*D\270\2761\333T?C\354\177\277\002\237M?\345\232\240\2761\240\224\276\022\321I?\017\261\177\277SHX?\025\357\303\276\023\\`\276\371\256=?$\023~\277\230\305a?u3\346\276\203@\026\276\273\2050?\276\024{\277\247\tj?\000\000\000\200\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\010H\r\'\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\010H\215\247\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\372\t\026\250\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\010H\r\250\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\373\262\247\250\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\372\t\226(\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\371`\204\250\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\000\000\000\200\233\365\010\277\330kg?$\023~\277\003\344E?\345\232\240\276\314\317x\276Bh9?\276\024{\277\236\330n?\300\177\030\277\005\251\226=\352Z\361>\005\276^\277\017\261\177?=MQ\277\025\357\303>\242\020/>J\353+\277\007\272v?\013\372t\277V6\'?\203@\026\276\312{\317\2761\333T?C\354\177\277\032\224[?u3\346\2766\275\310\275\321\177\035?\010\tq\277\235\307y?\363\0045\277\023\\`>\324|\254>\022\321I\277m\304~?Y\252d\277=\234\003?\260\n\311<\3329\016\277\247\tj?\254:}\277p\330A?1\240\224\276\223\216\210\276\371\256=?(;|\277^\203l?*h\023\2770\373H=\']\374>\230\305a\277mN\177?\002\237M\277*D\270>\302\305G>\273\2050\277\370Sx?G\024s\277\231g\"?s\262\372\275\200\350\332\276SHX?\000\000\200\277SHX?\200\350\332\276s\262\372\275\231g\"?G\024s\277\370Sx?\273\2050\277\302\305G>*D\270>\002\237M\277mN\177?\230\305a\277\']\374>0\373H=*h\023\277^\203l?(;|\277\371\256=?\223\216\210\2761\240\224\276p\330A?\254:}\277\247\tj?\3329\016\277\260\n\311<=\234\003?Y\252d\277m\304~?\022\321I\277\324|\254>\023\\`>\363\0045\277\235\307y?\010\tq\277\321\177\035?6\275\310\275u3\346\276\032\224[?C\354\177\2771\333T?\312{\317\276\203@\026\276V6\'?\013\372t\277\007\272v?J\353+\277\242\020/>\025\357\303>=MQ\277\017\261\177?\005\276^\277\352Z\361>\005\251\226=\300\177\030\277\236\330n?\276\024{\277Bh9?\000\000\000\200=\234\003\277\230\305a?\017\261\177\2771\333T?\200\350\332\2766\275\310\275\300\177\030?^\203l\277\254:}?\003\344E\277\324|\254>\302\305G>J\353+\277\013\372t?\370Sx\277\363\0045?\314\317x\2761\240\224\276\371\256=?\276\024{\277\010\tq?\231g\"\277\203@\026>\025\357\303>\002\237M\277m\304~?\330kg\277\3329\016?0\373H\275\352Z\361\276\032\224[?\000\000\200\277\032\224[?\352Z\361\2760\373H\275\3329\016?\330kg\277m\304~?\002\237M\277\025\357\303>\203@\026>\231g\"\277\010\tq?\276\024{\277\371\256=?1\240\224\276\314\317x\276\363\0045?\370Sx\277\013\372t?J\353+\277\302\305G>\324|\254>\003\344E\277\254:}?^\203l\277\300\177\030?6\275\310\275\200\350\332\2761\333T?\017\261\177\277\230\305a?=\234\003\277\364\262S\247=\234\003?\230\305a\277\017\261\177?1\333T\277\200\350\332>6\275\310=\300\177\030\277^\203l?\254:}\277\003\344E?\324|\254\276\302\305G\276J\353+?\013\372t\277\370Sx?\363\0045\277\314\317x>1\240\224>\371\256=\277\276\024{?\010\tq\277\231g\"?\203@\026\276\025\357\303\276\002\237M?m\304~\277\330kg?\3329\016\2770\373H=\352Z\361>\032\224[\277\000\000\200?\032\224[\277\352Z\361>0\373H=\3329\016\277\330kg?m\304~\277\002\237M?\025\357\303\276\203@\026\276\231g\"?\010\tq\277\276\024{?\371\256=\2771\240\224>\314\317x>\363\0045\277\370Sx?\013\372t\277J\353+?\302\305G\276\324|\254\276\003\344E?\254:}\277^\203l?\300\177\030\277\000\000\000\200\']\374\276\032\224[?C\354\177\277\230\305a?\233\365\010\2770\373H=u3\346>1\333T\277mN\177?\330kg\277*h\023?6\275\310\275\312{\317\276\002\237M?$\023~\277^\203l?\321\177\035\277\203@\026>*D\270>\003\344E\277(;|?\010\tq\277V6\'?\302\305G\276\345\232\240\276\371\256=?\235\307y\277\013\372t?\273\2050\277\314\317x>\223\216\210>\363\0045\277\007\272v?\370Sx\277Bh9?1\240\224\276\023\\`\276J\353+?G\024s\277\276\024{?p\330A\277\324|\254>\242\020/>\231g\"\277\236\330n?\254:}\277\022\321I?\025\357\303\276s\262\372\275\300\177\030?\247\tj\277m\304~?=MQ\277\200\350\332>\005\251\226=\3329\016\277Y\252d?\017\261\177\277SHX?\352Z\361\276\260\n\311\274=\234\003?\005\276^\277\000\000\200?\005\276^\277=\234\003?\260\n\311\274\352Z\361\276SHX?\017\261\177\277Y\252d?\3329\016\277\005\251\226=\200\350\332>=MQ\277m\304~?\247\tj\277\300\177\030?s\262\372\275\025\357\303\276\022\321I?\254:}\277\236\330n?\231g\"\277\242\020/>\324|\254>p\330A\277\276\024{?G\024s\277J\353+?\023\\`\2761\240\224\276Bh9?\370Sx\277\007\272v?\363\0045\277\223\216\210>\314\317x>\273\2050\277\013\372t?\235\307y\277\371\256=?\345\232\240\276\302\305G\276V6\'?\010\tq\277(;|?\003\344E\277*D\270>\203@\026>\321\177\035\277^\203l?$\023~\277\002\237M?\312{\317\2766\275\310\275*h\023?\330kg\277mN\177?1\333T\277u3\346>\000\000\000\200\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\276\024{\277\003\344E?\025\357\303\2766\275\310\275\3329\016?\230\305a\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276\202!\367\247\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>\202!w(\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\276\024{\277\003\344E?\025\357\303\2766\275\310\275\3329\016?\230\305a\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276!Y\271\250\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\000\000\000\200u3\346\276\002\237M?(;|\277\013\372t?Bh9\277\324|\254>s\262\372=\3329\016\277\005\276^?\017\261\177\277\247\tj?\231g\"\277\023\\`>\314\317x>V6\'\277^\203l?mN\177\277\032\224[?\233\365\010\2776\275\310=*D\270>\371\256=\277\007\272v?\276\024{\277\022\321I?\200\350\332\276\260\n\311\274\352Z\361>=MQ\277\254:}?G\024s\277\363\0045?\345\232\240\276\203@\026\276*h\023?\230\305a\277C\354\177?\330kg\277\321\177\035?\302\305G\276\223\216\210\276J\353+?\236\330n\277m\304~?SHX\277=\234\003?\005\251\226\275\025\357\303\276p\330A?\370Sx\277\235\307y?\003\344E\277\312{\317>0\373H=\']\374\2761\333T?$\023~\277\010\tq?\273\2050\2771\240\224>\242\020/>\300\177\030\277Y\252d?\000\000\200\277Y\252d?\300\177\030\277\242\020/>1\240\224>\273\2050\277\010\tq?$\023~\2771\333T?\']\374\2760\373H=\312{\317>\003\344E\277\235\307y?\370Sx\277p\330A?\025\357\303\276\005\251\226\275=\234\003?SHX\277m\304~?\236\330n\277J\353+?\223\216\210\276\302\305G\276\321\177\035?\330kg\277C\354\177?\230\305a\277*h\023?\203@\026\276\345\232\240\276\363\0045?G\024s\277\254:}?=MQ\277\352Z\361>\260\n\311\274\200\350\332\276\022\321I?\276\024{\277\007\272v?\371\256=\277*D\270>6\275\310=\233\365\010\277\032\224[?mN\177\277^\203l?V6\'\277\314\317x>\023\\`>\231g\"\277\247\tj?\017\261\177\277\005\276^?\3329\016\277s\262\372=\000\000\000\200\200\350\332\276\003\344E?\370Sx\277\276\024{?\002\237M\277\352Z\361>0\373H\275\025\357\303\276\371\256=?\013\372t\277\254:}?1\333T\277=\234\003?6\275\310\275\324|\254\276\363\0045?\010\tq\277m\304~?\032\224[\277\3329\016?\203@\026\2761\240\224\276J\353+?^\203l\277\017\261\177?\230\305a\277\300\177\030?\302\305G\276\314\317x\276\231g\"?\330kg\277\000\000\200?\330kg\277\231g\"?\314\317x\276\302\305G\276\300\177\030?\230\305a\277\017\261\177?^\203l\277J\353+?1\240\224\276\203@\026\276\3329\016?\032\224[\277m\304~?\010\tq\277\363\0045?\324|\254\2766\275\310\275=\234\003?1\333T\277\254:}?\013\372t\277\371\256=?\025\357\303\2760\373H\275\352Z\361>\002\237M\277\276\024{?\370Sx\277\003\344E?\200\350\332\276sS\215\'\200\350\332>\003\344E\277\370Sx?\276\024{\277\002\237M?\352Z\361\2760\373H=\025\357\303>\371\256=\277\013\372t?\254:}\2771\333T?=\234\003\2776\275\310=\324|\254>\363\0045\277\010\tq?m\304~\277\032\224[?\3329\016\277\203@\026>1\240\224>J\353+\277^\203l?\017\261\177\277\230\305a?\300\177\030\277\302\305G>\314\317x>\231g\"\277\330kg?\000\000\200\277\330kg?\231g\"\277\314\317x>\302\305G>\300\177\030\277\230\305a?\017\261\177\277^\203l?J\353+\2771\240\224>\203@\026>\3329\016\277\032\224[?m\304~\277\010\tq?\363\0045\277\324|\254>6\275\310==\234\003\2771\333T?\254:}\277\013\372t?\371\256=\277\025\357\303>0\373H=\000\000\000\200\312{\317\276\371\256=?G\024s\277m\304~?\005\276^\277\300\177\030?\023\\`\276\302\305G\276*h\023?\032\224[\277$\023~?\013\372t\277p\330A?\200\350\332\276\260\n\311<\025\357\303>Bh9\277\010\tq?mN\177\277\230\305a?\321\177\035\277\314\317x>\242\020/>\3329\016\277SHX?\254:}\277\007\272v?\003\344E\277u3\346>0\373H\275*D\270\276\363\0045?\236\330n\277\017\261\177?Y\252d\277\231g\"?\223\216\210\276\203@\026\276\233\365\010?1\333T\277(;|?\370Sx\277\022\321I?\352Z\361\276\005\251\226=\324|\254>\273\2050\277^\203l?C\354\177\277\330kg?V6\'\2771\240\224>s\262\372==\234\003\277=MQ?\276\024{\277\235\307y?\002\237M\277\']\374>6\275\310\275\345\232\240\276J\353+?\247\tj\277\000\000\200?\247\tj\277J\353+?\345\232\240\2766\275\310\275\']\374>\002\237M\277\235\307y?\276\024{\277=MQ?=\234\003\277s\262\372=1\240\224>V6\'\277\330kg?C\354\177\277^\203l?\273\2050\277\324|\254>\005\251\226=\352Z\361\276\022\321I?\370Sx\277(;|?1\333T\277\233\365\010?\203@\026\276\223\216\210\276\231g\"?Y\252d\277\017\261\177?\236\330n\277\363\0045?*D\270\2760\373H\275u3\346>\003\344E\277\007\272v?\254:}\277SHX?\3329\016\277\242\020/>\314\317x>\321\177\035\277\230\305a?mN\177\277\010\tq?Bh9\277\025\357\303>\260\n\311<\200\350\332\276p\330A?\013\372t\277$\023~?\032\224[\277*h\023?\302\305G\276\023\\`\276\000\000\000\200\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\027\026w\246\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\027\026\367&\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\336^\215&\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\027\026w\'\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\3476\r\250\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\336^\r\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\325\014\226\250\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\027\026\367\'\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276M\016T\'\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\3476\215(\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276_\276\323\247\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\336^\215\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\371`\204\250\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\325\014\026)\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\225\266\260\'\025\357\303>\000\000\000\200*D\270\276J\353+?Y\252d\277m\304~?\007\272v\277\002\237M?\233\365\010\277\302\305G>\242\020/>=\234\003\277\022\321I?\013\372t\277mN\177?\330kg\277\273\2050?\025\357\303\276\260\n\311<\324|\254>V6\'\277\230\305a?$\023~\277\370Sx?=MQ\277\3329\016?\023\\`\276\203@\026\276\']\374>\003\344E\277G\024s?\017\261\177\277\247\tj?\363\0045\277\312{\317>0\373H\275\345\232\240\276\231g\"?\005\276^\277\254:}?\235\307y\2771\333T?*h\023\277\314\317x>s\262\372=\352Z\361\276p\330A?\010\tq\277C\354\177?^\203l\277Bh9?\200\350\332\276\005\251\226=1\240\224>\321\177\035\277\032\224[?(;|\277\276\024{?SHX\277\300\177\030?\223\216\210\2766\275\310\275u3\346>\371\256=\277\236\330n?\000\000\200\277\236\330n?\371\256=\277u3\346>6\275\310\275\223\216\210\276\300\177\030?SHX\277\276\024{?(;|\277\032\224[?\321\177\035\2771\240\224>\005\251\226=\200\350\332\276Bh9?^\203l\277C\354\177?\010\tq\277p\330A?\352Z\361\276s\262\372=\314\317x>*h\023\2771\333T?\235\307y\277\254:}?\005\276^\277\231g\"?\345\232\240\2760\373H\275\312{\317>\363\0045\277\247\tj?\017\261\177\277G\024s?\003\344E\277\']\374>\203@\026\276\023\\`\276\3329\016?=MQ\277\370Sx?$\023~\277\230\305a?V6\'\277\324|\254>\260\n\311<\025\357\303\276\273\2050?\330kg\277mN\177?\013\372t\277\022\321I?=\234\003\277\242\020/>\302\305G>\233\365\010\277\000\000\000\200\324|\254\276\231g\"?\032\224[\277\276\024{?\254:}\277\230\305a?J\353+\277\025\357\303>0\373H\2751\240\224\276\300\177\030?1\333T\277\370Sx?m\304~\277\330kg?\363\0045\277\200\350\332>6\275\310\275\314\317x\276\3329\016?\002\237M\277\013\372t?\017\261\177\277^\203l?\371\256=\277\352Z\361>\203@\026\276\302\305G\276=\234\003?\003\344E\277\010\tq?\000\000\200\277\010\tq?\003\344E\277=\234\003?\302\305G\276\203@\026\276\352Z\361>\371\256=\277^\203l?\017\261\177\277\013\372t?\002\237M\277\3329\016?\314\317x\2766\275\310\275\200\350\332>\363\0045\277\330kg?m\304~\277\370Sx?1\333T\277\300\177\030?1\240\224\2760\373H\275\025\357\303>J\353+\277\230\305a?\254:}\277\276\024{?\032\224[\277\231g\"?\324|\254\276\350\337\236\250\324|\254>\231g\"\277\032\224[?\276\024{\277\254:}?\230\305a\277J\353+?\025\357\303\2760\373H=1\240\224>\300\177\030\2771\333T?\370Sx\277m\304~?\330kg\277\363\0045?\200\350\332\2766\275\310=\314\317x>\3329\016\277\002\237M?\013\372t\277\017\261\177?^\203l\277\371\256=?\352Z\361\276\203@\026>\302\305G>=\234\003\277\003\344E?\010\tq\277\000\000\200?\010\tq\277\003\344E?=\234\003\277\302\305G>\203@\026>\352Z\361\276\371\256=?^\203l\277\017\261\177?\013\372t\277\002\237M?\3329\016\277\314\317x>6\275\310=\200\350\332\276\363\0045?\330kg\277m\304~?\370Sx\2771\333T?\300\177\030\2771\240\224>0\373H=\025\357\303\276J\353+?\000\000\000\200\345\232\240\276\300\177\030?=MQ\277\013\372t?C\354\177\277\010\tq?\022\321I\277\3329\016?\223\216\210\2760\373H\275*D\270>\231g\"\277SHX?\370Sx\277mN\177?^\203l\277p\330A?=\234\003\277\023\\`>6\275\310=\312{\317\276J\353+?\005\276^\277\276\024{?$\023~\277\330kg?Bh9\277\352Z\361>\242\020/\276\203@\026\276u3\346>\363\0045\277Y\252d?\254:}\277(;|?\230\305a\277\273\2050?\200\350\332\276s\262\372=\302\305G>\']\374\276\371\256=?\247\tj\277m\304~?\235\307y\277\032\224[?V6\'\277\025\357\303>\005\251\226\275\314\317x\276\233\365\010?\003\344E\277\236\330n?\017\261\177\277\007\272v?1\333T\277\321\177\035?\324|\254\276\260\n\311<1\240\224>*h\023\277\002\237M?G\024s\277\000\000\200?G\024s\277\002\237M?*h\023\2771\240\224>\260\n\311<\324|\254\276\321\177\035?1\333T\277\007\272v?\017\261\177\277\236\330n?\003\344E\277\233\365\010?\314\317x\276\005\251\226\275\025\357\303>V6\'\277\032\224[?\235\307y\277m\304~?\247\tj\277\371\256=?\']\374\276\302\305G>s\262\372=\200\350\332\276\273\2050?\230\305a\277(;|?\254:}\277Y\252d?\363\0045\277u3\346>\203@\026\276\242\020/\276\352Z\361>Bh9\277\330kg?$\023~\277\276\024{?\005\276^\277J\353+?\312{\317\2766\275\310=\023\\`>=\234\003\277p\330A?^\203l\277mN\177?\370Sx\277SHX?\231g\"\277*D\270>0\373H\275\223\216\210\276\3329\016?\022\321I\277\000\000\000\2001\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276\333\260\266!1\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\302\305G\2766\275\310\275\025\357\303>\231g\"\2771\333T?\013\372t\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>\333\2606\2421\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276p\367\377\2501\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\302\305G\2766\275\310\275\025\357\303>\231g\"\2771\333T?\013\372t\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\000\000\000\200\223\216\210\276=\234\003?Bh9\277\230\305a?\235\307y\277\017\261\177?G\024s\2771\333T?V6\'\277\200\350\332>\242\020/\2766\275\310\275*D\270>\300\177\030\277\022\321I?^\203l\277$\023~?\254:}\277\247\tj?\003\344E\277*h\023?\324|\254\276\005\251\226=\302\305G>u3\346\276J\353+?SHX\277\013\372t?C\354\177\277\370Sx?\005\276^\277\363\0045?\']\374\276\314\317x>\260\n\311<1\240\224\276\233\365\010?\371\256=\277Y\252d?\276\024{\277mN\177?\010\tq\277=MQ?\231g\"\277\312{\317>\203@\026\276s\262\372\275\025\357\303>\321\177\035\277\002\237M?\236\330n\277m\304~?(;|\277\330kg?p\330A\277\3329\016?\345\232\240\2760\373H=\023\\`>\352Z\361\276\273\2050?\032\224[\277\007\272v?\000\000\200\277\007\272v?\032\224[\277\273\2050?\352Z\361\276\023\\`>0\373H=\345\232\240\276\3329\016?p\330A\277\330kg?(;|\277m\304~?\236\330n\277\002\237M?\321\177\035\277\025\357\303>s\262\372\275\203@\026\276\312{\317>\231g\"\277=MQ?\010\tq\277mN\177?\276\024{\277Y\252d?\371\256=\277\233\365\010?1\240\224\276\260\n\311<\314\317x>\']\374\276\363\0045?\005\276^\277\370Sx?C\354\177\277\013\372t?SHX\277J\353+?u3\346\276\302\305G>\005\251\226=\324|\254\276*h\023?\003\344E\277\247\tj?\254:}\277$\023~?^\203l\277\022\321I?\300\177\030\277*D\270>6\275\310\275\242\020/\276\200\350\332>V6\'\2771\333T?G\024s\277\000\000\000\200\314\317x\276\352Z\361>J\353+\2771\333T?\010\tq\277m\304~?\254:}\277^\203l?\002\237M\277\231g\"?\200\350\332\276\302\305G>0\373H=1\240\224\276=\234\003?\363\0045\277\032\224[?\013\372t\277\017\261\177?\276\024{\277\330kg?\003\344E\277\300\177\030?\025\357\303\276\203@\026>6\275\310=\324|\254\276\3329\016?\371\256=\277\230\305a?\370Sx\277\000\000\200?\370Sx\277\230\305a?\371\256=\277\3329\016?\324|\254\2766\275\310=\203@\026>\025\357\303\276\300\177\030?\003\344E\277\330kg?\276\024{\277\017\261\177?\013\372t\277\032\224[?\363\0045\277=\234\003?1\240\224\2760\373H=\302\305G>\200\350\332\276\231g\"?\002\237M\277^\203l?\254:}\277m\304~?\010\tq\2771\333T?J\353+\277\352Z\361>\314\317x\276Z)B\250\314\317x>\352Z\361\276J\353+?1\333T\277\010\tq?m\304~\277\254:}?^\203l\277\002\237M?\231g\"\277\200\350\332>\302\305G\2760\373H\2751\240\224>=\234\003\277\363\0045?\032\224[\277\013\372t?\017\261\177\277\276\024{?\330kg\277\003\344E?\300\177\030\277\025\357\303>\203@\026\2766\275\310\275\324|\254>\3329\016\277\371\256=?\230\305a\277\370Sx?\000\000\200\277\370Sx?\230\305a\277\371\256=?\3329\016\277\324|\254>6\275\310\275\203@\026\276\025\357\303>\300\177\030\277\003\344E?\330kg\277\276\024{?\017\261\177\277\013\372t?\032\224[\277\363\0045?=\234\003\2771\240\224>0\373H\275\302\305G\276\200\350\332>\231g\"\277\002\237M?^\203l\277\254:}?\000\000\000\200\023\\`\276\200\350\332>\321\177\035\277\003\344E?Y\252d\277\370Sx?C\354\177\277\276\024{?\247\tj\277\002\237M?V6\'\277\352Z\361>\223\216\210\2760\373H=\242\020/>\025\357\303\276*h\023?\371\256=\277\005\276^?\013\372t\277mN\177?\254:}\277\236\330n?1\333T\277\273\2050?=\234\003\277\345\232\240>6\275\310\275s\262\372\275\324|\254>\233\365\010\277\363\0045?SHX\277\010\tq?$\023~\277m\304~?G\024s\277\032\224[?Bh9\277\3329\016?*D\270\276\203@\026>\005\251\226=1\240\224\276\']\374>J\353+\277=MQ?^\203l\277(;|?\017\261\177\277\007\272v?\230\305a\277p\330A?\300\177\030\277\312{\317>\302\305G\276\260\n\311\274\314\317x>u3\346\276\231g\"?\022\321I\277\330kg?\235\307y\277\000\000\200?\235\307y\277\330kg?\022\321I\277\231g\"?u3\346\276\314\317x>\260\n\311\274\302\305G\276\312{\317>\300\177\030\277p\330A?\230\305a\277\007\272v?\017\261\177\277(;|?^\203l\277=MQ?J\353+\277\']\374>1\240\224\276\005\251\226=\203@\026>*D\270\276\3329\016?Bh9\277\032\224[?G\024s\277m\304~?$\023~\277\010\tq?SHX\277\363\0045?\233\365\010\277\324|\254>s\262\372\2756\275\310\275\345\232\240>=\234\003\277\273\2050?1\333T\277\236\330n?\254:}\277mN\177?\013\372t\277\005\276^?\371\256=\277*h\023?\025\357\303\276\242\020/>0\373H=\223\216\210\276\352Z\361>V6\'\277\002\237M?\247\tj\277\276\024{?C\354\177\277\000\000\000\200\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\017/\302\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\017/B(\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276[\032\r\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\017/\302(\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\246ue\250\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>[\032\215\'\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276\225\266\260\'\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?\000\000\000\200\242\020/\276\324|\254>\']\374\276\231g\"?p\330A\277\032\224[?\236\330n\277\276\024{?C\354\177\277\254:}?G\024s\277\230\305a?\022\321I\277J\353+?\233\365\010\277\025\357\303>\023\\`\2760\373H=s\262\372=1\240\224\276u3\346>\300\177\030\277Bh9?1\333T\277\247\tj?\370Sx\277mN\177?m\304~\277\007\272v?\330kg\277=MQ?\363\0045\277*h\023?\200\350\332\276\223\216\210>6\275\310\275\005\251\226\275\314\317x>\312{\317\276\3329\016?\273\2050\277\002\237M?Y\252d\277\013\372t?$\023~\277\017\261\177?\235\307y\277^\203l?SHX\277\371\256=?\321\177\035\277\352Z\361>\345\232\240\276\203@\026>\260\n\311<\302\305G\276*D\270>=\234\003\277V6\'?\003\344E\277\005\276^?\010\tq\277(;|?\000\000\200\277(;|?\010\tq\277\005\276^?\003\344E\277V6\'?=\234\003\277*D\270>\302\305G\276\260\n\311<\203@\026>\345\232\240\276\352Z\361>\321\177\035\277\371\256=?SHX\277^\203l?\235\307y\277\017\261\177?$\023~\277\013\372t?Y\252d\277\002\237M?\273\2050\277\3329\016?\312{\317\276\314\317x>\005\251\226\2756\275\310\275\223\216\210>\200\350\332\276*h\023?\363\0045\277=MQ?\330kg\277\007\272v?m\304~\277mN\177?\370Sx\277\247\tj?1\333T\277Bh9?\300\177\030\277u3\346>1\240\224\276s\262\372=0\373H=\023\\`\276\025\357\303>\233\365\010\277J\353+?\022\321I\277\230\305a?G\024s\277\254:}?C\354\177\277\276\024{?\236\330n\277\000\000\000\200\203@\026\2761\240\224>\200\350\332\276\3329\016?J\353+\277\003\344E?\032\224[\277^\203l?\370Sx\277m\304~?\017\261\177\277\276\024{?\010\tq\277\230\305a?\002\237M\277\363\0045?\300\177\030\277\352Z\361>\324|\254\276\302\305G>0\373H\2756\275\310\275\314\317x>\025\357\303\276=\234\003?\231g\"\277\371\256=?1\333T\277\330kg?\013\372t\277\254:}?\000\000\200\277\254:}?\013\372t\277\330kg?1\333T\277\371\256=?\231g\"\277=\234\003?\025\357\303\276\314\317x>6\275\310\2750\373H\275\302\305G>\324|\254\276\352Z\361>\300\177\030\277\363\0045?\002\237M\277\230\305a?\010\tq\277\276\024{?\017\261\177\277m\304~?\370Sx\277^\203l?\032\224[\277\003\344E?J\353+\277\3329\016?\200\350\332\2761\240\224>\203@\026\276\307%\215\247\203@\026>1\240\224\276\200\350\332>\3329\016\277J\353+?\003\344E\277\032\224[?^\203l\277\370Sx?m\304~\277\017\261\177?\276\024{\277\010\tq?\230\305a\277\002\237M?\363\0045\277\300\177\030?\352Z\361\276\324|\254>\302\305G\2760\373H=6\275\310=\314\317x\276\025\357\303>=\234\003\277\231g\"?\371\256=\2771\333T?\330kg\277\013\372t?\254:}\277\000\000\200?\254:}\277\013\372t?\330kg\2771\333T?\371\256=\277\231g\"?=\234\003\277\025\357\303>\314\317x\2766\275\310=0\373H=\302\305G\276\324|\254>\352Z\361\276\300\177\030?\363\0045\277\002\237M?\230\305a\277\010\tq?\276\024{\277\017\261\177?m\304~\277\370Sx?^\203l\277\032\224[?\000\000\000\200s\262\372\275\314\317x>*D\270\276\352Z\361>*h\023\277J\353+?p\330A\2771\333T?Y\252d\277\010\tq?\235\307y\277m\304~?C\354\177\277\254:}?\007\272v\277^\203l?\005\276^\277\002\237M?Bh9\277\231g\"?\233\365\010\277\200\350\332>\345\232\240\276\302\305G>\005\251\226\2750\373H\275\242\020/>1\240\224\276\312{\317>=\234\003\277\321\177\035?\363\0045\277\022\321I?\032\224[\277\247\tj?\013\372t\277(;|?\017\261\177\277mN\177?\276\024{\277G\024s?\330kg\277SHX?\003\344E\277\273\2050?\300\177\030\277\']\374>\025\357\303\276\223\216\210>\203@\026\276\260\n\311<6\275\310=\023\\`\276\324|\254>u3\346\276\3329\016?V6\'\277\371\256=?=MQ\277\230\305a?\236\330n\277\370Sx?$\023~\277\000\000\200?$\023~\277\370Sx?\236\330n\277\230\305a?=MQ\277\371\256=?V6\'\277\3329\016?u3\346\276\324|\254>\023\\`\2766\275\310=\260\n\311<\203@\026\276\223\216\210>\025\357\303\276\']\374>\300\177\030\277\273\2050?\003\344E\277SHX?\330kg\277G\024s?\276\024{\277mN\177?\017\261\177\277(;|?\013\372t\277\247\tj?\032\224[\277\022\321I?\363\0045\277\321\177\035?=\234\003\277\312{\317>1\240\224\276\242\020/>0\373H\275\005\251\226\275\302\305G>\345\232\240\276\200\350\332>\233\365\010\277\231g\"?Bh9\277\002\237M?\005\276^\277^\203l?\007\272v\277\254:}?C\354\177\277m\304~?\235\307y\277\010\tq?Y\252d\2771\333T?p\330A\277\000\000\000\2006\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\2771\333T?\230\305a\277^\203l?\013\372t\277\276\024{?m\304~\277\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275\324c\004\2506\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=\324c\204(6\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\2771\333T?\230\305a\277^\203l?\013\372t\277\276\024{?m\304~\277\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275\337J#\2516\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\000\000\000\200\005\251\226\275\203@\026>\023\\`\2761\240\224>*D\270\276\200\350\332>\']\374\276\3329\016?\321\177\035\277J\353+?Bh9\277\003\344E?=MQ\277\032\224[?Y\252d\277^\203l?G\024s\277\370Sx?(;|\277m\304~?C\354\177\277\017\261\177?$\023~\277\276\024{?\007\272v\277\010\tq?\247\tj\277\230\305a?SHX\277\002\237M?p\330A\277\363\0045?V6\'\277\300\177\030?\233\365\010\277\352Z\361>\312{\317\276\324|\254>\223\216\210\276\302\305G>s\262\372\2750\373H=\260\n\311<6\275\310\275\242\020/>\314\317x\276\345\232\240>\025\357\303\276u3\346>=\234\003\277*h\023?\231g\"\277\273\2050?\371\256=\277\022\321I?1\333T\277\005\276^?\330kg\277\236\330n?\013\372t\277\235\307y?\254:}\277mN\177?\000\000\200\277mN\177?\254:}\277\235\307y?\013\372t\277\236\330n?\330kg\277\005\276^?1\333T\277\022\321I?\371\256=\277\273\2050?\231g\"\277*h\023?=\234\003\277u3\346>\025\357\303\276\345\232\240>\314\317x\276\242\020/>6\275\310\275\260\n\311<0\373H=s\262\372\275\302\305G>\223\216\210\276\324|\254>\312{\317\276\352Z\361>\233\365\010\277\300\177\030?V6\'\277\363\0045?p\330A\277\002\237M?SHX\277\230\305a?\247\tj\277\010\tq?\007\272v\277\276\024{?$\023~\277\017\261\177?C\354\177\277m\304~?(;|\277\370Sx?G\024s\277^\203l?Y\252d\277\032\224[?=MQ\277\003\344E?Bh9\277J\353+?\321\177\035\277\3329\016?\']\374\276\000\000\000\2000\373H\2756\275\310=\203@\026\276\302\305G>\314\317x\2761\240\224>\324|\254\276\025\357\303>\200\350\332\276\352Z\361>=\234\003\277\3329\016?\300\177\030\277\231g\"?J\353+\277\363\0045?\371\256=\277\003\344E?\002\237M\2771\333T?\032\224[\277\230\305a?\330kg\277^\203l?\010\tq\277\013\372t?\370Sx\277\276\024{?\254:}\277m\304~?\017\261\177\277\000\000\200?\017\261\177\277m\304~?\254:}\277\276\024{?\370Sx\277\013\372t?\010\tq\277^\203l?\330kg\277\230\305a?\032\224[\2771\333T?\002\237M\277\003\344E?\371\256=\277\363\0045?J\353+\277\231g\"?\300\177\030\277\3329\016?=\234\003\277\352Z\361>\200\350\332\276\025\357\303>\324|\254\2761\240\224>\314\317x\276\302\305G>\203@\026\2766\275\310=0\373H\275M\016T\'0\373H=6\275\310\275\203@\026>\302\305G\276\314\317x>1\240\224\276\324|\254>\025\357\303\276\200\350\332>\352Z\361\276=\234\003?\3329\016\277\300\177\030?\231g\"\277J\353+?\363\0045\277\371\256=?\003\344E\277\002\237M?1\333T\277\032\224[?\230\305a\277\330kg?^\203l\277\010\tq?\013\372t\277\370Sx?\276\024{\277\254:}?m\304~\277\017\261\177?\000\000\200\277\017\261\177?m\304~\277\254:}?\276\024{\277\370Sx?\013\372t\277\010\tq?^\203l\277\330kg?\230\305a\277\032\224[?1\333T\277\002\237M?\003\344E\277\371\256=?\363\0045\277J\353+?\231g\"\277\300\177\030?\3329\016\277=\234\003?\352Z\361\276\200\350\332>\025\357\303\276\324|\254>\000\000\000\200\260\n\311\2740\373H=\005\251\226\2756\275\310=s\262\372\275\203@\026>\242\020/\276\302\305G>\023\\`\276\314\317x>\223\216\210\2761\240\224>\345\232\240\276\324|\254>*D\270\276\025\357\303>\312{\317\276\200\350\332>u3\346\276\352Z\361>\']\374\276=\234\003?\233\365\010\277\3329\016?*h\023\277\300\177\030?\321\177\035\277\231g\"?V6\'\277J\353+?\273\2050\277\363\0045?Bh9\277\371\256=?p\330A\277\003\344E?\022\321I\277\002\237M?=MQ\2771\333T?SHX\277\032\224[?\005\276^\277\230\305a?Y\252d\277\330kg?\247\tj\277^\203l?\236\330n\277\010\tq?G\024s\277\013\372t?\007\272v\277\370Sx?\235\307y\277\276\024{?(;|\277\254:}?$\023~\277m\304~?mN\177\277\017\261\177?C\354\177\277\000\000\200?C\354\177\277\017\261\177?mN\177\277m\304~?$\023~\277\254:}?(;|\277\276\024{?\235\307y\277\370Sx?\007\272v\277\013\372t?G\024s\277\010\tq?\236\330n\277^\203l?\247\tj\277\330kg?Y\252d\277\230\305a?\005\276^\277\032\224[?SHX\2771\333T?=MQ\277\002\237M?\022\321I\277\003\344E?p\330A\277\371\256=?Bh9\277\363\0045?\273\2050\277J\353+?V6\'\277\231g\"?\321\177\035\277\300\177\030?*h\023\277\3329\016?\233\365\010\277=\234\003?\']\374\276\352Z\361>u3\346\276\200\350\332>\312{\317\276\025\357\303>*D\270\276\324|\254>\345\232\240\2761\240\224>\223\216\210\276\314\317x>\023\\`\276\302\305G>\242\020/\276\000\000\000\20021\r\24521\215%\312\311\323\24521\r&~}0\246\312\311S&\027\026w\24621\215&X\327\236\246~}\260&\351\210\260\247\312\311\323&\010H\r\'\027\026\367&\017/\302\24721\r\'w\367\323&X\327\036\'5\325\323\247~}0\'\336^\215&\351\2100(\\{\345\247\312\311S\'\212\214\r&\010H\215\247\202!\367\247\027\026w\'\333\260\266!\017/B(\324c\004\25021\215\'\331\325\014\246w\367S\247\3476\r\250X\327\236\'\205\003\215\2465\325S(\372\t\026\250~}\260\'\3029\215\250\336^\r\247\r\335\036\250\351\210\260([\032\r\247\\{e(\277\237\260\'\312\311\323\'\325\014\226\250\212\214\215\2464\2030\250\010H\r\250\364\262S\247\202!w(sS\215\'\027\026\367\'\350\337\236\250\333\2606\242Z)B\250\017/\302(\307%\215\247\324c\204(M\016T\'21\r(\373\262\247\250\331\325\214&\200\317S\250w\367\323\247\023r\260\247\3476\215(\264u\r\'X\327\036(\016\206\260\250\205\003\r\'\246ue\2505\325\323(_\276\323\247\372\t\226(6\272\215&~}0(!Y\271\250\3029\r)\032r\204(\336^\215\247\254\n\367\247\r\335\236(p\367\377\250\351\2100).O\367\'[\032\215\'\371`\204\250\\{\345(\337J#\251\277\2370\250-\250\214\246\312\311S(H\377\312\250\325\014\026)\347\227e(\212\214\r\247\242\321\036\2504\203\260(\313\316\010\251\010H\215\250\225\266\260\'\364\262\323\'\037\007\226\250\202!\367(\362\035,\251sS\r\250H\205S\247\027\026w(n\245\334\250\350\337\036)\233KB(\333\260\266\242\357\035B\250Z)\302(\336\241\021\251\017/B)\371;T\'\000\000\000\200\260\n\311<0\373H\275\005\251\226=6\275\310\275s\262\372=\203@\026\276\242\020/>\302\305G\276\023\\`>\314\317x\276\223\216\210>1\240\224\276\345\232\240>\324|\254\276*D\270>\025\357\303\276\312{\317>\200\350\332\276u3\346>\352Z\361\276\']\374>=\234\003\277\233\365\010?\3329\016\277*h\023?\300\177\030\277\321\177\035?\231g\"\277V6\'?J\353+\277\273\2050?\363\0045\277Bh9?\371\256=\277p\330A?\003\344E\277\022\321I?\002\237M\277=MQ?1\333T\277SHX?\032\224[\277\005\276^?\230\305a\277Y\252d?\330kg\277\247\tj?^\203l\277\236\330n?\010\tq\277G\024s?\013\372t\277\007\272v?\370Sx\277\235\307y?\276\024{\277(;|?\254:}\277$\023~?m\304~\277mN\177?\017\261\177\277C\354\177?\000\000\200\277C\354\177?\017\261\177\277mN\177?m\304~\277$\023~?\254:}\277(;|?\276\024{\277\235\307y?\370Sx\277\007\272v?\013\372t\277G\024s?\010\tq\277\236\330n?^\203l\277\247\tj?\330kg\277Y\252d?\230\305a\277\005\276^?\032\224[\277SHX?1\333T\277=MQ?\002\237M\277\022\321I?\003\344E\277p\330A?\371\256=\277Bh9?\363\0045\277\273\2050?J\353+\277V6\'?\231g\"\277\321\177\035?\300\177\030\277*h\023?\3329\016\277\233\365\010?=\234\003\277\']\374>\352Z\361\276u3\346>\200\350\332\276\312{\317>\025\357\303\276*D\270>\324|\254\276\345\232\240>1\240\224\276\223\216\210>\314\317x\276\023\\`>\302\305G\276\242\020/>\000\000\000\2000\373H=6\275\310\275\203@\026>\302\305G\276\314\317x>1\240\224\276\324|\254>\025\357\303\276\200\350\332>\352Z\361\276=\234\003?\3329\016\277\300\177\030?\231g\"\277J\353+?\363\0045\277\371\256=?\003\344E\277\002\237M?1\333T\277\032\224[?\230\305a\277\330kg?^\203l\277\010\tq?\013\372t\277\370Sx?\276\024{\277\254:}?m\304~\277\017\261\177?\000\000\200\277\017\261\177?m\304~\277\254:}?\276\024{\277\370Sx?\013\372t\277\010\tq?^\203l\277\330kg?\230\305a\277\032\224[?1\333T\277\002\237M?\003\344E\277\371\256=?\363\0045\277J\353+?\231g\"\277\300\177\030?\3329\016\277=\234\003?\352Z\361\276\200\350\332>\025\357\303\276\324|\254>1\240\224\276\314\317x>\302\305G\276\203@\026>6\275\310\2750\373H=\373\262\247\2500\373H\2756\275\310=\203@\026\276\302\305G>\314\317x\2761\240\224>\324|\254\276\025\357\303>\200\350\332\276\352Z\361>=\234\003\277\3329\016?\300\177\030\277\231g\"?J\353+\277\363\0045?\371\256=\277\003\344E?\002\237M\2771\333T?\032\224[\277\230\305a?\330kg\277^\203l?\010\tq\277\013\372t?\370Sx\277\276\024{?\254:}\277m\304~?\017\261\177\277\000\000\200?\017\261\177\277m\304~?\254:}\277\276\024{?\370Sx\277\013\372t?\010\tq\277^\203l?\330kg\277\230\305a?\032\224[\2771\333T?\002\237M\277\003\344E?\371\256=\277\363\0045?J\353+\277\231g\"?\300\177\030\277\3329\016?=\234\003\277\352Z\361>\200\350\332\276\025\357\303>\324|\254\276\000\000\000\200\005\251\226=\203@\026\276\023\\`>1\240\224\276*D\270>\200\350\332\276\']\374>\3329\016\277\321\177\035?J\353+\277Bh9?\003\344E\277=MQ?\032\224[\277Y\252d?^\203l\277G\024s?\370Sx\277(;|?m\304~\277C\354\177?\017\261\177\277$\023~?\276\024{\277\007\272v?\010\tq\277\247\tj?\230\305a\277SHX?\002\237M\277p\330A?\363\0045\277V6\'?\300\177\030\277\233\365\010?\352Z\361\276\312{\317>\324|\254\276\223\216\210>\302\305G\276s\262\372=0\373H\275\260\n\311\2746\275\310=\242\020/\276\314\317x>\345\232\240\276\025\357\303>u3\346\276=\234\003?*h\023\277\231g\"?\273\2050\277\371\256=?\022\321I\2771\333T?\005\276^\277\330kg?\236\330n\277\013\372t?\235\307y\277\254:}?mN\177\277\000\000\200?mN\177\277\254:}?\235\307y\277\013\372t?\236\330n\277\330kg?\005\276^\2771\333T?\022\321I\277\371\256=?\273\2050\277\231g\"?*h\023\277=\234\003?u3\346\276\025\357\303>\345\232\240\276\314\317x>\242\020/\2766\275\310=\260\n\311\2740\373H\275s\262\372=\302\305G\276\223\216\210>\324|\254\276\312{\317>\352Z\361\276\233\365\010?\300\177\030\277V6\'?\363\0045\277p\330A?\002\237M\277SHX?\230\305a\277\247\tj?\010\tq\277\007\272v?\276\024{\277$\023~?\017\261\177\277C\354\177?m\304~\277(;|?\370Sx\277G\024s?^\203l\277Y\252d?\032\224[\277=MQ?\003\344E\277Bh9?J\353+\277\321\177\035?\3329\016\277\']\374>\000\000\000\2006\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=\331\325\014\2466\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\2771\333T?\230\305a\277^\203l?\013\372t\277\276\024{?m\304~\277\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\3329\016?\352Z\361\276\025\357\303>1\240\224\276\302\305G>6\275\310\275\331\325\214&6\275\310=\302\305G\2761\240\224>\025\357\303\276\352Z\361>\3329\016\277\231g\"?\363\0045\277\003\344E?1\333T\277\230\305a?^\203l\277\013\372t?\276\024{\277m\304~?\000\000\200\277m\304~?\276\024{\277\013\372t?^\203l\277\230\305a?1\333T\277\003\344E?\363\0045\277\231g\"?\3329\016\277\352Z\361>\025\357\303\2761\240\224>\302\305G\2766\275\310=\347\227e(6\275\310\275\302\305G>1\240\224\276\025\357\303>\352Z\361\276\3329\016?\231g\"\277\363\0045?\003\344E\2771\333T?\230\305a\277^\203l?\013\372t\277\276\024{?m\304~\277\000\000\200?m\304~\277\276\024{?\013\372t\277^\203l?\230\305a\2771\333T?\003\344E\277\363\0045?\231g\"\277\000\000\000\200s\262\372=\314\317x\276*D\270>\352Z\361\276*h\023?J\353+\277p\330A?1\333T\277Y\252d?\010\tq\277\235\307y?m\304~\277C\354\177?\254:}\277\007\272v?^\203l\277\005\276^?\002\237M\277Bh9?\231g\"\277\233\365\010?\200\350\332\276\345\232\240>\302\305G\276\005\251\226=0\373H=\242\020/\2761\240\224>\312{\317\276=\234\003?\321\177\035\277\363\0045?\022\321I\277\032\224[?\247\tj\277\013\372t?(;|\277\017\261\177?mN\177\277\276\024{?G\024s\277\330kg?SHX\277\003\344E?\273\2050\277\300\177\030?\']\374\276\025\357\303>\223\216\210\276\203@\026>\260\n\311\2746\275\310\275\023\\`>\324|\254\276u3\346>\3329\016\277V6\'?\371\256=\277=MQ?\230\305a\277\236\330n?\370Sx\277$\023~?\000\000\200\277$\023~?\370Sx\277\236\330n?\230\305a\277=MQ?\371\256=\277V6\'?\3329\016\277u3\346>\324|\254\276\023\\`>6\275\310\275\260\n\311\274\203@\026>\223\216\210\276\025\357\303>\']\374\276\300\177\030?\273\2050\277\003\344E?SHX\277\330kg?G\024s\277\276\024{?mN\177\277\017\261\177?(;|\277\013\372t?\247\tj\277\032\224[?\022\321I\277\363\0045?\321\177\035\277=\234\003?\312{\317\2761\240\224>\242\020/\2760\373H=\005\251\226=\302\305G\276\345\232\240>\200\350\332\276\233\365\010?\231g\"\277Bh9?\002\237M\277\005\276^?^\203l\277\007\272v?\254:}\277C\354\177?m\304~\277\235\307y?\010\tq\277Y\252d?1\333T\277p\330A?\000\000\000\200\203@\026>1\240\224\276\200\350\332>\3329\016\277J\353+?\003\344E\277\032\224[?^\203l\277\370Sx?m\304~\277\017\261\177?\276\024{\277\010\tq?\230\305a\277\002\237M?\363\0045\277\300\177\030?\352Z\361\276\324|\254>\302\305G\2760\373H=6\275\310=\314\317x\276\025\357\303>=\234\003\277\231g\"?\371\256=\2771\333T?\330kg\277\013\372t?\254:}\277\000\000\200?\254:}\277\013\372t?\330kg\2771\333T?\371\256=\277\231g\"?=\234\003\277\025\357\303>\314\317x\2766\275\310=0\373H=\302\305G\276\324|\254>\352Z\361\276\300\177\030?\363\0045\277\002\237M?\230\305a\277\010\tq?\276\024{\277\017\261\177?m\304~\277\370Sx?^\203l\277\032\224[?\003\344E\277J\353+?\3329\016\277\200\350\332>1\240\224\276\203@\026>\200\317S\250\203@\026\2761\240\224>\200\350\332\276\3329\016?J\353+\277\003\344E?\032\224[\277^\203l?\370Sx\277m\304~?\017\261\177\277\276\024{?\010\tq\277\230\305a?\002\237M\277\363\0045?\300\177\030\277\352Z\361>\324|\254\276\302\305G>0\373H\2756\275\310\275\314\317x>\025\357\303\276=\234\003?\231g\"\277\371\256=?1\333T\277\330kg?\013\372t\277\254:}?\000\000\200\277\254:}?\013\372t\277\330kg?1\333T\277\371\256=?\231g\"\277=\234\003?\025\357\303\276\314\317x>6\275\310\2750\373H\275\302\305G>\324|\254\276\352Z\361>\300\177\030\277\363\0045?\002\237M\277\230\305a?\010\tq\277\276\024{?\017\261\177\277m\304~?\370Sx\277^\203l?\032\224[\277\000\000\000\200\242\020/>\324|\254\276\']\374>\231g\"\277p\330A?\032\224[\277\236\330n?\276\024{\277C\354\177?\254:}\277G\024s?\230\305a\277\022\321I?J\353+\277\233\365\010?\025\357\303\276\023\\`>0\373H\275s\262\372\2751\240\224>u3\346\276\300\177\030?Bh9\2771\333T?\247\tj\277\370Sx?mN\177\277m\304~?\007\272v\277\330kg?=MQ\277\363\0045?*h\023\277\200\350\332>\223\216\210\2766\275\310=\005\251\226=\314\317x\276\312{\317>\3329\016\277\273\2050?\002\237M\277Y\252d?\013\372t\277$\023~?\017\261\177\277\235\307y?^\203l\277SHX?\371\256=\277\321\177\035?\352Z\361\276\345\232\240>\203@\026\276\260\n\311\274\302\305G>*D\270\276=\234\003?V6\'\277\003\344E?\005\276^\277\010\tq?(;|\277\000\000\200?(;|\277\010\tq?\005\276^\277\003\344E?V6\'\277=\234\003?*D\270\276\302\305G>\260\n\311\274\203@\026\276\345\232\240>\352Z\361\276\321\177\035?\371\256=\277SHX?^\203l\277\235\307y?\017\261\177\277$\023~?\013\372t\277Y\252d?\002\237M\277\273\2050?\3329\016\277\312{\317>\314\317x\276\005\251\226=6\275\310=\223\216\210\276\200\350\332>*h\023\277\363\0045?=MQ\277\330kg?\007\272v\277m\304~?mN\177\277\370Sx?\247\tj\2771\333T?Bh9\277\300\177\030?u3\346\2761\240\224>s\262\372\2750\373H\275\023\\`>\025\357\303\276\233\365\010?J\353+\277\022\321I?\230\305a\277G\024s?\254:}\277C\354\177?\276\024{\277\236\330n?\000\000\000\200\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>w\367\323&\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276w\367S\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>4\2030\250\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\276w\367\323\247\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\254\n\367\247\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277^\203l?1\333T\277\363\0045?\3329\016\277\025\357\303>\302\305G\2764\203\260(\302\305G>\025\357\303\276\3329\016?\363\0045\2771\333T?^\203l\277\276\024{?\000\000\200\277\276\024{?^\203l\2771\333T?\363\0045\277\3329\016?\025\357\303\276\302\305G>\336\241\021\251\302\305G\276\025\357\303>\3329\016\277\363\0045?1\333T\277^\203l?\276\024{\277\000\000\200?\276\024{\277\000\000\000\200\023\\`>\200\350\332\276\321\177\035?\003\344E\277Y\252d?\370Sx\277C\354\177?\276\024{\277\247\tj?\002\237M\277V6\'?\352Z\361\276\223\216\210>0\373H\275\242\020/\276\025\357\303>*h\023\277\371\256=?\005\276^\277\013\372t?mN\177\277\254:}?\236\330n\2771\333T?\273\2050\277=\234\003?\345\232\240\2766\275\310=s\262\372=\324|\254\276\233\365\010?\363\0045\277SHX?\010\tq\277$\023~?m\304~\277G\024s?\032\224[\277Bh9?\3329\016\277*D\270>\203@\026\276\005\251\226\2751\240\224>\']\374\276J\353+?=MQ\277^\203l?(;|\277\017\261\177?\007\272v\277\230\305a?p\330A\277\300\177\030?\312{\317\276\302\305G>\260\n\311<\314\317x\276u3\346>\231g\"\277\022\321I?\330kg\277\235\307y?\000\000\200\277\235\307y?\330kg\277\022\321I?\231g\"\277u3\346>\314\317x\276\260\n\311<\302\305G>\312{\317\276\300\177\030?p\330A\277\230\305a?\007\272v\277\017\261\177?(;|\277^\203l?=MQ\277J\353+?\']\374\2761\240\224>\005\251\226\275\203@\026\276*D\270>\3329\016\277Bh9?\032\224[\277G\024s?m\304~\277$\023~?\010\tq\277SHX?\363\0045\277\233\365\010?\324|\254\276s\262\372=6\275\310=\345\232\240\276=\234\003?\273\2050\2771\333T?\236\330n\277\254:}?mN\177\277\013\372t?\005\276^\277\371\256=?*h\023\277\025\357\303>\242\020/\2760\373H\275\223\216\210>\352Z\361\276V6\'?\002\237M\277\247\tj?\276\024{\277C\354\177?\000\000\000\200\314\317x>\352Z\361\276J\353+?1\333T\277\010\tq?m\304~\277\254:}?^\203l\277\002\237M?\231g\"\277\200\350\332>\302\305G\2760\373H\2751\240\224>=\234\003\277\363\0045?\032\224[\277\013\372t?\017\261\177\277\276\024{?\330kg\277\003\344E?\300\177\030\277\025\357\303>\203@\026\2766\275\310\275\324|\254>\3329\016\277\371\256=?\230\305a\277\370Sx?\000\000\200\277\370Sx?\230\305a\277\371\256=?\3329\016\277\324|\254>6\275\310\275\203@\026\276\025\357\303>\300\177\030\277\003\344E?\330kg\277\276\024{?\017\261\177\277\013\372t?\032\224[\277\363\0045?=\234\003\2771\240\224>0\373H\275\302\305G\276\200\350\332>\231g\"\277\002\237M?^\203l\277\254:}?m\304~\277\010\tq?1\333T\277J\353+?\352Z\361\276\314\317x>\023r\260\247\314\317x\276\352Z\361>J\353+\2771\333T?\010\tq\277m\304~?\254:}\277^\203l?\002\237M\277\231g\"?\200\350\332\276\302\305G>0\373H=1\240\224\276=\234\003?\363\0045\277\032\224[?\013\372t\277\017\261\177?\276\024{\277\330kg?\003\344E\277\300\177\030?\025\357\303\276\203@\026>6\275\310=\324|\254\276\3329\016?\371\256=\277\230\305a?\370Sx\277\000\000\200?\370Sx\277\230\305a?\371\256=\277\3329\016?\324|\254\2766\275\310=\203@\026>\025\357\303\276\300\177\030?\003\344E\277\330kg?\276\024{\277\017\261\177?\013\372t\277\032\224[?\363\0045\277=\234\003?1\240\224\2760\373H=\302\305G>\200\350\332\276\231g\"?\002\237M\277^\203l?\254:}\277\000\000\000\200\223\216\210>=\234\003\277Bh9?\230\305a\277\235\307y?\017\261\177\277G\024s?1\333T\277V6\'?\200\350\332\276\242\020/>6\275\310=*D\270\276\300\177\030?\022\321I\277^\203l?$\023~\277\254:}?\247\tj\277\003\344E?*h\023\277\324|\254>\005\251\226\275\302\305G\276u3\346>J\353+\277SHX?\013\372t\277C\354\177?\370Sx\277\005\276^?\363\0045\277\']\374>\314\317x\276\260\n\311\2741\240\224>\233\365\010\277\371\256=?Y\252d\277\276\024{?mN\177\277\010\tq?=MQ\277\231g\"?\312{\317\276\203@\026>s\262\372=\025\357\303\276\321\177\035?\002\237M\277\236\330n?m\304~\277(;|?\330kg\277p\330A?\3329\016\277\345\232\240>0\373H\275\023\\`\276\352Z\361>\273\2050\277\032\224[?\007\272v\277\000\000\200?\007\272v\277\032\224[?\273\2050\277\352Z\361>\023\\`\2760\373H\275\345\232\240>\3329\016\277p\330A?\330kg\277(;|?m\304~\277\236\330n?\002\237M\277\321\177\035?\025\357\303\276s\262\372=\203@\026>\312{\317\276\231g\"?=MQ\277\010\tq?mN\177\277\276\024{?Y\252d\277\371\256=?\233\365\010\2771\240\224>\260\n\311\274\314\317x\276\']\374>\363\0045\277\005\276^?\370Sx\277C\354\177?\013\372t\277SHX?J\353+\277u3\346>\302\305G\276\005\251\226\275\324|\254>*h\023\277\003\344E?\247\tj\277\254:}?$\023~\277^\203l?\022\321I\277\300\177\030?*D\270\2766\275\310=\242\020/>\200\350\332\276V6\'?1\333T\277G\024s?\000\000\000\2001\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\302\305G\2766\275\310\275\025\357\303>\231g\"\2771\333T?\013\372t\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>\3476\r\2501\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\276\024{?m\304~\277^\203l?\003\344E\277\3329\016?1\240\224\276\3476\215(1\240\224>\3329\016\277\003\344E?^\203l\277m\304~?\276\024{\277\230\305a?\363\0045\277\352Z\361>\302\305G\2766\275\310\275\025\357\303>\231g\"\2771\333T?\013\372t\277\000\000\200?\013\372t\2771\333T?\231g\"\277\025\357\303>6\275\310\275\302\305G\276\352Z\361>\363\0045\277\230\305a?\276\024{\277m\304~?^\203l\277\003\344E?\3329\016\2771\240\224>\225\266\260\'1\240\224\276\3329\016?\003\344E\277^\203l?m\304~\277\276\024{?\230\305a\277\363\0045?\352Z\361\276\302\305G>6\275\310=\025\357\303\276\231g\"?1\333T\277\013\372t?\000\000\200\277\013\372t?1\333T\277\231g\"?\025\357\303\2766\275\310=\302\305G>\352Z\361\276\363\0045?\230\305a\277\000\000\000\200\345\232\240>\300\177\030\277=MQ?\013\372t\277C\354\177?\010\tq\277\022\321I?\3329\016\277\223\216\210>0\373H=*D\270\276\231g\"?SHX\277\370Sx?mN\177\277^\203l?p\330A\277=\234\003?\023\\`\2766\275\310\275\312{\317>J\353+\277\005\276^?\276\024{\277$\023~?\330kg\277Bh9?\352Z\361\276\242\020/>\203@\026>u3\346\276\363\0045?Y\252d\277\254:}?(;|\277\230\305a?\273\2050\277\200\350\332>s\262\372\275\302\305G\276\']\374>\371\256=\277\247\tj?m\304~\277\235\307y?\032\224[\277V6\'?\025\357\303\276\005\251\226=\314\317x>\233\365\010\277\003\344E?\236\330n\277\017\261\177?\007\272v\2771\333T?\321\177\035\277\324|\254>\260\n\311\2741\240\224\276*h\023?\002\237M\277G\024s?\000\000\200\277G\024s?\002\237M\277*h\023?1\240\224\276\260\n\311\274\324|\254>\321\177\035\2771\333T?\007\272v\277\017\261\177?\236\330n\277\003\344E?\233\365\010\277\314\317x>\005\251\226=\025\357\303\276V6\'?\032\224[\277\235\307y?m\304~\277\247\tj?\371\256=\277\']\374>\302\305G\276s\262\372\275\200\350\332>\273\2050\277\230\305a?(;|\277\254:}?Y\252d\277\363\0045?u3\346\276\203@\026>\242\020/>\352Z\361\276Bh9?\330kg\277$\023~?\276\024{\277\005\276^?J\353+\277\312{\317>6\275\310\275\023\\`\276=\234\003?p\330A\277^\203l?mN\177\277\370Sx?SHX\277\231g\"?*D\270\2760\373H=\223\216\210>\3329\016\277\022\321I?\000\000\000\200\324|\254>\231g\"\277\032\224[?\276\024{\277\254:}?\230\305a\277J\353+?\025\357\303\2760\373H=1\240\224>\300\177\030\2771\333T?\370Sx\277m\304~?\330kg\277\363\0045?\200\350\332\2766\275\310=\314\317x>\3329\016\277\002\237M?\013\372t\277\017\261\177?^\203l\277\371\256=?\352Z\361\276\203@\026>\302\305G>=\234\003\277\003\344E?\010\tq\277\000\000\200?\010\tq\277\003\344E?=\234\003\277\302\305G>\203@\026>\352Z\361\276\371\256=?^\203l\277\017\261\177?\013\372t\277\002\237M?\3329\016\277\314\317x>6\275\310=\200\350\332\276\363\0045?\330kg\277m\304~?\370Sx\2771\333T?\300\177\030\2771\240\224>0\373H=\025\357\303\276J\353+?\230\305a\277\254:}?\276\024{\277\032\224[?\231g\"\277\324|\254>\264u\r\'\324|\254\276\231g\"?\032\224[\277\276\024{?\254:}\277\230\305a?J\353+\277\025\357\303>0\373H\2751\240\224\276\300\177\030?1\333T\277\370Sx?m\304~\277\330kg?\363\0045\277\200\350\332>6\275\310\275\314\317x\276\3329\016?\002\237M\277\013\372t?\017\261\177\277^\203l?\371\256=\277\352Z\361>\203@\026\276\302\305G\276=\234\003?\003\344E\277\010\tq?\000\000\200\277\010\tq?\003\344E\277=\234\003?\302\305G\276\203@\026\276\352Z\361>\371\256=\277^\203l?\017\261\177\277\013\372t?\002\237M\277\3329\016?\314\317x\2766\275\310\275\200\350\332>\363\0045\277\330kg?m\304~\277\370Sx?1\333T\277\300\177\030?1\240\224\2760\373H\275\025\357\303>J\353+\277\000\000\000\200*D\270>J\353+\277Y\252d?m\304~\277\007\272v?\002\237M\277\233\365\010?\302\305G\276\242\020/\276=\234\003?\022\321I\277\013\372t?mN\177\277\330kg?\273\2050\277\025\357\303>\260\n\311\274\324|\254\276V6\'?\230\305a\277$\023~?\370Sx\277=MQ?\3329\016\277\023\\`>\203@\026>\']\374\276\003\344E?G\024s\277\017\261\177?\247\tj\277\363\0045?\312{\317\2760\373H=\345\232\240>\231g\"\277\005\276^?\254:}\277\235\307y?1\333T\277*h\023?\314\317x\276s\262\372\275\352Z\361>p\330A\277\010\tq?C\354\177\277^\203l?Bh9\277\200\350\332>\005\251\226\2751\240\224\276\321\177\035?\032\224[\277(;|?\276\024{\277SHX?\300\177\030\277\223\216\210>6\275\310=u3\346\276\371\256=?\236\330n\277\000\000\200?\236\330n\277\371\256=?u3\346\2766\275\310=\223\216\210>\300\177\030\277SHX?\276\024{\277(;|?\032\224[\277\321\177\035?1\240\224\276\005\251\226\275\200\350\332>Bh9\277^\203l?C\354\177\277\010\tq?p\330A\277\352Z\361>s\262\372\275\314\317x\276*h\023?1\333T\277\235\307y?\254:}\277\005\276^?\231g\"\277\345\232\240>0\373H=\312{\317\276\363\0045?\247\tj\277\017\261\177?G\024s\277\003\344E?\']\374\276\203@\026>\023\\`>\3329\016\277=MQ?\370Sx\277$\023~?\230\305a\277V6\'?\324|\254\276\260\n\311\274\025\357\303>\273\2050\277\330kg?mN\177\277\013\372t?\022\321I\277=\234\003?\242\020/\276\302\305G\276\233\365\010?\000\000\000\200\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>X\327\236\246\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276X\327\036\'\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\202!\367\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276X\327\236\'\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>[\032\r\247\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\202!w(\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>M\016T\'\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276X\327\036(\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>!Y\271\250\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276[\032\215\'\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\347\227e(\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276\202!\367(\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\357\035B\250\025\357\303\276\363\0045?^\203l\277\000\000\200?^\203l\277\363\0045?\025\357\303\276M\016\324\247\025\357\303>\363\0045\277^\203l?\000\000\200\277^\203l?\363\0045\277\025\357\303>\361t\032\251\025\357\303\276\000\000\000\200\312{\317>\371\256=\277G\024s?m\304~\277\005\276^?\300\177\030\277\023\\`>\302\305G>*h\023\277\032\224[?$\023~\277\013\372t?p\330A\277\200\350\332>\260\n\311\274\025\357\303\276Bh9?\010\tq\277mN\177?\230\305a\277\321\177\035?\314\317x\276\242\020/\276\3329\016?SHX\277\254:}?\007\272v\277\003\344E?u3\346\2760\373H=*D\270>\363\0045\277\236\330n?\017\261\177\277Y\252d?\231g\"\277\223\216\210>\203@\026>\233\365\010\2771\333T?(;|\277\370Sx?\022\321I\277\352Z\361>\005\251\226\275\324|\254\276\273\2050?^\203l\277C\354\177?\330kg\277V6\'?1\240\224\276s\262\372\275=\234\003?=MQ\277\276\024{?\235\307y\277\002\237M?\']\374\2766\275\310=\345\232\240>J\353+\277\247\tj?\000\000\200\277\247\tj?J\353+\277\345\232\240>6\275\310=\']\374\276\002\237M?\235\307y\277\276\024{?=MQ\277=\234\003?s\262\372\2751\240\224\276V6\'?\330kg\277C\354\177?^\203l\277\273\2050?\324|\254\276\005\251\226\275\352Z\361>\022\321I\277\370Sx?(;|\2771\333T?\233\365\010\277\203@\026>\223\216\210>\231g\"\277Y\252d?\017\261\177\277\236\330n?\363\0045\277*D\270>0\373H=u3\346\276\003\344E?\007\272v\277\254:}?SHX\277\3329\016?\242\020/\276\314\317x\276\321\177\035?\230\305a\277mN\177?\010\tq\277Bh9?\025\357\303\276\260\n\311\274\200\350\332>p\330A\277\013\372t?$\023~\277\032\224[?*h\023\277\302\305G>\023\\`>\000\000\000\200\200\350\332>\003\344E\277\370Sx?\276\024{\277\002\237M?\352Z\361\2760\373H=\025\357\303>\371\256=\277\013\372t?\254:}\2771\333T?=\234\003\2776\275\310=\324|\254>\363\0045\277\010\tq?m\304~\277\032\224[?\3329\016\277\203@\026>1\240\224>J\353+\277^\203l?\017\261\177\277\230\305a?\300\177\030\277\302\305G>\314\317x>\231g\"\277\330kg?\000\000\200\277\330kg?\231g\"\277\314\317x>\302\305G>\300\177\030\277\230\305a?\017\261\177\277^\203l?J\353+\2771\240\224>\203@\026>\3329\016\277\032\224[?m\304~\277\010\tq?\363\0045\277\324|\254>6\275\310==\234\003\2771\333T?\254:}\277\013\372t?\371\256=\277\025\357\303>0\373H=\352Z\361\276\002\237M?\276\024{\277\370Sx?\003\344E\277\200\350\332>\016\206\260\250\200\350\332\276\003\344E?\370Sx\277\276\024{?\002\237M\277\352Z\361>0\373H\275\025\357\303\276\371\256=?\013\372t\277\254:}?1\333T\277=\234\003?6\275\310\275\324|\254\276\363\0045?\010\tq\277m\304~?\032\224[\277\3329\016?\203@\026\2761\240\224\276J\353+?^\203l\277\017\261\177?\230\305a\277\300\177\030?\302\305G\276\314\317x\276\231g\"?\330kg\277\000\000\200?\330kg\277\231g\"?\314\317x\276\302\305G\276\300\177\030?\230\305a\277\017\261\177?^\203l\277J\353+?1\240\224\276\203@\026\276\3329\016?\032\224[\277m\304~?\010\tq\277\363\0045?\324|\254\2766\275\310\275=\234\003?1\333T\277\254:}?\013\372t\277\371\256=?\025\357\303\2760\373H\275\000\000\000\200u3\346>\002\237M\277(;|?\013\372t\277Bh9?\324|\254\276s\262\372\275\3329\016?\005\276^\277\017\261\177?\247\tj\277\231g\"?\023\\`\276\314\317x\276V6\'?^\203l\277mN\177?\032\224[\277\233\365\010?6\275\310\275*D\270\276\371\256=?\007\272v\277\276\024{?\022\321I\277\200\350\332>\260\n\311<\352Z\361\276=MQ?\254:}\277G\024s?\363\0045\277\345\232\240>\203@\026>*h\023\277\230\305a?C\354\177\277\330kg?\321\177\035\277\302\305G>\223\216\210>J\353+\277\236\330n?m\304~\277SHX?=\234\003\277\005\251\226=\025\357\303>p\330A\277\370Sx?\235\307y\277\003\344E?\312{\317\2760\373H\275\']\374>1\333T\277$\023~?\010\tq\277\273\2050?1\240\224\276\242\020/\276\300\177\030?Y\252d\277\000\000\200?Y\252d\277\300\177\030?\242\020/\2761\240\224\276\273\2050?\010\tq\277$\023~?1\333T\277\']\374>0\373H\275\312{\317\276\003\344E?\235\307y\277\370Sx?p\330A\277\025\357\303>\005\251\226==\234\003\277SHX?m\304~\277\236\330n?J\353+\277\223\216\210>\302\305G>\321\177\035\277\330kg?C\354\177\277\230\305a?*h\023\277\203@\026>\345\232\240>\363\0045\277G\024s?\254:}\277=MQ?\352Z\361\276\260\n\311<\200\350\332>\022\321I\277\276\024{?\007\272v\277\371\256=?*D\270\2766\275\310\275\233\365\010?\032\224[\277mN\177?^\203l\277V6\'?\314\317x\276\023\\`\276\231g\"?\247\tj\277\017\261\177?\005\276^\277\3329\016?s\262\372\275\000\000\000\200\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>\205\003\215\246\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\276\024{\277\003\344E?\025\357\303\2766\275\310\275\3329\016?\230\305a\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\302\305G>\231g\"\277^\203l?m\304~\2771\333T?\352Z\361\276\205\003\r\'\352Z\361>1\333T\277m\304~?^\203l\277\231g\"?\302\305G\2761\240\224\276\363\0045?\013\372t\277\276\024{?\003\344E\277\025\357\303>6\275\310=\3329\016\277\230\305a?\000\000\200\277\230\305a?\3329\016\2776\275\310=\025\357\303>\003\344E\277\276\024{?\013\372t\277\363\0045?1\240\224\276\302\305G\276\231g\"?^\203l\277m\304~?1\333T\277\352Z\361>H\205S\247\352Z\361\2761\333T?m\304~\277^\203l?\231g\"\277\302\305G>1\240\224>\363\0045\277\013\372t?\276\024{\277\003\344E?\025\357\303\2766\275\310\275\3329\016?\230\305a\277\000\000\200?\230\305a\277\3329\016?6\275\310\275\025\357\303\276\003\344E?\276\024{\277\013\372t?\363\0045\2771\240\224>\000\000\000\200\']\374>\032\224[\277C\354\177?\230\305a\277\233\365\010?0\373H\275u3\346\2761\333T?mN\177\277\330kg?*h\023\2776\275\310=\312{\317>\002\237M\277$\023~?^\203l\277\321\177\035?\203@\026\276*D\270\276\003\344E?(;|\277\010\tq?V6\'\277\302\305G>\345\232\240>\371\256=\277\235\307y?\013\372t\277\273\2050?\314\317x\276\223\216\210\276\363\0045?\007\272v\277\370Sx?Bh9\2771\240\224>\023\\`>J\353+\277G\024s?\276\024{\277p\330A?\324|\254\276\242\020/\276\231g\"?\236\330n\277\254:}?\022\321I\277\025\357\303>s\262\372=\300\177\030\277\247\tj?m\304~\277=MQ?\200\350\332\276\005\251\226\275\3329\016?Y\252d\277\017\261\177?SHX\277\352Z\361>\260\n\311<=\234\003\277\005\276^?\000\000\200\277\005\276^?=\234\003\277\260\n\311<\352Z\361>SHX\277\017\261\177?Y\252d\277\3329\016?\005\251\226\275\200\350\332\276=MQ?m\304~\277\247\tj?\300\177\030\277s\262\372=\025\357\303>\022\321I\277\254:}?\236\330n\277\231g\"?\242\020/\276\324|\254\276p\330A?\276\024{\277G\024s?J\353+\277\023\\`>1\240\224>Bh9\277\370Sx?\007\272v\277\363\0045?\223\216\210\276\314\317x\276\273\2050?\013\372t\277\235\307y?\371\256=\277\345\232\240>\302\305G>V6\'\277\010\tq?(;|\277\003\344E?*D\270\276\203@\026\276\321\177\035?^\203l\277$\023~?\002\237M\277\312{\317>6\275\310=*h\023\277\330kg?mN\177\2771\333T?u3\346\276\000\000\000\200=\234\003?\230\305a\277\017\261\177?1\333T\277\200\350\332>6\275\310=\300\177\030\277^\203l?\254:}\277\003\344E?\324|\254\276\302\305G\276J\353+?\013\372t\277\370Sx?\363\0045\277\314\317x>1\240\224>\371\256=\277\276\024{?\010\tq\277\231g\"?\203@\026\276\025\357\303\276\002\237M?m\304~\277\330kg?\3329\016\2770\373H=\352Z\361>\032\224[\277\000\000\200?\032\224[\277\352Z\361>0\373H=\3329\016\277\330kg?m\304~\277\002\237M?\025\357\303\276\203@\026\276\231g\"?\010\tq\277\276\024{?\371\256=\2771\240\224>\314\317x>\363\0045\277\370Sx?\013\372t\277J\353+?\302\305G\276\324|\254\276\003\344E?\254:}\277^\203l?\300\177\030\2776\275\310=\200\350\332>1\333T\277\017\261\177?\230\305a\277=\234\003?\246ue\250=\234\003\277\230\305a?\017\261\177\2771\333T?\200\350\332\2766\275\310\275\300\177\030?^\203l\277\254:}?\003\344E\277\324|\254>\302\305G>J\353+\277\013\372t?\370Sx\277\363\0045?\314\317x\2761\240\224\276\371\256=?\276\024{\277\010\tq?\231g\"\277\203@\026>\025\357\303>\002\237M\277m\304~?\330kg\277\3329\016?0\373H\275\352Z\361\276\032\224[?\000\000\200\277\032\224[?\352Z\361\2760\373H\275\3329\016?\330kg\277m\304~?\002\237M\277\025\357\303>\203@\026>\231g\"\277\010\tq?\276\024{\277\371\256=?1\240\224\276\314\317x\276\363\0045?\370Sx\277\013\372t?J\353+\277\302\305G>\324|\254>\003\344E\277\254:}?^\203l\277\300\177\030?\000\000\000\200\233\365\010?\330kg\277$\023~?\003\344E\277\345\232\240>\314\317x>Bh9\277\276\024{?\236\330n\277\300\177\030?\005\251\226\275\352Z\361\276\005\276^?\017\261\177\277=MQ?\025\357\303\276\242\020/\276J\353+?\007\272v\277\013\372t?V6\'\277\203@\026>\312{\317>1\333T\277C\354\177?\032\224[\277u3\346>6\275\310=\321\177\035\277\010\tq?\235\307y\277\363\0045?\023\\`\276\324|\254\276\022\321I?m\304~\277Y\252d?=\234\003\277\260\n\311\274\3329\016?\247\tj\277\254:}?p\330A\2771\240\224>\223\216\210>\371\256=\277(;|?^\203l\277*h\023?0\373H\275\']\374\276\230\305a?mN\177\277\002\237M?*D\270\276\302\305G\276\273\2050?\370Sx\277G\024s?\231g\"\277s\262\372=\200\350\332>SHX\277\000\000\200?SHX\277\200\350\332>s\262\372=\231g\"\277G\024s?\370Sx\277\273\2050?\302\305G\276*D\270\276\002\237M?mN\177\277\230\305a?\']\374\2760\373H\275*h\023?^\203l\277(;|?\371\256=\277\223\216\210>1\240\224>p\330A\277\254:}?\247\tj\277\3329\016?\260\n\311\274=\234\003\277Y\252d?m\304~\277\022\321I?\324|\254\276\023\\`\276\363\0045?\235\307y\277\010\tq?\321\177\035\2776\275\310=u3\346>\032\224[\277C\354\177?1\333T\277\312{\317>\203@\026>V6\'\277\013\372t?\007\272v\277J\353+?\242\020/\276\025\357\303\276=MQ?\017\261\177\277\005\276^?\352Z\361\276\005\251\226\275\300\177\030?\236\330n\277\276\024{?Bh9\277\000\000\000\200\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?5\325\323\247\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\2775\325S(\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?\350\337\236\250\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\2775\325\323(\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?-\250\214\246\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\025\357\303\276\302\305G\276\363\0045?\276\024{\277^\203l?\3329\016\277\350\337\036)\3329\016?^\203l\277\276\024{?\363\0045\277\302\305G>\025\357\303>1\333T\277\000\000\200?1\333T\277\025\357\303>\302\305G>\363\0045\277\276\024{?^\203l\277\3329\016?;je\250\3329\016\277^\203l?\276\024{\277\363\0045?\302\305G\276\025\357\303\2761\333T?\000\000\200\2771\333T?\000\000\000\200*h\023?\010\tq\277\007\272v?\231g\"\277\005\251\226==\234\003?\247\tj\277\276\024{?\273\2050\277\203@\026>u3\346>\230\305a\277$\023~?\371\256=\277\023\\`>\025\357\303>SHX\277\017\261\177?\022\321I\2771\240\224>\345\232\240>\002\237M\277C\354\177?1\333T\277*D\270>\314\317x>p\330A\277m\304~?\005\276^\277\200\350\332>\242\020/>\363\0045\277(;|?\330kg\277\']\374>6\275\310=V6\'\277\370Sx?\236\330n\277\3329\016?\260\n\311<\300\177\030\277G\024s?\013\372t\277\321\177\035?0\373H\275\233\365\010\277^\203l?\235\307y\277J\353+?s\262\372\275\352Z\361\276Y\252d?\254:}\277Bh9?\302\305G\276\312{\317\276\032\224[?mN\177\277\003\344E?\223\216\210\276\324|\254\276=MQ?\000\000\200\277=MQ?\324|\254\276\223\216\210\276\003\344E?mN\177\277\032\224[?\312{\317\276\302\305G\276Bh9?\254:}\277Y\252d?\352Z\361\276s\262\372\275J\353+?\235\307y\277^\203l?\233\365\010\2770\373H\275\321\177\035?\013\372t\277G\024s?\300\177\030\277\260\n\311<\3329\016?\236\330n\277\370Sx?V6\'\2776\275\310=\']\374>\330kg\277(;|?\363\0045\277\242\020/>\200\350\332>\005\276^\277m\304~?p\330A\277\314\317x>*D\270>1\333T\277C\354\177?\002\237M\277\345\232\240>1\240\224>\022\321I\277\017\261\177?SHX\277\025\357\303>\023\\`>\371\256=\277$\023~?\230\305a\277u3\346>\203@\026>\273\2050\277\276\024{?\247\tj\277\000\000\000\200\300\177\030?\013\372t\277\010\tq?\3329\016\2770\373H\275\231g\"?\370Sx\277^\203l?=\234\003\2776\275\310\275J\353+?\276\024{\277\330kg?\352Z\361\276\203@\026\276\363\0045?\254:}\277\230\305a?\200\350\332\276\302\305G\276\371\256=?m\304~\277\032\224[?\025\357\303\276\314\317x\276\003\344E?\017\261\177\2771\333T?\324|\254\2761\240\224\276\002\237M?\000\000\200\277\002\237M?1\240\224\276\324|\254\2761\333T?\017\261\177\277\003\344E?\314\317x\276\025\357\303\276\032\224[?m\304~\277\371\256=?\302\305G\276\200\350\332\276\230\305a?\254:}\277\363\0045?\203@\026\276\352Z\361\276\330kg?\276\024{\277J\353+?6\275\310\275=\234\003\277^\203l?\370Sx\277\231g\"?0\373H\275\3329\016\277\010\tq?\013\372t\277\300\177\030?_\276\323\247\300\177\030\277\013\372t?\010\tq\277\3329\016?0\373H=\231g\"\277\370Sx?^\203l\277=\234\003?6\275\310=J\353+\277\276\024{?\330kg\277\352Z\361>\203@\026>\363\0045\277\254:}?\230\305a\277\200\350\332>\302\305G>\371\256=\277m\304~?\032\224[\277\025\357\303>\314\317x>\003\344E\277\017\261\177?1\333T\277\324|\254>1\240\224>\002\237M\277\000\000\200?\002\237M\2771\240\224>\324|\254>1\333T\277\017\261\177?\003\344E\277\314\317x>\025\357\303>\032\224[\277m\304~?\371\256=\277\302\305G>\200\350\332>\230\305a\277\254:}?\363\0045\277\203@\026>\352Z\361>\330kg\277\276\024{?J\353+\2776\275\310==\234\003?^\203l\277\370Sx?\000\000\000\200\321\177\035?\370Sx\277\247\tj?\352Z\361\276\242\020/\276\371\256=?mN\177\2771\333T?\345\232\240\276\324|\254\276SHX?m\304~\277Bh9?\203@\026\276\']\374\276^\203l?\007\272v\277\300\177\030?\260\n\311<\231g\"\277\235\307y?\330kg\277u3\346>\302\305G>p\330A\277\017\261\177?=MQ\2771\240\224>*D\270>\032\224[\277$\023~?\363\0045\277s\262\372==\234\003?\236\330n\277\013\372t?*h\023\2770\373H\275V6\'?\276\024{\277Y\252d?\200\350\332\276\023\\`\276\003\344E?C\354\177\277\002\237M?\223\216\210\276\025\357\303\276\005\276^?\254:}\277\273\2050?6\275\310\275\233\365\010\277\010\tq?G\024s\277\3329\016?\005\251\226=J\353+\277(;|?\230\305a\277\312{\317>\314\317x>\022\321I\277\000\000\200?\022\321I\277\314\317x>\312{\317>\230\305a\277(;|?J\353+\277\005\251\226=\3329\016?G\024s\277\010\tq?\233\365\010\2776\275\310\275\273\2050?\254:}\277\005\276^?\025\357\303\276\223\216\210\276\002\237M?C\354\177\277\003\344E?\023\\`\276\200\350\332\276Y\252d?\276\024{\277V6\'?0\373H\275*h\023\277\013\372t?\236\330n\277=\234\003?s\262\372=\363\0045\277$\023~?\032\224[\277*D\270>1\240\224>=MQ\277\017\261\177?p\330A\277\302\305G>u3\346>\330kg\277\235\307y?\231g\"\277\260\n\311<\300\177\030?\007\272v\277^\203l?\']\374\276\203@\026\276Bh9?m\304~\277SHX?\324|\254\276\345\232\240\2761\333T?mN\177\277\000\000\000\200\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\3329\016\277\013\372t?^\203l\277\352Z\361>\302\305G>\003\344E\277\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?\372\t\026\250\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?1\333T\2771\240\224>\025\357\303>\230\305a\277\276\024{?\231g\"\277\372\t\226(\231g\"?\276\024{\277\230\305a?\025\357\303\2761\240\224\2761\333T?m\304~\277\363\0045?6\275\310\275\3329\016\277\013\372t?^\203l\277\352Z\361>\302\305G>\003\344E\277\000\000\200?\003\344E\277\302\305G>\352Z\361>^\203l\277\013\372t?\3329\016\2776\275\310\275\363\0045?m\304~\2771\333T?1\240\224\276\025\357\303\276\230\305a?\276\024{\277\231g\"?\357\035B\250\231g\"\277\276\024{?\230\305a\277\025\357\303>1\240\224>1\333T\277m\304~?\363\0045\2776\275\310=\3329\016?\013\372t\277^\203l?\352Z\361\276\302\305G\276\003\344E?\000\000\200\277\003\344E?\302\305G\276\352Z\361\276^\203l?\013\372t\277\3329\016?6\275\310=\363\0045\277m\304~?\000\000\000\200V6\'?\254:}\277SHX?1\240\224\276\312{\317\276\330kg?\007\272v\277\3329\016?s\262\372=\371\256=\277C\354\177?\003\344E\277\242\020/>=\234\003?G\024s\277^\203l?u3\346\276\314\317x\276=MQ?m\304~\277\273\2050?0\373H\275\321\177\035\277\276\024{?\005\276^\277\324|\254>*D\270>\230\305a\277\235\307y?\300\177\030\277\005\251\226\275\363\0045?mN\177\277\002\237M?\023\\`\276\352Z\361\276\236\330n?\010\tq\277\']\374>\302\305G>\022\321I\277\017\261\177?Bh9\2776\275\310=*h\023?\370Sx\277Y\252d?\025\357\303\276\345\232\240\276\032\224[?(;|\277\231g\"?\260\n\311<J\353+\277$\023~?1\333T\277\223\216\210>\200\350\332>\247\tj\277\013\372t?\233\365\010\277\203@\026\276p\330A?\000\000\200\277p\330A?\203@\026\276\233\365\010\277\013\372t?\247\tj\277\200\350\332>\223\216\210>1\333T\277$\023~?J\353+\277\260\n\311<\231g\"?(;|\277\032\224[?\345\232\240\276\025\357\303\276Y\252d?\370Sx\277*h\023?6\275\310=Bh9\277\017\261\177?\022\321I\277\302\305G>\']\374>\010\tq\277\236\330n?\352Z\361\276\023\\`\276\002\237M?mN\177\277\363\0045?\005\251\226\275\300\177\030\277\235\307y?\230\305a\277*D\270>\324|\254>\005\276^\277\276\024{?\321\177\035\2770\373H\275\273\2050?m\304~\277=MQ?\314\317x\276u3\346\276^\203l?G\024s\277=\234\003?\242\020/>\003\344E\277C\354\177?\371\256=\277s\262\372=\3329\016?\007\272v\277\000\000\000\200J\353+?m\304~\277\002\237M?\302\305G\276=\234\003\277\013\372t?\330kg\277\025\357\303>\324|\254>\230\305a\277\370Sx?\3329\016\277\203@\026\276\003\344E?\017\261\177\277\363\0045?0\373H\275\231g\"\277\254:}?1\333T\277\314\317x>\352Z\361>\010\tq\277^\203l?\200\350\332\2761\240\224\276\032\224[?\276\024{\277\300\177\030?6\275\310=\371\256=\277\000\000\200?\371\256=\2776\275\310=\300\177\030?\276\024{\277\032\224[?1\240\224\276\200\350\332\276^\203l?\010\tq\277\352Z\361>\314\317x>1\333T\277\254:}?\231g\"\2770\373H\275\363\0045?\017\261\177\277\003\344E?\203@\026\276\3329\016\277\370Sx?\230\305a\277\324|\254>\025\357\303>\330kg\277\013\372t?=\234\003\277\302\305G\276\002\237M?m\304~\277J\353+?6\272\215&J\353+\277m\304~?\002\237M\277\302\305G>=\234\003?\013\372t\277\330kg?\025\357\303\276\324|\254\276\230\305a?\370Sx\277\3329\016?\203@\026>\003\344E\277\017\261\177?\363\0045\2770\373H=\231g\"?\254:}\2771\333T?\314\317x\276\352Z\361\276\010\tq?^\203l\277\200\350\332>1\240\224>\032\224[\277\276\024{?\300\177\030\2776\275\310\275\371\256=?\000\000\200\277\371\256=?6\275\310\275\300\177\030\277\276\024{?\032\224[\2771\240\224>\200\350\332>^\203l\277\010\tq?\352Z\361\276\314\317x\2761\333T?\254:}\277\231g\"?0\373H=\363\0045\277\017\261\177?\003\344E\277\203@\026>\3329\016?\370Sx\277\230\305a?\324|\254\276\025\357\303\276\330kg?\000\000\000\200\273\2050?\017\261\177\277p\330A?6\275\310\275\321\177\035\277\254:}?=MQ\277\302\305G>\233\365\010?\370Sx\277\005\276^?1\240\224\276u3\346\276\010\tq?\247\tj\277\025\357\303>*D\270>\330kg\277G\024s?\352Z\361\276\223\216\210\276\032\224[?\235\307y\277\3329\016?\242\020/>\002\237M\277$\023~?\231g\"\277\005\251\226\275\371\256=?C\354\177\277\363\0045?\260\n\311\274J\353+\277mN\177?\003\344E\277s\262\372=\300\177\030?(;|\2771\333T?\023\\`\276=\234\003\277\007\272v?\230\305a\277\345\232\240>\200\350\332>\236\330n\277^\203l?\312{\317\276\324|\254\276Y\252d?\013\372t\277\']\374>\314\317x>SHX\277\276\024{?*h\023\277\203@\026\276\022\321I?m\304~\277V6\'?0\373H=Bh9\277\000\000\200?Bh9\2770\373H=V6\'?m\304~\277\022\321I?\203@\026\276*h\023\277\276\024{?SHX\277\314\317x>\']\374>\013\372t\277Y\252d?\324|\254\276\312{\317\276^\203l?\236\330n\277\200\350\332>\345\232\240>\230\305a\277\007\272v?=\234\003\277\023\\`\2761\333T?(;|\277\300\177\030?s\262\372=\003\344E\277mN\177?J\353+\277\260\n\311\274\363\0045?C\354\177\277\371\256=?\005\251\226\275\231g\"\277$\023~?\002\237M\277\242\020/>\3329\016?\235\307y\277\032\224[?\223\216\210\276\352Z\361\276G\024s?\330kg\277*D\270>\025\357\303>\247\tj\277\010\tq?u3\346\2761\240\224\276\005\276^?\370Sx\277\233\365\010?\302\305G>=MQ\277"
      }
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/MatMul"
  op: "BatchMatMulV2"
  input: "speech_features/windowing/mul"
  input: "speech_features/magnitude_rdf_tmel/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/MatMul_1"
  op: "BatchMatMulV2"
  input: "speech_features/windowing/mul"
  input: "speech_features/magnitude_rdf_tmel/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/mul"
  op: "Mul"
  input: "speech_features/magnitude_rdf_tmel/MatMul"
  input: "speech_features/magnitude_rdf_tmel/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/mul_1"
  op: "Mul"
  input: "speech_features/magnitude_rdf_tmel/MatMul_1"
  input: "speech_features/magnitude_rdf_tmel/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/Add"
  op: "AddV2"
  input: "speech_features/magnitude_rdf_tmel/mul"
  input: "speech_features/magnitude_rdf_tmel/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/Sqrt"
  op: "Sqrt"
  input: "speech_features/magnitude_rdf_tmel/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/magnitude_rdf_tmel/MatMul_2"
  op: "BatchMatMulV2"
  input: "speech_features/magnitude_rdf_tmel/Sqrt"
  input: "speech_features/magnitude_rdf_tmel/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "speech_features/lambda_5/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "speech_features/lambda_5/Maximum"
  op: "Maximum"
  input: "speech_features/magnitude_rdf_tmel/MatMul_2"
  input: "speech_features/lambda_5/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/lambda_5/Log"
  op: "Log"
  input: "speech_features/lambda_5/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/dct/MatMul/b"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
          dim {
            size: 40
          }
        }
        tensor_content: "\233\350!>\236\340!>\246\310!>\270\240!>\325h!>\005!!>N\311 >\270a >N\352\037>\034c\037>/\314\036>\225%\036>ao\035>\242\251\034>m\324\033>\330\357\032>\367\373\031>\345\370\030>\271\346\027>\220\305\026>\205\225\025>\267V\024>E\t\023>P\255\021>\372B\020>h\312\016>\276C\r>#\257\013>\277\014\n>\273\\\010>B\237\006>\177\324\004>\240\374\002>\324\027\001>\225L\376=iP\372=\211;\366=[\016\362=J\311\355=\301l\351=\233\350!>\270\240!>N\311 >\034c\037>ao\035>\330\357\032>\271\346\027>\267V\024>\372B\020>#\257\013>B\237\006>\324\027\001>\211;\366=\301l\351=\260\316\333=om\315=\302U\276=\020\225\256=W9\236=\034Q\215=\307\326w=B/T=P\313/=C\313\n=\354\237\312<\310\352}<xh\313;\202rK\273R@K\274\304w\261\274\306\261\374\274\262\205#\275K!H\275-\013l\275\272\221\207\275z\245\230\275\2551\251\275\241\'\271\275)y\310\275\255\030\327\275\233\350!>\005!!>/\314\036>\330\357\032>\205\225\025>h\312\016>B\237\006>iP\372=.\371\344=om\315=9\347\263=z\245\230=\307\326w=\225\377;=\306\261\374<\310\352}<u\2302#\310\352}\274\306\261\374\274\225\377;\275\307\326w\275z\245\230\2759\347\263\275om\315\275.\371\344\275iP\372\275B\237\006\276h\312\016\276\205\225\025\276\330\357\032\276/\314\036\276\005!!\276\233\350!\276\005!!\276/\314\036\276\330\357\032\276\205\225\025\276h\312\016\276B\237\006\276iP\372\275\233\350!>\270a >m\324\033>\267V\024>\277\014\n>iP\372=\260\316\333=\241\'\271=\214\002\223=B/T=\306\261\374<\316\201\030<R@K\274C\313\n\275G(`\275z\245\230\275\302U\276\275\002o\340\275\225L\376\275#\257\013\276\205\225\025\276\242\251\034\276N\311 \276\236\340!\276N\352\037\276\330\357\032\276E\t\023\276\273\\\010\276\211;\366\275\255\030\327\2759\347\263\275\034Q\215\275K!H\275\026\264\343\274xh\313\273\310\352}<\360/\027=-\013l=W9\236=\033q\303=\233\350!>\034c\037>\271\346\027>#\257\013>\211;\366=om\315=W9\236=B/T=\354\237\312<\202rK\273\306\261\374\274-\013l\275\2551\251\275\255\030\327\275\225L\376\275h\312\016\276\367\373\031\276\270a \276\246\310!\276\225%\036\276\205\225\025\276\273\\\010\276J\311\355\275\033q\303\275\214\002\223\275\225\377;\275\027>\230\274\316\201\030<\360/\027=\366\304\201=9\347\263=\002o\340=\240\374\002>P\255\021>m\324\033>\005!!>\325h!>\242\251\034>E\t\023>\177\324\004>\233\350!>\225%\036>E\t\023>\324\027\001>oM\322=z\245\230=P\313/=\316\201\030<\354\237\312\274-\013l\2759\347\263\275\301l\351\275\277\014\n\276\345\370\030\276N\311 \276\005!!\276\367\373\031\276#\257\013\276J\311\355\275\241\'\271\275\307\326w\275\026\264\343\274xh\313;\262\205#=\214\002\223=om\315=\225L\376=P\255\021>ao\035>\236\340!>/\314\036>\267V\024>\240\374\002>\255\030\327=W9\236=\225\377;=R@K<\304w\261\274G(`\275\020\225\256\275\233\350!>\242\251\034>\276C\r>\301l\351=\2551\251=\225\377;=xh\313;C\313\n\275\214\002\223\275\255\030\327\275B\237\006\276\345\370\030\276\325h!\276\034c\037\276E\t\023\276iP\372\275\302U\276\275-\013l\275\027>\230\274\304w\261<\307\326w=\033q\303=\225L\376=\267V\024>N\352\037>\005!!>\271\346\027>\177\324\004>oM\322=\034Q\215=\306\261\374<\316\201\030\274K!H\275\020\225\256\275J\311\355\275h\312\016\276ao\035\276\236\340!\276m\324\033\276#\257\013\276\233\350!>\330\357\032>B\237\006>om\315=\307\326w=\310\352}<\306\261\374\274z\245\230\275.\371\344\275h\312\016\276/\314\036\276\005!!\276\205\225\025\276iP\372\2759\347\263\275\225\377;\275W\362\005\244\225\377;=9\347\263=iP\372=\205\225\025>\005!!>/\314\036>h\312\016>.\371\344=z\245\230=\306\261\374<\310\352}\274\307\326w\275om\315\275B\237\006\276\330\357\032\276\233\350!\276\330\357\032\276B\237\006\276om\315\275\307\326w\275\310\352}\274\306\261\374<z\245\230=\233\350!>\345\370\030>\225L\376=\020\225\256=\360/\027=\310\352}\274\272\221\207\275\002o\340\275\372B\020\276\270a \276/\314\036\276#\257\013\276oM\322\275-\013l\275xh\313\273\225\377;=\302U\276=\177\324\004>m\324\033>\270\240!>\205\225\025>[\016\362=W9\236=\026\264\343<\354\237\312\274z\245\230\275J\311\355\275\267V\024\276\325h!\276\242\251\034\276B\237\006\276\033q\303\275K!H\275\202rK;G(`=om\315=\277\014\n>\225%\036>N\311 >P\255\021>\233\350!>\220\305\026>J\311\355=\034Q\215=R@K<\225\377;\275)y\310\275#\257\013\276N\352\037\276\225%\036\276B\237\006\276\241\'\271\275\360/\027\275\304w\261<W9\236=iP\372=\367\373\031>\270\240!>E\t\023>\002o\340=\307\326w=\202rK;G(`\275\255\030\327\275\372B\020\276\005!!\276m\324\033\276\324\027\001\276\2551\251\275\026\264\343\274\306\261\374<\020\225\256=\240\374\002>\242\251\034>N\311 >h\312\016>oM\322=B/T=xh\313\273\366\304\201\275\233\350!>\267V\024>\260\316\333=B/T=R@K\274z\245\230\275\225L\376\275\242\251\034\276N\352\037\276\273\\\010\2769\347\263\275\026\264\343\274\360/\027=\033q\303=\276C\r>\005!!>\367\373\031>[\016\362=\272\221\207=\202rK;\307\326w\275\301l\351\275\271\346\027\276\270\240!\276\372B\020\276om\315\275P\313/\275\304w\261<\2551\251=\177\324\004>/\314\036>\225%\036>\240\374\002>\226\275\243=\027>\230<\225\377;\275oM\322\275P\255\021\276\246\310!\276\220\305\026\276\233\350!>P\255\021>)y\310=C\313\n=\360/\027\275om\315\275E\t\023\276\236\340!\276\372B\020\276\033q\303\275\306\261\374\274\262\205#=oM\322=\267V\024>\246\310!>h\312\016>\302U\276=\026\264\343<P\313/\275\255\030\327\275\205\225\025\276\270\240!\276\276C\r\276\241\'\271\275\354\237\312\274\225\377;=\260\316\333=\220\305\026>\325h!>#\257\013>9\347\263=\304w\261<K!H\275\002o\340\275\271\346\027\276\005!!\276\277\014\n\276\020\225\256\275\027>\230\274B/T=\233\350!>h\312\016>9\347\263=\310\352}<\307\326w\275iP\372\275/\314\036\276\330\357\032\276.\371\344\275\225\377;\275\306\261\374<om\315=\205\225\025>\005!!>B\237\006>z\245\230=\222>_$z\245\230\275B\237\006\276\005!!\276\205\225\025\276om\315\275\306\261\374\274\225\377;=.\371\344=\330\357\032>/\314\036>iP\372=\307\326w=\310\352}\2749\347\263\275h\312\016\276\233\350!\276h\312\016\2769\347\263\275\310\352}\274\307\326w=iP\372=/\314\036>\330\357\032>\233\350!>#\257\013>W9\236=\202rK\273\2551\251\275h\312\016\276\246\310!\276\273\\\010\276\214\002\223\275\316\201\030<9\347\263=P\255\021>\325h!>\177\324\004>\272\221\207=\310\352}\274\302U\276\275\267V\024\276N\311 \276\324\027\001\276\307\326w\275\304w\261<)y\310=\220\305\026>N\352\037>iP\372=G(`=\026\264\343\274oM\322\275\345\370\030\276/\314\036\276[\016\362\275K!H\275C\313\n=\260\316\333=\330\357\032>ao\035>\301l\351=P\313/=\262\205#\275\233\350!>\273\\\010>\272\221\207=\304w\261\274oM\322\275\330\357\032\276m\324\033\276\255\030\327\275\354\237\312\274\366\304\201=B\237\006>\236\340!>\277\014\n>\034Q\215=\027>\230\274om\315\275\367\373\031\276\242\251\034\276\260\316\333\275\026\264\343\274\307\326w=\177\324\004>\246\310!>#\257\013>\214\002\223=\310\352}\274)y\310\275\345\370\030\276ao\035\276\002o\340\275\306\261\374\274-\013l=\240\374\002>\270\240!>\276C\r>z\245\230=R@K\274\033q\303\275\271\346\027\276\225%\036\276\233\350!>\177\324\004>G(`=\262\205#\275\211;\366\275\005!!\276\276C\r\276\034Q\215\275\354\237\312<\002o\340=/\314\036>\267V\024>\2551\251=\316\201\030\274)y\310\275\330\357\032\276\367\373\031\276\033q\303\275xh\313\273\020\225\256=\205\225\025>\225%\036>\260\316\333=\304w\261<\214\002\223\275h\312\016\276N\311 \276[\016\362\275\360/\027\275-\013l=B\237\006>\236\340!>\240\374\002>B/T=P\313/\275iP\372\275\325h!\276#\257\013\276\272\221\207\275\026\264\343<\233\350!>\324\027\001>P\313/=-\013l\275\277\014\n\276\005!!\276J\311\355\275\026\264\343\274\214\002\223=P\255\021>/\314\036>\255\030\327=R@K<\020\225\256\275\271\346\027\276\330\357\032\276\302U\276\275\202rK;)y\310=\242\251\034>\205\225\025>\226\275\243=\027>\230\274\002o\340\275N\352\037\276h\312\016\276\272\221\207\275C\313\n=\211;\366=\270\240!>B\237\006>B/T=K!H\275\177\324\004\276\246\310!\276iP\372\275\360/\027\275\366\304\201=\276C\r>\270a >\233\350!>iP\372=\306\261\374<z\245\230\275\205\225\025\276\330\357\032\2769\347\263\275\310\352}<.\371\344=\005!!>B\237\006>\225\377;=\307\326w\275h\312\016\276/\314\036\276om\315\275fE\234\244om\315=/\314\036>h\312\016>\307\326w=\225\377;\275B\237\006\276\005!!\276.\371\344\275\310\352}\2749\347\263=\330\357\032>\205\225\025>z\245\230=\306\261\374\274iP\372\275\233\350!\276iP\372\275\306\261\374\274z\245\230=\205\225\025>\330\357\032>9\347\263=\310\352}\274\233\350!>[\016\362=\027>\230<\241\'\271\275ao\035\276h\312\016\276G(`\275-\013l=\372B\020>\242\251\034>9\347\263=\304w\261\274\211;\366\275\236\340!\276J\311\355\275\310\352}\274\302U\276=\225%\036>\276C\r>B/T=\307\326w\275P\255\021\276m\324\033\276\020\225\256\275\354\237\312<iP\372=\246\310!>\301l\351=R@K<\033q\303\275/\314\036\276#\257\013\276K!H\275\366\304\201=E\t\023>\330\357\032>\2551\251=\026\264\343\274\225L\376\275\270\240!\276\233\350!>\301l\351=xh\313;\255\030\327\275\325h!\276iP\372\275\027>\230\274\033q\303=N\352\037>\177\324\004>\306\261\374<\020\225\256\275ao\035\276#\257\013\276P\313/\275z\245\230=\367\373\031>P\255\021>G(`=\366\304\201\275\205\225\025\276\220\305\026\276\272\221\207\275B/T=\372B\020>\330\357\032>W9\236=\262\205#\275\277\014\n\276\225%\036\2769\347\263\275\026\264\343<\240\374\002>\270a >)y\310=\310\352}\274\211;\366\275\270\240!\276\260\316\333\275\202rK;\233\350!>\002o\340=xh\313\273[\016\362\275\325h!\276om\315\275\027>\230<\324\027\001>N\352\037>\241\'\271=\306\261\374\274\273\\\010\276ao\035\276\226\275\243\275P\313/=h\312\016>\367\373\031>\034Q\215=G(`\275\267V\024\276\205\225\025\276-\013l\275\272\221\207=\345\370\030>\372B\020>\225\377;=W9\236\275\242\251\034\276\277\014\n\276C\313\n\2759\347\263=\034c\037>\240\374\002>\304w\261<)y\310\275\005!!\276\211;\366\275\316\201\030\274\260\316\333=\236\340!>\233\350!>\255\030\327=\027>\230\274\177\324\004\276ao\035\276z\245\230\275G(`=\220\305\026>\372B\020>\262\205#=9\347\263\275\270a \276\211;\366\275\202rK\273J\311\355=\005!!>\302U\276=C\313\n\275\276C\r\276\345\370\030\276\307\326w\275\034Q\215=m\324\033>\273\\\010>\354\237\312<om\315\275\246\310!\276\002o\340\275R@K<\324\027\001>/\314\036>\226\275\243=K!H\275\267V\024\276E\t\023\276\225\377;\275\2551\251=\034c\037>\225L\376=\316\201\030<\233\350!>om\315=\306\261\374\274h\312\016\276\205\225\025\276\225\377;\2759\347\263=\005!!>.\371\344=\310\352}\274B\237\006\276\330\357\032\276\307\326w\275z\245\230=/\314\036>iP\372=\203\353\310$iP\372\275/\314\036\276z\245\230\275\307\326w=\330\357\032>B\237\006>\310\352}<.\371\344\275\005!!\2769\347\263\275\225\377;=\205\225\025>h\312\016>\306\261\374<om\315\275\233\350!\276om\315\275\306\261\374<h\312\016>\205\225\025>\225\377;=9\347\263\275\005!!\276\233\350!>\033q\303=P\313/\275\220\305\026\276\277\014\n\276\310\352}\274J\311\355=\034c\037>\214\002\223=\034Q\215\275/\314\036\276[\016\362\275R@K<\273\\\010>\271\346\027>\225\377;=\302U\276\275\236\340!\276)y\310\275\262\205#=\205\225\025>#\257\013>\027>\230<\301l\351\275N\352\037\276z\245\230\275\272\221\207=\225%\036>\211;\366=\316\201\030\274B\237\006\276\345\370\030\276K!H\275\241\'\271=\246\310!>om\315=\360/\027\275\267V\024\276\276C\r\276\304w\261\274\233\350!>\241\'\271=G(`\275\242\251\034\276\211;\366\275\310\352}<\276C\r>P\255\021>\354\237\312<\301l\351\275/\314\036\276\366\304\201\275\2551\251=\270\240!>)y\310=\225\377;\275\367\373\031\276\324\027\001\276xh\313;\273\\\010>\205\225\025>C\313\n=\260\316\333\275\270a \276\214\002\223\275z\245\230=N\311 >\255\030\327=\360/\027\275\220\305\026\276B\237\006\276\202rK\273\240\374\002>\345\370\030>P\313/=om\315\275\325h!\276\226\275\243\275\272\221\207=\034c\037>\233\350!>\020\225\256=\272\221\207\275\270a \276oM\322\275\225\377;=m\324\033>[\016\362=\354\237\312\274\267V\024\276B\237\006\276\202rK;\277\014\n>P\255\021>\027>\230<iP\372\275\367\373\031\276\262\205#\275\260\316\333=\034c\037>\307\326w=\241\'\271\275\246\310!\276\226\275\243\275\214\002\223=\005!!>)y\310=B/T\275ao\035\276\301l\351\275\306\261\374<\220\305\026>\240\374\002>\316\201\030\274\276C\r\276h\312\016\276R@K\274\324\027\001>\271\346\027>C\313\n=\233\350!>\226\275\243=W9\236\275\236\340!\276\2551\251\275z\245\230=\246\310!>\020\225\256=\214\002\223\275\270\240!\2769\347\263\275\034Q\215=\325h!>\241\'\271=\272\221\207\275\005!!\276\302U\276\275\366\304\201=N\311 >\033q\303=\307\326w\275\270a \276)y\310\275-\013l=N\352\037>om\315=G(`\275\034c\037\276oM\322\275B/T=/\314\036>\255\030\327=K!H\275\225%\036\276\260\316\333\275\225\377;=ao\035>\002o\340=P\313/\275\242\251\034\276\233\350!>z\245\230=9\347\263\275\005!!\276\307\326w\275om\315=/\314\036>\225\377;=.\371\344\275\330\357\032\276\306\261\374\274iP\372=\205\225\025>\310\352}<B\237\006\276h\312\016\276f\010I%h\312\016>B\237\006>\310\352}\274\205\225\025\276iP\372\275\306\261\374<\330\357\032>.\371\344=\225\377;\275/\314\036\276om\315\275\307\326w=\005!!>9\347\263=z\245\230\275\233\350!\276z\245\230\2759\347\263=\005!!>\307\326w=om\315\275/\314\036\276\225\377;\275\233\350!>\034Q\215=)y\310\275\225%\036\276\360/\027\275iP\372=E\t\023>\202rK;\372B\020\276\324\027\001\276\306\261\374<\242\251\034>oM\322=\366\304\201\275\246\310!\276z\245\230\275\302U\276=\034c\037>P\313/=[\016\362\275\205\225\025\276\316\201\030\274\276C\r>\177\324\004>\354\237\312\274\330\357\032\276\260\316\333\275-\013l=\325h!>\226\275\243=9\347\263\275\270a \276K!H\275\301l\351=\271\346\027>\310\352}<\277\014\n\276\273\\\010\276\027>\230<\345\370\030>\233\350!>\366\304\201=\260\316\333\275\345\370\030\276R@K\274h\312\016>\225L\376=\262\205#\275N\352\037\276\020\225\256\2759\347\263=\034c\037>\360/\027=\324\027\001\276\276C\r\276\310\352}<\367\373\031>\255\030\327=\272\221\207\275\236\340!\276\307\326w\275\002o\340=\271\346\027>\316\201\030<\372B\020\276iP\372\275P\313/=\270a >\2551\251=\241\'\271\275/\314\036\276C\313\n\275\240\374\002>#\257\013>\027>\230\274\330\357\032\276oM\322\275\034Q\215=\246\310!>-\013l=\233\350!>-\013l=J\311\355\275P\255\021\276R@K<\330\357\032>)y\310=\226\275\243\275N\352\037\276C\313\n\275B\237\006>\177\324\004>\360/\027\275\270a \276W9\236\275om\315=\367\373\031>\316\201\030<E\t\023\276\301l\351\275\307\326w=\236\340!>G(`=[\016\362\275\372B\020\276\310\352}<m\324\033>\033q\303=\2551\251\275\034c\037\276\306\261\374\274\273\\\010>\240\374\002>\262\205#\275N\311 \276z\245\230\275oM\322=\345\370\030>xh\313;\267V\024\276\233\350!>B/T=\225L\376\275\273\\\010\276\360/\027=\005!!>\272\221\207=\301l\351\275\372B\020\276\304w\261</\314\036>\226\275\243=oM\322\275\220\305\026\276xh\313;\330\357\032>\302U\276=\241\'\271\275m\324\033\276\316\201\030\274\205\225\025>\255\030\327=W9\236\275\034c\037\276\354\237\312\274h\312\016>J\311\355=\366\304\201\275\325h!\276\262\205#\275B\237\006>\324\027\001>K!H\275\236\340!\276G(`\275iP\372=\277\014\n>C\313\n\275N\311 \276\034Q\215\275\233\350!>\225\377;=B\237\006\276iP\372\275\307\326w=\005!!>\306\261\374<h\312\016\276.\371\344\275z\245\230=/\314\036>\310\352}<\205\225\025\276om\315\2759\347\263=\330\357\032>\212v\352%\330\357\032\2769\347\263\275om\315=\205\225\025>\310\352}\274/\314\036\276z\245\230\275.\371\344=h\312\016>\306\261\374\274\005!!\276\307\326w\275iP\372=B\237\006>\225\377;\275\233\350!\276\225\377;\275B\237\006>iP\372=\307\326w\275\005!!\276\306\261\374\274h\312\016>\233\350!>\262\205#=\276C\r\276\002o\340\275\2551\251=\330\357\032>xh\313\273\225%\036\276\214\002\223\275[\016\362=B\237\006>B/T\275\325h!\276\026\264\343\274E\t\023>om\315=\302U\276\275\220\305\026\276\027>\230<\270a >\307\326w=\324\027\001\276\225L\376\275\366\304\201=N\352\037>\310\352}<\271\346\027\276\241\'\271\275oM\322=P\255\021>\306\261\374\274\270\240!\276K!H\275\273\\\010>J\311\355=z\245\230\275ao\035\276\202rK\273m\324\033>\226\275\243=\233\350!>C\313\n=E\t\023\276\033q\303\275oM\322=h\312\016>P\313/\275\270\240!\276\354\237\312\274\220\305\026>9\347\263=\002o\340\275\277\014\n\276B/T=N\311 >\310\352}<\367\373\031\276\226\275\243\275J\311\355=\177\324\004>\307\326w\275\034c\037\276xh\313\273\242\251\034>\214\002\223=iP\372\275\225L\376\275\034Q\215=ao\035>\202rK\273/\314\036\276\366\304\201\275\240\374\002>[\016\362=W9\236\275\330\357\032\276R@K<\270a >G(`=\273\\\010\276\233\350!>\026\264\343<\271\346\027\276\226\275\243\275\211;\366=iP\372=W9\236\275\345\370\030\276\354\237\312<\236\340!>\306\261\374<\220\305\026\276\2551\251\275[\016\362=\225L\376=z\245\230\275\367\373\031\276\304w\261<\246\310!>C\313\n=\205\225\025\276\020\225\256\275J\311\355=\324\027\001>\214\002\223\275\330\357\032\276\027>\230<\270\240!>\360/\027=\267V\024\2769\347\263\275\301l\351=\240\374\002>\034Q\215\275m\324\033\276\310\352}<\325h!>\262\205#=E\t\023\276\241\'\271\275\233\350!>\304w\261<m\324\033\276\366\304\201\275\277\014\n>om\315=\260\316\333\275\177\324\004\276\214\002\223=\345\370\030>\306\261\374\274\270\240!\276R@K\274\225%\036>G(`=h\312\016\276\302U\276\275\301l\351=\225L\376=\226\275\243\275\205\225\025\276\262\205#=N\311 >\202rK;N\352\037\276\225\377;\275E\t\023>\020\225\256=\211;\366\275[\016\362\2759\347\263=P\255\021>K!H\275\034c\037\276xh\313;\005!!>\360/\027=\220\305\026\276W9\236\275\324\027\001>\233\350!>\310\352}</\314\036\276\225\377;\275\205\225\025>z\245\230=B\237\006\276om\315\275.\371\344=iP\372=9\347\263\275h\312\016\276\307\326w=\330\357\032>\306\261\374\274\005!!\276\022\240\365\245\005!!>\306\261\374<\330\357\032\276\307\326w\275h\312\016>9\347\263=iP\372\275.\371\344\275om\315=B\237\006>z\245\230\275\205\225\025\276\225\377;=/\314\036>\310\352}\274\233\350!\276\310\352}\274/\314\036>\225\377;=\205\225\025\276z\245\230\275B\237\006>om\315=\233\350!>\316\201\030<N\311 \276\026\264\343\274ao\035>\225\377;=\271\346\027\276\366\304\201\275\372B\020>\226\275\243=B\237\006\276\033q\303\275\211;\366=\002o\340=\260\316\333\275iP\372\275\302U\276=\273\\\010>W9\236\275P\255\021\276\307\326w=\345\370\030>P\313/\275\225%\036\276\354\237\312<\005!!>xh\313\273\236\340!\276R@K\274\270a >\306\261\374<\242\251\034\276K!H\275\220\305\026>\272\221\207=h\312\016\276\2551\251\275\177\324\004>)y\310=[\016\362\275\233\350!>\202rK;\246\310!\276\316\201\030\274\325h!>\310\352}<N\311 \276\304w\261\274N\352\037>\026\264\343</\314\036\276C\313\n\275ao\035>\262\205#=m\324\033\276\225\377;\275\367\373\031>B/T=\271\346\027\276-\013l\275\205\225\025>\366\304\201=E\t\023\276\034Q\215\275\372B\020>z\245\230=\276C\r\276\226\275\243\275\277\014\n>\020\225\256=B\237\006\276\241\'\271\275\240\374\002>\033q\303=\225L\376\275om\315\275\211;\366=\255\030\327=J\311\355\275\002o\340\275\233\350!>\202rK\273\246\310!\276\316\201\030<\325h!>\310\352}\274N\311 \276\304w\261<N\352\037>\026\264\343\274/\314\036\276C\313\n=ao\035>\262\205#\275m\324\033\276\225\377;=\367\373\031>B/T\275\271\346\027\276-\013l=\205\225\025>\366\304\201\275E\t\023\276\034Q\215=\372B\020>z\245\230\275\276C\r\276\226\275\243=\277\014\n>\020\225\256\275B\237\006\276\241\'\271=\240\374\002>\033q\303\275\225L\376\275om\315=\211;\366=\255\030\327\275J\311\355\275\002o\340=\233\350!>\316\201\030\274N\311 \276\026\264\343<ao\035>\225\377;\275\271\346\027\276\366\304\201=\372B\020>\226\275\243\275B\237\006\276\033q\303=\211;\366=\002o\340\275\260\316\333\275iP\372=\302U\276=\273\\\010\276W9\236\275P\255\021>\307\326w=\345\370\030\276P\313/\275\225%\036>\354\237\312<\005!!\276xh\313\273\236\340!>R@K\274\270a \276\306\261\374<\242\251\034>K!H\275\220\305\026\276\272\221\207=h\312\016>\2551\251\275\177\324\004\276)y\310=[\016\362=\233\350!>\310\352}\274/\314\036\276\225\377;=\205\225\025>z\245\230\275B\237\006\276om\315=.\371\344=iP\372\2759\347\263\275h\312\016>\307\326w=\330\357\032\276\306\261\374\274\005!!>:\017\006\245\005!!\276\306\261\374<\330\357\032>\307\326w\275h\312\016\2769\347\263=iP\372=.\371\344\275om\315\275B\237\006>z\245\230=\205\225\025\276\225\377;\275/\314\036>\310\352}<\233\350!\276\310\352}</\314\036>\225\377;\275\205\225\025\276z\245\230=B\237\006>om\315\275\233\350!>\304w\261\274m\324\033\276\366\304\201=\277\014\n>om\315\275\260\316\333\275\177\324\004>\214\002\223=\345\370\030\276\306\261\374\274\270\240!>R@K\274\225%\036\276G(`=h\312\016>\302U\276\275\301l\351\275\225L\376=\226\275\243=\205\225\025\276\262\205#\275N\311 >\202rK\273N\352\037\276\225\377;=E\t\023>\020\225\256\275\211;\366\275[\016\362=9\347\263=P\255\021\276K!H\275\034c\037>xh\313;\005!!\276\360/\027=\220\305\026>W9\236\275\324\027\001\276\233\350!>\026\264\343\274\271\346\027\276\226\275\243=\211;\366=iP\372\275W9\236\275\345\370\030>\354\237\312<\236\340!\276\306\261\374<\220\305\026>\2551\251\275[\016\362\275\225L\376=z\245\230=\367\373\031\276\304w\261\274\246\310!>C\313\n\275\205\225\025\276\020\225\256=J\311\355=\324\027\001\276\214\002\223\275\330\357\032>\027>\230<\270\240!\276\360/\027=\267V\024>9\347\263\275\301l\351\275\240\374\002>\034Q\215=m\324\033\276\310\352}\274\325h!>\262\205#\275E\t\023\276\241\'\271=\233\350!>C\313\n\275E\t\023\276\033q\303=oM\322=h\312\016\276P\313/\275\270\240!>\354\237\312\274\220\305\026\2769\347\263=\002o\340=\277\014\n\276B/T\275N\311 >\310\352}\274\367\373\031\276\226\275\243=J\311\355=\177\324\004\276\307\326w\275\034c\037>xh\313\273\242\251\034\276\214\002\223=iP\372=\225L\376\275\034Q\215\275ao\035>\202rK;/\314\036\276\366\304\201=\240\374\002>[\016\362\275W9\236\275\330\357\032>R@K<\270a \276G(`=\273\\\010>\233\350!>\262\205#\275\276C\r\276\002o\340=\2551\251=\330\357\032\276xh\313\273\225%\036>\214\002\223\275[\016\362\275B\237\006>B/T=\325h!\276\026\264\343<E\t\023>om\315\275\302U\276\275\220\305\026>\027>\230<\270a \276\307\326w=\324\027\001>\225L\376\275\366\304\201\275N\352\037>\310\352}\274\271\346\027\276\241\'\271=oM\322=P\255\021\276\306\261\374\274\270\240!>K!H\275\273\\\010\276J\311\355=z\245\230=ao\035\276\202rK;m\324\033>\226\275\243\275\233\350!>\225\377;\275B\237\006\276iP\372=\307\326w=\005!!\276\306\261\374<h\312\016>.\371\344\275z\245\230\275/\314\036>\310\352}\274\205\225\025\276om\315=9\347\263=\330\357\032\276Wx\337$\330\357\032>9\347\263\275om\315\275\205\225\025>\310\352}</\314\036\276z\245\230=.\371\344=h\312\016\276\306\261\374\274\005!!>\307\326w\275iP\372\275B\237\006>\225\377;=\233\350!\276\225\377;=B\237\006>iP\372\275\307\326w\275\005!!>\306\261\374\274h\312\016\276\233\350!>B/T\275\225L\376\275\273\\\010>\360/\027=\005!!\276\272\221\207=\301l\351=\372B\020\276\304w\261\274/\314\036>\226\275\243\275oM\322\275\220\305\026>xh\313;\330\357\032\276\302U\276=\241\'\271=m\324\033\276\316\201\030<\205\225\025>\255\030\327\275W9\236\275\034c\037>\354\237\312\274h\312\016\276J\311\355=\366\304\201=\325h!\276\262\205#=B\237\006>\324\027\001\276K!H\275\236\340!>G(`\275iP\372\275\277\014\n>C\313\n=N\311 \276\034Q\215=\233\350!>-\013l\275J\311\355\275P\255\021>R@K<\330\357\032\276)y\310=\226\275\243=N\352\037\276C\313\n=B\237\006>\177\324\004\276\360/\027\275\270a >W9\236\275om\315\275\367\373\031>\316\201\030\274E\t\023\276\301l\351=\307\326w=\236\340!\276G(`=[\016\362=\372B\020\276\310\352}\274m\324\033>\033q\303\275\2551\251\275\034c\037>\306\261\374\274\273\\\010\276\240\374\002>\262\205#=N\311 \276z\245\230=oM\322=\345\370\030\276xh\313;\267V\024>\233\350!>\366\304\201\275\260\316\333\275\345\370\030>R@K\274h\312\016\276\225L\376=\262\205#=N\352\037\276\020\225\256=9\347\263=\034c\037\276\360/\027=\324\027\001>\276C\r\276\310\352}\274\367\373\031>\255\030\327\275\272\221\207\275\236\340!>\307\326w\275\002o\340\275\271\346\027>\316\201\030\274\372B\020\276iP\372=P\313/=\270a \276\2551\251=\241\'\271=/\314\036\276C\313\n=\240\374\002>#\257\013\276\027>\230\274\330\357\032>oM\322\275\034Q\215\275\246\310!>-\013l\275\233\350!>\034Q\215\275)y\310\275\225%\036>\360/\027\275iP\372\275E\t\023>\202rK\273\372B\020\276\324\027\001>\306\261\374<\242\251\034\276oM\322=\366\304\201=\246\310!\276z\245\230=\302U\276=\034c\037\276P\313/=[\016\362=\205\225\025\276\316\201\030<\276C\r>\177\324\004\276\354\237\312\274\330\357\032>\260\316\333\275-\013l\275\325h!>\226\275\243\2759\347\263\275\270a >K!H\275\301l\351\275\271\346\027>\310\352}\274\277\014\n\276\273\\\010>\027>\230<\345\370\030\276\233\350!>z\245\230\2759\347\263\275\005!!>\307\326w\275om\315\275/\314\036>\225\377;\275.\371\344\275\330\357\032>\306\261\374\274iP\372\275\205\225\025>\310\352}\274B\237\006\276h\312\016>:\322\262\244h\312\016\276B\237\006>\310\352}<\205\225\025\276iP\372=\306\261\374<\330\357\032\276.\371\344=\225\377;=/\314\036\276om\315=\307\326w=\005!!\2769\347\263=z\245\230=\233\350!\276z\245\230=9\347\263=\005!!\276\307\326w=om\315=/\314\036\276\225\377;=\233\350!>\226\275\243\275W9\236\275\236\340!>\2551\251\275z\245\230\275\246\310!>\020\225\256\275\214\002\223\275\270\240!>9\347\263\275\034Q\215\275\325h!>\241\'\271\275\272\221\207\275\005!!>\302U\276\275\366\304\201\275N\311 >\033q\303\275\307\326w\275\270a >)y\310\275-\013l\275N\352\037>om\315\275G(`\275\034c\037>oM\322\275B/T\275/\314\036>\255\030\327\275K!H\275\225%\036>\260\316\333\275\225\377;\275ao\035>\002o\340\275P\313/\275\242\251\034>\233\350!>\020\225\256\275\272\221\207\275\270a >oM\322\275\225\377;\275m\324\033>[\016\362\275\354\237\312\274\267V\024>B\237\006\276\202rK\273\277\014\n>P\255\021\276\027>\230<iP\372=\367\373\031\276\262\205#=\260\316\333=\034c\037\276\307\326w=\241\'\271=\246\310!\276\226\275\243=\214\002\223=\005!!\276)y\310=B/T=ao\035\276\301l\351=\306\261\374<\220\305\026\276\240\374\002>\316\201\030<\276C\r\276h\312\016>R@K\274\324\027\001\276\271\346\027>C\313\n\275\233\350!>\241\'\271\275G(`\275\242\251\034>\211;\366\275\310\352}\274\276C\r>P\255\021\276\354\237\312<\301l\351=/\314\036\276\366\304\201=\2551\251=\270\240!\276)y\310=\225\377;=\367\373\031\276\324\027\001>xh\313;\273\\\010\276\205\225\025>C\313\n\275\260\316\333\275\270a >\214\002\223\275z\245\230\275N\311 >\255\030\327\275\360/\027\275\220\305\026>B\237\006\276\202rK;\240\374\002>\345\370\030\276P\313/=om\315=\325h!\276\226\275\243=\272\221\207=\034c\037\276\233\350!>\033q\303\275P\313/\275\220\305\026>\277\014\n\276\310\352}<J\311\355=\034c\037\276\214\002\223=\034Q\215=/\314\036\276[\016\362=R@K<\273\\\010\276\271\346\027>\225\377;\275\302U\276\275\236\340!>)y\310\275\262\205#\275\205\225\025>#\257\013\276\027>\230<\301l\351=N\352\037\276z\245\230=\272\221\207=\225%\036\276\211;\366=\316\201\030<B\237\006\276\345\370\030>K!H\275\241\'\271\275\246\310!>om\315\275\360/\027\275\267V\024>\276C\r\276\304w\261<\233\350!>om\315\275\306\261\374\274h\312\016>\205\225\025\276\225\377;=9\347\263=\005!!\276.\371\344=\310\352}<B\237\006\276\330\357\032>\307\326w\275z\245\230\275/\314\036>iP\372\275\037\2562&iP\372=/\314\036\276z\245\230=\307\326w=\330\357\032\276B\237\006>\310\352}\274.\371\344\275\005!!>9\347\263\275\225\377;\275\205\225\025>h\312\016\276\306\261\374<om\315=\233\350!\276om\315=\306\261\374<h\312\016\276\205\225\025>\225\377;\2759\347\263\275\005!!>\233\350!>\255\030\327\275\027>\230\274\177\324\004>ao\035\276z\245\230=G(`=\220\305\026\276\372B\020>\262\205#\2759\347\263\275\270a >\211;\366\275\202rK;J\311\355=\005!!\276\302U\276=C\313\n=\276C\r\276\345\370\030>\307\326w\275\034Q\215\275m\324\033>\273\\\010\276\354\237\312<om\315=\246\310!\276\002o\340=R@K<\324\027\001\276/\314\036>\226\275\243\275K!H\275\267V\024>E\t\023\276\225\377;=\2551\251=\034c\037\276\225L\376=\316\201\030\274\233\350!>\002o\340\275xh\313\273[\016\362=\325h!\276om\315=\027>\230<\324\027\001\276N\352\037>\241\'\271\275\306\261\374\274\273\\\010>ao\035\276\226\275\243=P\313/=h\312\016\276\367\373\031>\034Q\215\275G(`\275\267V\024>\205\225\025\276-\013l=\272\221\207=\345\370\030\276\372B\020>\225\377;\275W9\236\275\242\251\034>\277\014\n\276C\313\n=9\347\263=\034c\037\276\240\374\002>\304w\261\274)y\310\275\005!!>\211;\366\275\316\201\030<\260\316\333=\236\340!\276\233\350!>\301l\351\275xh\313;\255\030\327=\325h!\276iP\372=\027>\230\274\033q\303\275N\352\037>\177\324\004\276\306\261\374<\020\225\256=ao\035\276#\257\013>P\313/\275z\245\230\275\367\373\031>P\255\021\276G(`=\366\304\201=\205\225\025\276\220\305\026>\272\221\207\275B/T\275\372B\020>\330\357\032\276W9\236=\262\205#=\277\014\n\276\225%\036>9\347\263\275\026\264\343\274\240\374\002>\270a \276)y\310=\310\352}<\211;\366\275\270\240!>\260\316\333\275\202rK\273\233\350!>[\016\362\275\027>\230<\241\'\271=ao\035\276h\312\016>G(`\275-\013l\275\372B\020>\242\251\034\2769\347\263=\304w\261<\211;\366\275\236\340!>J\311\355\275\310\352}<\302U\276=\225%\036\276\276C\r>B/T\275\307\326w\275P\255\021>m\324\033\276\020\225\256=\354\237\312<iP\372\275\246\310!>\301l\351\275R@K<\033q\303=/\314\036\276#\257\013>K!H\275\366\304\201\275E\t\023>\330\357\032\276\2551\251=\026\264\343<\225L\376\275\270\240!>\233\350!>iP\372\275\306\261\374<z\245\230=\205\225\025\276\330\357\032>9\347\263\275\310\352}\274.\371\344=\005!!\276B\237\006>\225\377;\275\307\326w\275h\312\016>/\314\036\276om\315=;P\234&om\315\275/\314\036>h\312\016\276\307\326w=\225\377;=B\237\006\276\005!!>.\371\344\275\310\352}<9\347\263=\330\357\032\276\205\225\025>z\245\230\275\306\261\374\274iP\372=\233\350!\276iP\372=\306\261\374\274z\245\230\275\205\225\025>\330\357\032\2769\347\263=\310\352}<\233\350!>\324\027\001\276P\313/=-\013l=\277\014\n\276\005!!>J\311\355\275\026\264\343<\214\002\223=P\255\021\276/\314\036>\255\030\327\275R@K<\020\225\256=\271\346\027\276\330\357\032>\302U\276\275\202rK\273)y\310=\242\251\034\276\205\225\025>\226\275\243\275\027>\230\274\002o\340=N\352\037\276h\312\016>\272\221\207\275C\313\n\275\211;\366=\270\240!\276B\237\006>B/T\275K!H\275\177\324\004>\246\310!\276iP\372=\360/\027\275\366\304\201\275\276C\r>\270a \276\233\350!>\177\324\004\276G(`=\262\205#=\211;\366\275\005!!>\276C\r\276\034Q\215=\354\237\312<\002o\340\275/\314\036>\267V\024\276\2551\251=\316\201\030<)y\310\275\330\357\032>\367\373\031\276\033q\303=xh\313\273\020\225\256\275\205\225\025>\225%\036\276\260\316\333=\304w\261\274\214\002\223\275h\312\016>N\311 \276[\016\362=\360/\027\275-\013l\275B\237\006>\236\340!\276\240\374\002>B/T\275P\313/\275iP\372=\325h!\276#\257\013>\272\221\207\275\026\264\343\274\233\350!>\273\\\010\276\272\221\207=\304w\261<oM\322\275\330\357\032>m\324\033\276\255\030\327=\354\237\312\274\366\304\201\275B\237\006>\236\340!\276\277\014\n>\034Q\215\275\027>\230\274om\315=\367\373\031\276\242\251\034>\260\316\333\275\026\264\343<\307\326w=\177\324\004\276\246\310!>#\257\013\276\214\002\223=\310\352}<)y\310\275\345\370\030>ao\035\276\002o\340=\306\261\374\274-\013l\275\240\374\002>\270\240!\276\276C\r>z\245\230\275R@K\274\033q\303=\271\346\027\276\225%\036>\233\350!>#\257\013\276W9\236=\202rK;\2551\251\275h\312\016>\246\310!\276\273\\\010>\214\002\223\275\316\201\030\2749\347\263=P\255\021\276\325h!>\177\324\004\276\272\221\207=\310\352}<\302U\276\275\267V\024>N\311 \276\324\027\001>\307\326w\275\304w\261\274)y\310=\220\305\026\276N\352\037>iP\372\275G(`=\026\264\343<oM\322\275\345\370\030>/\314\036\276[\016\362=K!H\275C\313\n\275\260\316\333=\330\357\032\276ao\035>\301l\351\275P\313/=\262\205#=\233\350!>h\312\016\2769\347\263=\310\352}\274\307\326w\275iP\372=/\314\036\276\330\357\032>.\371\344\275\225\377;=\306\261\374<om\315\275\205\225\025>\005!!\276B\237\006>z\245\230\275\237L\034\246z\245\230=B\237\006\276\005!!>\205\225\025\276om\315=\306\261\374\274\225\377;\275.\371\344=\330\357\032\276/\314\036>iP\372\275\307\326w=\310\352}<9\347\263\275h\312\016>\233\350!\276h\312\016>9\347\263\275\310\352}<\307\326w=iP\372\275/\314\036>\330\357\032\276\233\350!>P\255\021\276)y\310=C\313\n\275\360/\027\275om\315=E\t\023\276\236\340!>\372B\020\276\033q\303=\306\261\374\274\262\205#\275oM\322=\267V\024\276\246\310!>h\312\016\276\302U\276=\026\264\343\274P\313/\275\255\030\327=\205\225\025\276\270\240!>\276C\r\276\241\'\271=\354\237\312\274\225\377;\275\260\316\333=\220\305\026\276\325h!>#\257\013\2769\347\263=\304w\261\274K!H\275\002o\340=\271\346\027\276\005!!>\277\014\n\276\020\225\256=\027>\230\274B/T\275\233\350!>\267V\024\276\260\316\333=B/T\275R@K\274z\245\230=\225L\376\275\242\251\034>N\352\037\276\273\\\010>9\347\263\275\026\264\343<\360/\027=\033q\303\275\276C\r>\005!!\276\367\373\031>[\016\362\275\272\221\207=\202rK\273\307\326w\275\301l\351=\271\346\027\276\270\240!>\372B\020\276om\315=P\313/\275\304w\261\274\2551\251=\177\324\004\276/\314\036>\225%\036\276\240\374\002>\226\275\243\275\027>\230<\225\377;=oM\322\275P\255\021>\246\310!\276\220\305\026>\233\350!>\220\305\026\276J\311\355=\034Q\215\275R@K<\225\377;=)y\310\275#\257\013>N\352\037\276\225%\036>B\237\006\276\241\'\271=\360/\027\275\304w\261\274W9\236=iP\372\275\367\373\031>\270\240!\276E\t\023>\002o\340\275\307\326w=\202rK\273G(`\275\255\030\327=\372B\020\276\005!!>m\324\033\276\324\027\001>\2551\251\275\026\264\343<\306\261\374<\020\225\256\275\240\374\002>\242\251\034\276N\311 >h\312\016\276oM\322=B/T\275xh\313\273\366\304\201=\233\350!>\345\370\030\276\225L\376=\020\225\256\275\360/\027=\310\352}<\272\221\207\275\002o\340=\372B\020\276\270a >/\314\036\276#\257\013>oM\322\275-\013l=xh\313\273\225\377;\275\302U\276=\177\324\004\276m\324\033>\270\240!\276\205\225\025>[\016\362\275W9\236=\026\264\343\274\354\237\312\274z\245\230=J\311\355\275\267V\024>\325h!\276\242\251\034>B\237\006\276\033q\303=K!H\275\202rK\273G(`=om\315\275\277\014\n>\225%\036\276N\311 >P\255\021\276\233\350!>\330\357\032\276B\237\006>om\315\275\307\326w=\310\352}\274\306\261\374\274z\245\230=.\371\344\275h\312\016>/\314\036\276\005!!>\205\225\025\276iP\372=9\347\263\275\225\377;=q\026\347\237\225\377;\2759\347\263=iP\372\275\205\225\025>\005!!\276/\314\036>h\312\016\276.\371\344=z\245\230\275\306\261\374<\310\352}<\307\326w\275om\315=B\237\006\276\330\357\032>\233\350!\276\330\357\032>B\237\006\276om\315=\307\326w\275\310\352}<\306\261\374<z\245\230\275\233\350!>\242\251\034\276\276C\r>\301l\351\275\2551\251=\225\377;\275xh\313;C\313\n=\214\002\223\275\255\030\327=B\237\006\276\345\370\030>\325h!\276\034c\037>E\t\023\276iP\372=\302U\276\275-\013l=\027>\230\274\304w\261\274\307\326w=\033q\303\275\225L\376=\267V\024\276N\352\037>\005!!\276\271\346\027>\177\324\004\276oM\322=\034Q\215\275\306\261\374<\316\201\030<K!H\275\020\225\256=J\311\355\275h\312\016>ao\035\276\236\340!>m\324\033\276#\257\013>\233\350!>\225%\036\276E\t\023>\324\027\001\276oM\322=z\245\230\275P\313/=\316\201\030\274\354\237\312\274-\013l=9\347\263\275\301l\351=\277\014\n\276\345\370\030>N\311 \276\005!!>\367\373\031\276#\257\013>J\311\355\275\241\'\271=\307\326w\275\026\264\343<xh\313;\262\205#\275\214\002\223=om\315\275\225L\376=P\255\021\276ao\035>\236\340!\276/\314\036>\267V\024\276\240\374\002>\255\030\327\275W9\236=\225\377;\275R@K<\304w\261<G(`\275\020\225\256=\233\350!>\034c\037\276\271\346\027>#\257\013\276\211;\366=om\315\275W9\236=B/T\275\354\237\312<\202rK;\306\261\374\274-\013l=\2551\251\275\255\030\327=\225L\376\275h\312\016>\367\373\031\276\270a >\246\310!\276\225%\036>\205\225\025\276\273\\\010>J\311\355\275\033q\303=\214\002\223\275\225\377;=\027>\230\274\316\201\030\274\360/\027=\366\304\201\2759\347\263=\002o\340\275\240\374\002>P\255\021\276m\324\033>\005!!\276\325h!>\242\251\034\276E\t\023>\177\324\004\276\233\350!>\270a \276m\324\033>\267V\024\276\277\014\n>iP\372\275\260\316\333=\241\'\271\275\214\002\223=B/T\275\306\261\374<\316\201\030\274R@K\274C\313\n=G(`\275z\245\230=\302U\276\275\002o\340=\225L\376\275#\257\013>\205\225\025\276\242\251\034>N\311 \276\236\340!>N\352\037\276\330\357\032>E\t\023\276\273\\\010>\211;\366\275\255\030\327=9\347\263\275\034Q\215=K!H\275\026\264\343<xh\313\273\310\352}\274\360/\027=-\013l\275W9\236=\033q\303\275\233\350!>\005!!\276/\314\036>\330\357\032\276\205\225\025>h\312\016\276B\237\006>iP\372\275.\371\344=om\315\2759\347\263=z\245\230\275\307\326w=\225\377;\275\306\261\374<\310\352}\274&v\'\246\310\352}<\306\261\374\274\225\377;=\307\326w\275z\245\230=9\347\263\275om\315=.\371\344\275iP\372=B\237\006\276h\312\016>\205\225\025\276\330\357\032>/\314\036\276\005!!>\233\350!\276\005!!>/\314\036\276\330\357\032>\205\225\025\276h\312\016>B\237\006\276iP\372=\233\350!>\270\240!\276N\311 >\034c\037\276ao\035>\330\357\032\276\271\346\027>\267V\024\276\372B\020>#\257\013\276B\237\006>\324\027\001\276\211;\366=\301l\351\275\260\316\333=om\315\275\302U\276=\020\225\256\275W9\236=\034Q\215\275\307\326w=B/T\275P\313/=C\313\n\275\354\237\312<\310\352}\274xh\313;\202rK;R@K\274\304w\261<\306\261\374\274\262\205#=K!H\275-\013l=\272\221\207\275z\245\230=\2551\251\275\241\'\271=)y\310\275\255\030\327=\233\350!>\236\340!\276\246\310!>\270\240!\276\325h!>\005!!\276N\311 >\270a \276N\352\037>\034c\037\276/\314\036>\225%\036\276ao\035>\242\251\034\276m\324\033>\330\357\032\276\367\373\031>\345\370\030\276\271\346\027>\220\305\026\276\205\225\025>\267V\024\276E\t\023>P\255\021\276\372B\020>h\312\016\276\276C\r>#\257\013\276\277\014\n>\273\\\010\276B\237\006>\177\324\004\276\240\374\002>\324\027\001\276\225L\376=iP\372\275\211;\366=[\016\362\275J\311\355=\301l\351\275"
      }
    }
  }
}
node {
  name: "speech_features/dct/MatMul"
  op: "BatchMatMulV2"
  input: "speech_features/lambda_5/Log"
  input: "speech_features/dct/MatMul/b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "speech_features/normalizer/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "speech_features/normalizer/sub"
  op: "Sub"
  input: "speech_features/dct/MatMul"
  input: "speech_features/normalizer/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/normalizer/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "speech_features/normalizer/truediv"
  op: "RealDiv"
  input: "speech_features/normalizer/sub"
  input: "speech_features/normalizer/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "speech_features/spec_augment/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "speech_features/normalizer/truediv"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "speech_features_spec_augment_cond_false_295"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 40
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "speech_features_spec_augment_cond_true_294"
      }
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity"
  op: "Identity"
  input: "speech_features/spec_augment/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_1"
  op: "Identity"
  input: "speech_features/spec_augment/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_2"
  op: "Identity"
  input: "speech_features/spec_augment/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_3"
  op: "Identity"
  input: "speech_features/spec_augment/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_4"
  op: "Identity"
  input: "speech_features/spec_augment/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_5"
  op: "Identity"
  input: "speech_features/spec_augment/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_6"
  op: "Identity"
  input: "speech_features/spec_augment/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_7"
  op: "Identity"
  input: "speech_features/spec_augment/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_8"
  op: "Identity"
  input: "speech_features/spec_augment/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_9"
  op: "Identity"
  input: "speech_features/spec_augment/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_10"
  op: "Identity"
  input: "speech_features/spec_augment/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_11"
  op: "Identity"
  input: "speech_features/spec_augment/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_12"
  op: "Identity"
  input: "speech_features/spec_augment/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_13"
  op: "Identity"
  input: "speech_features/spec_augment/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_14"
  op: "Identity"
  input: "speech_features/spec_augment/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_15"
  op: "Identity"
  input: "speech_features/spec_augment/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_16"
  op: "Identity"
  input: "speech_features/spec_augment/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_17"
  op: "Identity"
  input: "speech_features/spec_augment/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_18"
  op: "Identity"
  input: "speech_features/spec_augment/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_19"
  op: "Identity"
  input: "speech_features/spec_augment/cond:19"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_20"
  op: "Identity"
  input: "speech_features/spec_augment/cond:20"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_21"
  op: "Identity"
  input: "speech_features/spec_augment/cond:21"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_22"
  op: "Identity"
  input: "speech_features/spec_augment/cond:22"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_23"
  op: "Identity"
  input: "speech_features/spec_augment/cond:23"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_24"
  op: "Identity"
  input: "speech_features/spec_augment/cond:24"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_25"
  op: "Identity"
  input: "speech_features/spec_augment/cond:25"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_26"
  op: "Identity"
  input: "speech_features/spec_augment/cond:26"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_27"
  op: "Identity"
  input: "speech_features/spec_augment/cond:27"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_28"
  op: "Identity"
  input: "speech_features/spec_augment/cond:28"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_29"
  op: "Identity"
  input: "speech_features/spec_augment/cond:29"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_30"
  op: "Identity"
  input: "speech_features/spec_augment/cond:30"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_31"
  op: "Identity"
  input: "speech_features/spec_augment/cond:31"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_32"
  op: "Identity"
  input: "speech_features/spec_augment/cond:32"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_33"
  op: "Identity"
  input: "speech_features/spec_augment/cond:33"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_34"
  op: "Identity"
  input: "speech_features/spec_augment/cond:34"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_35"
  op: "Identity"
  input: "speech_features/spec_augment/cond:35"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_36"
  op: "Identity"
  input: "speech_features/spec_augment/cond:36"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_37"
  op: "Identity"
  input: "speech_features/spec_augment/cond:37"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_38"
  op: "Identity"
  input: "speech_features/spec_augment/cond:38"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_39"
  op: "Identity"
  input: "speech_features/spec_augment/cond:39"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_40"
  op: "Identity"
  input: "speech_features/spec_augment/cond:40"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_41"
  op: "Identity"
  input: "speech_features/spec_augment/cond:41"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_42"
  op: "Identity"
  input: "speech_features/spec_augment/cond:42"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_43"
  op: "Identity"
  input: "speech_features/spec_augment/cond:43"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_44"
  op: "Identity"
  input: "speech_features/spec_augment/cond:44"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_45"
  op: "Identity"
  input: "speech_features/spec_augment/cond:45"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_46"
  op: "Identity"
  input: "speech_features/spec_augment/cond:46"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_47"
  op: "Identity"
  input: "speech_features/spec_augment/cond:47"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_48"
  op: "Identity"
  input: "speech_features/spec_augment/cond:48"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_49"
  op: "Identity"
  input: "speech_features/spec_augment/cond:49"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_50"
  op: "Identity"
  input: "speech_features/spec_augment/cond:50"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_51"
  op: "Identity"
  input: "speech_features/spec_augment/cond:51"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_52"
  op: "Identity"
  input: "speech_features/spec_augment/cond:52"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_53"
  op: "Identity"
  input: "speech_features/spec_augment/cond:53"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_54"
  op: "Identity"
  input: "speech_features/spec_augment/cond:54"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_55"
  op: "Identity"
  input: "speech_features/spec_augment/cond:55"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_56"
  op: "Identity"
  input: "speech_features/spec_augment/cond:56"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_57"
  op: "Identity"
  input: "speech_features/spec_augment/cond:57"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_58"
  op: "Identity"
  input: "speech_features/spec_augment/cond:58"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_59"
  op: "Identity"
  input: "speech_features/spec_augment/cond:59"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_60"
  op: "Identity"
  input: "speech_features/spec_augment/cond:60"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_61"
  op: "Identity"
  input: "speech_features/spec_augment/cond:61"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_62"
  op: "Identity"
  input: "speech_features/spec_augment/cond:62"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_63"
  op: "Identity"
  input: "speech_features/spec_augment/cond:63"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_64"
  op: "Identity"
  input: "speech_features/spec_augment/cond:64"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_65"
  op: "Identity"
  input: "speech_features/spec_augment/cond:65"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_66"
  op: "Identity"
  input: "speech_features/spec_augment/cond:66"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_67"
  op: "Identity"
  input: "speech_features/spec_augment/cond:67"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_68"
  op: "Identity"
  input: "speech_features/spec_augment/cond:68"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_69"
  op: "Identity"
  input: "speech_features/spec_augment/cond:69"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_70"
  op: "Identity"
  input: "speech_features/spec_augment/cond:70"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_71"
  op: "Identity"
  input: "speech_features/spec_augment/cond:71"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_72"
  op: "Identity"
  input: "speech_features/spec_augment/cond:72"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_73"
  op: "Identity"
  input: "speech_features/spec_augment/cond:73"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_74"
  op: "Identity"
  input: "speech_features/spec_augment/cond:74"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_75"
  op: "Identity"
  input: "speech_features/spec_augment/cond:75"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_76"
  op: "Identity"
  input: "speech_features/spec_augment/cond:76"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_77"
  op: "Identity"
  input: "speech_features/spec_augment/cond:77"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_78"
  op: "Identity"
  input: "speech_features/spec_augment/cond:78"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_79"
  op: "Identity"
  input: "speech_features/spec_augment/cond:79"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_80"
  op: "Identity"
  input: "speech_features/spec_augment/cond:80"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_81"
  op: "Identity"
  input: "speech_features/spec_augment/cond:81"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_82"
  op: "Identity"
  input: "speech_features/spec_augment/cond:82"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_83"
  op: "Identity"
  input: "speech_features/spec_augment/cond:83"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_84"
  op: "Identity"
  input: "speech_features/spec_augment/cond:84"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_85"
  op: "Identity"
  input: "speech_features/spec_augment/cond:85"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_86"
  op: "Identity"
  input: "speech_features/spec_augment/cond:86"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_87"
  op: "Identity"
  input: "speech_features/spec_augment/cond:87"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_88"
  op: "Identity"
  input: "speech_features/spec_augment/cond:88"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_89"
  op: "Identity"
  input: "speech_features/spec_augment/cond:89"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_90"
  op: "Identity"
  input: "speech_features/spec_augment/cond:90"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_91"
  op: "Identity"
  input: "speech_features/spec_augment/cond:91"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_92"
  op: "Identity"
  input: "speech_features/spec_augment/cond:92"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_93"
  op: "Identity"
  input: "speech_features/spec_augment/cond:93"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_94"
  op: "Identity"
  input: "speech_features/spec_augment/cond:94"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_95"
  op: "Identity"
  input: "speech_features/spec_augment/cond:95"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_96"
  op: "Identity"
  input: "speech_features/spec_augment/cond:96"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_97"
  op: "Identity"
  input: "speech_features/spec_augment/cond:97"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_98"
  op: "Identity"
  input: "speech_features/spec_augment/cond:98"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_99"
  op: "Identity"
  input: "speech_features/spec_augment/cond:99"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_100"
  op: "Identity"
  input: "speech_features/spec_augment/cond:100"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_101"
  op: "Identity"
  input: "speech_features/spec_augment/cond:101"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_102"
  op: "Identity"
  input: "speech_features/spec_augment/cond:102"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_103"
  op: "Identity"
  input: "speech_features/spec_augment/cond:103"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_104"
  op: "Identity"
  input: "speech_features/spec_augment/cond:104"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_105"
  op: "Identity"
  input: "speech_features/spec_augment/cond:105"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_106"
  op: "Identity"
  input: "speech_features/spec_augment/cond:106"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_107"
  op: "Identity"
  input: "speech_features/spec_augment/cond:107"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_108"
  op: "Identity"
  input: "speech_features/spec_augment/cond:108"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_109"
  op: "Identity"
  input: "speech_features/spec_augment/cond:109"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_110"
  op: "Identity"
  input: "speech_features/spec_augment/cond:110"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_111"
  op: "Identity"
  input: "speech_features/spec_augment/cond:111"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_112"
  op: "Identity"
  input: "speech_features/spec_augment/cond:112"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_113"
  op: "Identity"
  input: "speech_features/spec_augment/cond:113"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_114"
  op: "Identity"
  input: "speech_features/spec_augment/cond:114"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_115"
  op: "Identity"
  input: "speech_features/spec_augment/cond:115"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_116"
  op: "Identity"
  input: "speech_features/spec_augment/cond:116"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_117"
  op: "Identity"
  input: "speech_features/spec_augment/cond:117"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_118"
  op: "Identity"
  input: "speech_features/spec_augment/cond:118"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_119"
  op: "Identity"
  input: "speech_features/spec_augment/cond:119"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_120"
  op: "Identity"
  input: "speech_features/spec_augment/cond:120"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_121"
  op: "Identity"
  input: "speech_features/spec_augment/cond:121"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_122"
  op: "Identity"
  input: "speech_features/spec_augment/cond:122"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_123"
  op: "Identity"
  input: "speech_features/spec_augment/cond:123"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_124"
  op: "Identity"
  input: "speech_features/spec_augment/cond:124"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_125"
  op: "Identity"
  input: "speech_features/spec_augment/cond:125"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_126"
  op: "Identity"
  input: "speech_features/spec_augment/cond:126"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_127"
  op: "Identity"
  input: "speech_features/spec_augment/cond:127"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_128"
  op: "Identity"
  input: "speech_features/spec_augment/cond:128"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_129"
  op: "Identity"
  input: "speech_features/spec_augment/cond:129"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_130"
  op: "Identity"
  input: "speech_features/spec_augment/cond:130"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_131"
  op: "Identity"
  input: "speech_features/spec_augment/cond:131"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_132"
  op: "Identity"
  input: "speech_features/spec_augment/cond:132"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_133"
  op: "Identity"
  input: "speech_features/spec_augment/cond:133"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_134"
  op: "Identity"
  input: "speech_features/spec_augment/cond:134"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_135"
  op: "Identity"
  input: "speech_features/spec_augment/cond:135"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_136"
  op: "Identity"
  input: "speech_features/spec_augment/cond:136"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_137"
  op: "Identity"
  input: "speech_features/spec_augment/cond:137"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_138"
  op: "Identity"
  input: "speech_features/spec_augment/cond:138"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_139"
  op: "Identity"
  input: "speech_features/spec_augment/cond:139"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_140"
  op: "Identity"
  input: "speech_features/spec_augment/cond:140"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_141"
  op: "Identity"
  input: "speech_features/spec_augment/cond:141"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_142"
  op: "Identity"
  input: "speech_features/spec_augment/cond:142"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_143"
  op: "Identity"
  input: "speech_features/spec_augment/cond:143"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_144"
  op: "Identity"
  input: "speech_features/spec_augment/cond:144"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_145"
  op: "Identity"
  input: "speech_features/spec_augment/cond:145"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_146"
  op: "Identity"
  input: "speech_features/spec_augment/cond:146"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_147"
  op: "Identity"
  input: "speech_features/spec_augment/cond:147"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_148"
  op: "Identity"
  input: "speech_features/spec_augment/cond:148"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_149"
  op: "Identity"
  input: "speech_features/spec_augment/cond:149"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_150"
  op: "Identity"
  input: "speech_features/spec_augment/cond:150"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_151"
  op: "Identity"
  input: "speech_features/spec_augment/cond:151"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_152"
  op: "Identity"
  input: "speech_features/spec_augment/cond:152"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_153"
  op: "Identity"
  input: "speech_features/spec_augment/cond:153"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_154"
  op: "Identity"
  input: "speech_features/spec_augment/cond:154"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_155"
  op: "Identity"
  input: "speech_features/spec_augment/cond:155"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_156"
  op: "Identity"
  input: "speech_features/spec_augment/cond:156"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_157"
  op: "Identity"
  input: "speech_features/spec_augment/cond:157"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_158"
  op: "Identity"
  input: "speech_features/spec_augment/cond:158"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_159"
  op: "Identity"
  input: "speech_features/spec_augment/cond:159"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_160"
  op: "Identity"
  input: "speech_features/spec_augment/cond:160"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_161"
  op: "Identity"
  input: "speech_features/spec_augment/cond:161"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_162"
  op: "Identity"
  input: "speech_features/spec_augment/cond:162"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_163"
  op: "Identity"
  input: "speech_features/spec_augment/cond:163"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_164"
  op: "Identity"
  input: "speech_features/spec_augment/cond:164"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_165"
  op: "Identity"
  input: "speech_features/spec_augment/cond:165"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_166"
  op: "Identity"
  input: "speech_features/spec_augment/cond:166"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_167"
  op: "Identity"
  input: "speech_features/spec_augment/cond:167"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_168"
  op: "Identity"
  input: "speech_features/spec_augment/cond:168"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_169"
  op: "Identity"
  input: "speech_features/spec_augment/cond:169"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_170"
  op: "Identity"
  input: "speech_features/spec_augment/cond:170"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_171"
  op: "Identity"
  input: "speech_features/spec_augment/cond:171"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_172"
  op: "Identity"
  input: "speech_features/spec_augment/cond:172"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_173"
  op: "Identity"
  input: "speech_features/spec_augment/cond:173"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_174"
  op: "Identity"
  input: "speech_features/spec_augment/cond:174"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_175"
  op: "Identity"
  input: "speech_features/spec_augment/cond:175"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_176"
  op: "Identity"
  input: "speech_features/spec_augment/cond:176"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_177"
  op: "Identity"
  input: "speech_features/spec_augment/cond:177"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_178"
  op: "Identity"
  input: "speech_features/spec_augment/cond:178"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/spec_augment/cond/Identity_179"
  op: "Identity"
  input: "speech_features/spec_augment/cond:179"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "speech_features/lambda_6/lambda_6/Identity"
  op: "Identity"
  input: "speech_features/spec_augment/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "speech_features/lambda_6/lambda_6/Identity"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^ExpandDims/dim"
}
node {
  name: "stream/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\005\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream/Pad"
  op: "Pad"
  input: "ExpandDims"
  input: "stream/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\013\000\000\000\001\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11534196883440018
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11534196883440018
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/max"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/mul"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 1
        }
        dim {
          size: 40
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream/depthwise_conv2d/depthwise_kernel"
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream/depthwise_conv2d/depthwise_kernel"
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream/depthwise_conv2d/depthwise_kernel"
  input: "stream/depthwise_conv2d/depthwise_kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/depthwise_conv2d/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/depthwise_conv2d/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\013\000\000\000\001\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream/depthwise_conv2d/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream/Pad"
  input: "stream/depthwise_conv2d/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000(\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d/kernel/Initializer/random_uniform/max"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d/kernel/Initializer/random_uniform/mul"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 40
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/kernel"
    }
  }
}
node {
  name: "conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
}
node {
  name: "conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "stream/depthwise_conv2d/depthwise"
  input: "conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/gamma"
    }
  }
}
node {
  name: "batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/gamma"
}
node {
  name: "batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/beta"
    }
  }
}
node {
  name: "batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/beta"
}
node {
  name: "batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/moving_mean"
    }
  }
}
node {
  name: "batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/moving_mean"
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/moving_variance"
    }
  }
}
node {
  name: "batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/moving_variance"
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization/gamma"
  input: "batch_normalization/beta"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_variance"
  input: "conv2d/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_cond_false_1247"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_cond_true_1246"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/Identity"
  op: "Identity"
  input: "batch_normalization/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_cond_1_false_1315"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_cond_1_true_1314"
      }
    }
  }
}
node {
  name: "batch_normalization/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/sub/x"
  input: "batch_normalization/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg/sub_1"
  input: "batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  input: "^batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/sub/x"
  input: "batch_normalization/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg_1/sub_1"
  input: "batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  input: "^batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation/Relu"
  op: "Relu"
  input: "batch_normalization/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond"
  op: "StatelessIf"
  input: "keras_learning_phase"
  input: "activation/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_cond_false_1336"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_cond_true_1335"
      }
    }
  }
}
node {
  name: "dropout/cond/Identity"
  op: "Identity"
  input: "dropout/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/Pad"
  op: "Pad"
  input: "dropout/cond/Identity"
  input: "stream_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\r\000\000\000\001\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05981485918164253
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05981485918164253
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/max"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/mul"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_1/depthwise_conv2d_1/depthwise_kernel"
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel"
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/depthwise_conv2d_1/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\r\000\000\000\001\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d_1/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_1/Pad"
  input: "stream_1/depthwise_conv2d_1/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_1/kernel/Initializer/random_uniform/max"
  input: "conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_1/kernel/Initializer/random_uniform/mul"
  input: "conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/kernel"
    }
  }
}
node {
  name: "conv2d_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/kernel"
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/Conv2D"
  op: "Conv2D"
  input: "stream_1/depthwise_conv2d_1/depthwise"
  input: "conv2d_1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/gamma"
    }
  }
}
node {
  name: "batch_normalization_1/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/gamma"
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/beta"
    }
  }
}
node {
  name: "batch_normalization_1/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/beta"
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_mean"
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_variance"
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_variance"
  input: "conv2d_1/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_1_cond_false_1389"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_1_cond_true_1388"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity"
  op: "Identity"
  input: "batch_normalization_1/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_1/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_1/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_1/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_1/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_1_cond_1_false_1457"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_1_cond_1_true_1456"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_1/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/sub/x"
  input: "batch_normalization_1/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_1/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg/sub_1"
  input: "batch_normalization_1/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "^batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_1/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_1/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_1/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "^batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_2/kernel/Initializer/random_uniform/max"
  input: "conv2d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_2/kernel/Initializer/random_uniform/mul"
  input: "conv2d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/kernel"
    }
  }
}
node {
  name: "conv2d_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/kernel"
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/Conv2D"
  op: "Conv2D"
  input: "dropout/cond/Identity"
  input: "conv2d_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/gamma"
    }
  }
}
node {
  name: "batch_normalization_2/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/gamma"
}
node {
  name: "batch_normalization_2/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/beta"
    }
  }
}
node {
  name: "batch_normalization_2/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/beta"
}
node {
  name: "batch_normalization_2/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_mean"
}
node {
  name: "batch_normalization_2/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_variance"
}
node {
  name: "batch_normalization_2/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_variance"
  input: "conv2d_2/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_2_cond_false_1505"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_2_cond_true_1504"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity"
  op: "Identity"
  input: "batch_normalization_2/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_2/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_2/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_2/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_2/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_2_cond_1_false_1573"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_2_cond_1_true_1572"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_2/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/sub/x"
  input: "batch_normalization_2/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_2/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg/sub_1"
  input: "batch_normalization_2/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "^batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_2/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_2/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_2/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "^batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add/add"
  op: "AddV2"
  input: "batch_normalization_1/cond/Identity"
  input: "batch_normalization_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_1/Relu"
  op: "Relu"
  input: "add/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond"
  op: "StatelessIf"
  input: "keras_learning_phase"
  input: "activation_1/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_1_cond_false_1595"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_1_cond_true_1594"
      }
    }
  }
}
node {
  name: "dropout_1/cond/Identity"
  op: "Identity"
  input: "dropout_1/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\007\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/Pad"
  op: "Pad"
  input: "dropout_1/cond/Identity"
  input: "stream_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\017\000\000\000\001\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07844645529985428
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07844645529985428
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/max"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/mul"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_2/depthwise_conv2d_2/depthwise_kernel"
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel"
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_2/depthwise_conv2d_2/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\017\000\000\000\001\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_2/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_2/Pad"
  input: "stream_2/depthwise_conv2d_2/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_3/kernel/Initializer/random_uniform/max"
  input: "conv2d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_3/kernel/Initializer/random_uniform/mul"
  input: "conv2d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/kernel"
    }
  }
}
node {
  name: "conv2d_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/kernel"
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/Conv2D"
  op: "Conv2D"
  input: "stream_2/depthwise_conv2d_2/depthwise"
  input: "conv2d_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/gamma"
    }
  }
}
node {
  name: "batch_normalization_3/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/gamma"
}
node {
  name: "batch_normalization_3/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/beta"
    }
  }
}
node {
  name: "batch_normalization_3/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/beta"
}
node {
  name: "batch_normalization_3/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_mean"
}
node {
  name: "batch_normalization_3/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_variance"
}
node {
  name: "batch_normalization_3/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_variance"
  input: "conv2d_3/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_3_cond_false_1648"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_3_cond_true_1647"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity"
  op: "Identity"
  input: "batch_normalization_3/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_3/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_3/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_3/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_3/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_3/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_3/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_3/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_3/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_3/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_3_cond_1_false_1716"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_3_cond_1_true_1715"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_3/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/sub/x"
  input: "batch_normalization_3/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_3/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg/sub_1"
  input: "batch_normalization_3/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "^batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_3/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_3/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_3/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "^batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_4/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_4/kernel/Initializer/random_uniform/max"
  input: "conv2d_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_4/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_4/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_4/kernel/Initializer/random_uniform/mul"
  input: "conv2d_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_4/kernel"
    }
  }
}
node {
  name: "conv2d_4/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_4/kernel"
}
node {
  name: "conv2d_4/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/Conv2D"
  op: "Conv2D"
  input: "dropout_1/cond/Identity"
  input: "conv2d_4/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/gamma"
    }
  }
}
node {
  name: "batch_normalization_4/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/gamma"
}
node {
  name: "batch_normalization_4/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/beta"
    }
  }
}
node {
  name: "batch_normalization_4/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/beta"
}
node {
  name: "batch_normalization_4/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/moving_mean"
}
node {
  name: "batch_normalization_4/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/moving_variance"
}
node {
  name: "batch_normalization_4/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_variance"
  input: "conv2d_4/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_4_cond_false_1764"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_4_cond_true_1763"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity"
  op: "Identity"
  input: "batch_normalization_4/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_4/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_4/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_4/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_4/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_4/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_4/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_4/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_4/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_4/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_4_cond_1_false_1832"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_4_cond_1_true_1831"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_4/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/sub/x"
  input: "batch_normalization_4/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_4/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg/sub_1"
  input: "batch_normalization_4/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "^batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_4/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_4/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_4/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "^batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_1/add"
  op: "AddV2"
  input: "batch_normalization_3/cond/Identity"
  input: "batch_normalization_4/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_2/Relu"
  op: "Relu"
  input: "add_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/cond"
  op: "StatelessIf"
  input: "keras_learning_phase"
  input: "activation_2/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_2_cond_false_1854"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_2_cond_true_1853"
      }
    }
  }
}
node {
  name: "dropout_2/cond/Identity"
  op: "Identity"
  input: "dropout_2/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/Pad"
  op: "Pad"
  input: "dropout_2/cond/Identity"
  input: "stream_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\021\000\000\000\001\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0736876130104065
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0736876130104065
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/max"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/mul"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 17
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_3/depthwise_conv2d_3/depthwise_kernel"
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel"
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_3/depthwise_conv2d_3/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\021\000\000\000\001\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_3/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_3/Pad"
  input: "stream_3/depthwise_conv2d_3/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_5/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_5/kernel/Initializer/random_uniform/max"
  input: "conv2d_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_5/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_5/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_5/kernel/Initializer/random_uniform/mul"
  input: "conv2d_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_5/kernel"
    }
  }
}
node {
  name: "conv2d_5/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_5/kernel"
}
node {
  name: "conv2d_5/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/Conv2D"
  op: "Conv2D"
  input: "stream_3/depthwise_conv2d_3/depthwise"
  input: "conv2d_5/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/gamma"
    }
  }
}
node {
  name: "batch_normalization_5/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/gamma"
}
node {
  name: "batch_normalization_5/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/beta"
    }
  }
}
node {
  name: "batch_normalization_5/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/beta"
}
node {
  name: "batch_normalization_5/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/moving_mean"
}
node {
  name: "batch_normalization_5/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/moving_variance"
}
node {
  name: "batch_normalization_5/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_variance"
  input: "conv2d_5/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_5_cond_false_1907"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_5_cond_true_1906"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity"
  op: "Identity"
  input: "batch_normalization_5/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_5/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_5/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_5/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_5/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_5/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_5/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_5/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_5/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_5/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_5_cond_1_false_1975"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_5_cond_1_true_1974"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_5/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/sub/x"
  input: "batch_normalization_5/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_5/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg/sub_1"
  input: "batch_normalization_5/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "^batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_5/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_5/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_5/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "^batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_6/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_6/kernel/Initializer/random_uniform/max"
  input: "conv2d_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_6/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_6/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_6/kernel/Initializer/random_uniform/mul"
  input: "conv2d_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_6/kernel"
    }
  }
}
node {
  name: "conv2d_6/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_6/kernel"
}
node {
  name: "conv2d_6/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_6/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_6/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/Conv2D"
  op: "Conv2D"
  input: "dropout_2/cond/Identity"
  input: "conv2d_6/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/gamma"
    }
  }
}
node {
  name: "batch_normalization_6/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/gamma"
}
node {
  name: "batch_normalization_6/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/beta"
    }
  }
}
node {
  name: "batch_normalization_6/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/beta"
}
node {
  name: "batch_normalization_6/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/moving_mean"
}
node {
  name: "batch_normalization_6/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/moving_variance"
}
node {
  name: "batch_normalization_6/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_variance"
  input: "conv2d_6/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_6_cond_false_2023"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_6_cond_true_2022"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity"
  op: "Identity"
  input: "batch_normalization_6/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_6/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_6/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_6/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_6/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_6/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_6/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_6/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_6/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_6/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_6_cond_1_false_2091"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_6_cond_1_true_2090"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_6/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/sub/x"
  input: "batch_normalization_6/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_6/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg/sub_1"
  input: "batch_normalization_6/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "^batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_6/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_6/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_6/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "^batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_2/add"
  op: "AddV2"
  input: "batch_normalization_5/cond/Identity"
  input: "batch_normalization_6/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_3/Relu"
  op: "Relu"
  input: "add_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/cond"
  op: "StatelessIf"
  input: "keras_learning_phase"
  input: "activation_3/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_3_cond_false_2113"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_3_cond_true_2112"
      }
    }
  }
}
node {
  name: "dropout_3/cond/Identity"
  op: "Identity"
  input: "dropout_3/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_4/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\034\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/Pad"
  op: "Pad"
  input: "dropout_3/cond/Identity"
  input: "stream_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\035\000\000\000\001\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.056418292224407196
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.056418292224407196
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/max"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/mul"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_4/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_4/depthwise_conv2d_4/depthwise_kernel"
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel"
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_4/depthwise_conv2d_4/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\035\000\000\000\001\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\234\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "stream_4/Pad"
  input: "stream_4/depthwise_conv2d_4/depthwise/SpaceToBatchND/block_shape"
  input: "stream_4/depthwise_conv2d_4/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_4/depthwise_conv2d_4/depthwise/SpaceToBatchND"
  input: "stream_4/depthwise_conv2d_4/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_4/depthwise_conv2d_4/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "stream_4/depthwise_conv2d_4/depthwise"
  input: "stream_4/depthwise_conv2d_4/depthwise/BatchToSpaceND/block_shape"
  input: "stream_4/depthwise_conv2d_4/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_7/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_7/kernel/Initializer/random_uniform/max"
  input: "conv2d_7/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_7/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_7/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_7/kernel/Initializer/random_uniform/mul"
  input: "conv2d_7/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_7/kernel"
    }
  }
}
node {
  name: "conv2d_7/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_7/kernel"
}
node {
  name: "conv2d_7/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_7/kernel"
  input: "conv2d_7/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_7/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_7/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/Conv2D"
  op: "Conv2D"
  input: "stream_4/depthwise_conv2d_4/depthwise/BatchToSpaceND"
  input: "conv2d_7/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/gamma"
    }
  }
}
node {
  name: "batch_normalization_7/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/gamma"
}
node {
  name: "batch_normalization_7/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/beta"
    }
  }
}
node {
  name: "batch_normalization_7/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/beta"
}
node {
  name: "batch_normalization_7/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/moving_mean"
}
node {
  name: "batch_normalization_7/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_7/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_7/moving_variance"
}
node {
  name: "batch_normalization_7/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/moving_variance"
  input: "conv2d_7/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_7_cond_false_2176"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_7_cond_true_2175"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity"
  op: "Identity"
  input: "batch_normalization_7/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_7/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_7/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_7/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_7/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_7/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_7/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_7/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_7/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_7/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_7/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_7_cond_1_false_2244"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_7_cond_1_true_2243"
      }
    }
  }
}
node {
  name: "batch_normalization_7/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_7/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg/sub/x"
  input: "batch_normalization_7/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_7/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_7/AssignMovingAvg/sub_1"
  input: "batch_normalization_7/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_mean"
  input: "^batch_normalization_7/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_7/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_7/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_7/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_7/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_7/moving_variance"
  input: "^batch_normalization_7/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_4/Relu"
  op: "Relu"
  input: "batch_normalization_7/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/cond"
  op: "StatelessIf"
  input: "keras_learning_phase"
  input: "activation_4/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_4_cond_false_2265"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_4_cond_true_2264"
      }
    }
  }
}
node {
  name: "dropout_4/cond/Identity"
  op: "Identity"
  input: "dropout_4/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_5/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_5/Pad"
  op: "Pad"
  input: "dropout_4/cond/Identity"
  input: "stream_5/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2156655490398407
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2156655490398407
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/max"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/RandomUniform"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/mul"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_5/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_5/depthwise_conv2d_5/depthwise_kernel"
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel"
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_5/depthwise_conv2d_5/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_5/depthwise_conv2d_5/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_5/Pad"
  input: "stream_5/depthwise_conv2d_5/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1530931144952774
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1530931144952774
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_8/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_8/kernel/Initializer/random_uniform/max"
  input: "conv2d_8/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_8/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_8/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "conv2d_8/kernel/Initializer/random_uniform/mul"
  input: "conv2d_8/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_8/kernel"
    }
  }
}
node {
  name: "conv2d_8/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_8/kernel"
}
node {
  name: "conv2d_8/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_8/kernel"
  input: "conv2d_8/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_8/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_8/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/Conv2D"
  op: "Conv2D"
  input: "stream_5/depthwise_conv2d_5/depthwise"
  input: "conv2d_8/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/gamma"
    }
  }
}
node {
  name: "batch_normalization_8/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/gamma"
}
node {
  name: "batch_normalization_8/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/gamma/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/beta"
    }
  }
}
node {
  name: "batch_normalization_8/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/beta"
}
node {
  name: "batch_normalization_8/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/moving_mean"
}
node {
  name: "batch_normalization_8/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_8/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_8/moving_variance"
}
node {
  name: "batch_normalization_8/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/moving_variance"
  input: "conv2d_8/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_8_cond_false_2318"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_8_cond_true_2317"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity"
  op: "Identity"
  input: "batch_normalization_8/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_8/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_8/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_8/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_8/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_8/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_8/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_8/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_8/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond/Identity_9"
  op: "Identity"
  input: "batch_normalization_8/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_8/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_8_cond_1_false_2386"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_8_cond_1_true_2385"
      }
    }
  }
}
node {
  name: "batch_normalization_8/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_8/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg/sub/x"
  input: "batch_normalization_8/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_8/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_8/AssignMovingAvg/sub_1"
  input: "batch_normalization_8/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_mean"
  input: "^batch_normalization_8/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_8/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_8/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_8/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_8/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_8/moving_variance"
  input: "^batch_normalization_8/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_5/Relu"
  op: "Relu"
  input: "batch_normalization_8/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_5/cond"
  op: "StatelessIf"
  input: "keras_learning_phase"
  input: "activation_5/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_5_cond_false_2407"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_5_cond_true_2406"
      }
    }
  }
}
node {
  name: "dropout_5/cond/Identity"
  op: "Identity"
  input: "dropout_5/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_6/global_average_pooling2d/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_6/global_average_pooling2d/Mean"
  op: "Mean"
  input: "dropout_5/cond/Identity"
  input: "stream_6/global_average_pooling2d/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000"
      }
    }
  }
}
node {
  name: "flatten/Reshape"
  op: "Reshape"
  input: "stream_6/global_average_pooling2d/Mean"
  input: "flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21483446657657623
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21483446657657623
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/kernel"
    }
  }
}
node {
  name: "dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
}
node {
  name: "dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/bias"
    }
  }
}
node {
  name: "dense/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/bias"
}
node {
  name: "dense/bias/Assign"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "flatten/Reshape"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_6/Softmax"
  op: "Softmax"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_6_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total"
    }
  }
}
node {
  name: "total/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "total/Assign"
  op: "AssignVariableOp"
  input: "total"
  input: "total/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count"
    }
  }
}
node {
  name: "count/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "count/Assign"
  op: "AssignVariableOp"
  input: "count"
  input: "count/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Squeeze"
  op: "Squeeze"
  input: "activation_6_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax"
  op: "ArgMax"
  input: "activation_6/Softmax"
  input: "metrics/accuracy/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/accuracy/Cast"
  op: "Cast"
  input: "metrics/accuracy/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Equal"
  op: "Equal"
  input: "metrics/accuracy/Squeeze"
  input: "metrics/accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/accuracy/Cast_1"
  op: "Cast"
  input: "metrics/accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/accuracy/Sum"
  op: "Sum"
  input: "metrics/accuracy/Cast_1"
  input: "metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total"
  input: "metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Size"
  op: "Size"
  input: "metrics/accuracy/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Cast_2"
  op: "Cast"
  input: "metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count"
  input: "metrics/accuracy/Cast_2"
  input: "^metrics/accuracy/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan"
  op: "DivNoNan"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Identity"
  op: "Identity"
  input: "metrics/accuracy/div_no_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_6_loss/Cast"
  op: "Cast"
  input: "activation_6_target"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_6_loss/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/Reshape"
  op: "Reshape"
  input: "loss/activation_6_loss/Cast"
  input: "loss/activation_6_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_6_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/strided_slice"
  op: "StridedSlice"
  input: "loss/activation_6_loss/Shape"
  input: "loss/activation_6_loss/strided_slice/stack"
  input: "loss/activation_6_loss/strided_slice/stack_1"
  input: "loss/activation_6_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/activation_6_loss/Reshape_1/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/Reshape_1/shape"
  op: "Pack"
  input: "loss/activation_6_loss/Reshape_1/shape/0"
  input: "loss/activation_6_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/activation_6_loss/Reshape_1"
  op: "Reshape"
  input: "dense/BiasAdd"
  input: "loss/activation_6_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_6_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss/activation_6_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_6_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/activation_6_loss/Reshape_1"
  input: "loss/activation_6_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/activation_6_loss/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/weighted_loss/Mul"
  op: "Mul"
  input: "loss/activation_6_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/activation_6_loss/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_6_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/Sum"
  op: "Sum"
  input: "loss/activation_6_loss/weighted_loss/Mul"
  input: "loss/activation_6_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_6_loss/num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/activation_6_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_6_loss/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_6_loss/range"
  op: "Range"
  input: "loss/activation_6_loss/range/start"
  input: "loss/activation_6_loss/Rank"
  input: "loss/activation_6_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_6_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_6_loss/Sum"
  input: "loss/activation_6_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_6_loss/value"
  op: "DivNoNan"
  input: "loss/activation_6_loss/Sum_1"
  input: "loss/activation_6_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_6_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^batch_normalization/beta/Assign"
  input: "^batch_normalization/gamma/Assign"
  input: "^batch_normalization/moving_mean/Assign"
  input: "^batch_normalization/moving_variance/Assign"
  input: "^batch_normalization_1/beta/Assign"
  input: "^batch_normalization_1/gamma/Assign"
  input: "^batch_normalization_1/moving_mean/Assign"
  input: "^batch_normalization_1/moving_variance/Assign"
  input: "^batch_normalization_2/beta/Assign"
  input: "^batch_normalization_2/gamma/Assign"
  input: "^batch_normalization_2/moving_mean/Assign"
  input: "^batch_normalization_2/moving_variance/Assign"
  input: "^batch_normalization_3/beta/Assign"
  input: "^batch_normalization_3/gamma/Assign"
  input: "^batch_normalization_3/moving_mean/Assign"
  input: "^batch_normalization_3/moving_variance/Assign"
  input: "^batch_normalization_4/beta/Assign"
  input: "^batch_normalization_4/gamma/Assign"
  input: "^batch_normalization_4/moving_mean/Assign"
  input: "^batch_normalization_4/moving_variance/Assign"
  input: "^batch_normalization_5/beta/Assign"
  input: "^batch_normalization_5/gamma/Assign"
  input: "^batch_normalization_5/moving_mean/Assign"
  input: "^batch_normalization_5/moving_variance/Assign"
  input: "^batch_normalization_6/beta/Assign"
  input: "^batch_normalization_6/gamma/Assign"
  input: "^batch_normalization_6/moving_mean/Assign"
  input: "^batch_normalization_6/moving_variance/Assign"
  input: "^batch_normalization_7/beta/Assign"
  input: "^batch_normalization_7/gamma/Assign"
  input: "^batch_normalization_7/moving_mean/Assign"
  input: "^batch_normalization_7/moving_variance/Assign"
  input: "^batch_normalization_8/beta/Assign"
  input: "^batch_normalization_8/gamma/Assign"
  input: "^batch_normalization_8/moving_mean/Assign"
  input: "^batch_normalization_8/moving_variance/Assign"
  input: "^conv2d/kernel/Assign"
  input: "^conv2d_1/kernel/Assign"
  input: "^conv2d_2/kernel/Assign"
  input: "^conv2d_3/kernel/Assign"
  input: "^conv2d_4/kernel/Assign"
  input: "^conv2d_5/kernel/Assign"
  input: "^conv2d_6/kernel/Assign"
  input: "^conv2d_7/kernel/Assign"
  input: "^conv2d_8/kernel/Assign"
  input: "^dense/bias/Assign"
  input: "^dense/kernel/Assign"
  input: "^stream/depthwise_conv2d/depthwise_kernel/Assign"
  input: "^stream_1/depthwise_conv2d_1/depthwise_kernel/Assign"
  input: "^stream_2/depthwise_conv2d_2/depthwise_kernel/Assign"
  input: "^stream_3/depthwise_conv2d_3/depthwise_kernel/Assign"
  input: "^stream_4/depthwise_conv2d_4/depthwise_kernel/Assign"
  input: "^stream_5/depthwise_conv2d_5/depthwise_kernel/Assign"
}
library {
  function {
    signature {
      name: "speech_features_spec_augment_cond_true_294"
      input_arg {
        name: "mul_speech_features_normalizer_truediv"
        type: DT_FLOAT
      }
      output_arg {
        name: "mul_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_18"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_19"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_20"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_21"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_22"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_23"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_24"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_25"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_26"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_27"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_28"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_29"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_30"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_31"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_32"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_33"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_34"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_35"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_36"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_37"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_38"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_39"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_40"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_41"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_42"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_43"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_44"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_45"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_46"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_47"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_48"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_49"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_50"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_51"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_52"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_53"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_54"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_55"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_56"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_57"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_58"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_59"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_60"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_61"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_62"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_63"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_64"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_65"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_66"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_67"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_68"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_69"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_70"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_71"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_72"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_73"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_74"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_75"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_76"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_77"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_78"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_79"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_80"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_81"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_82"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_83"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_84"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_85"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_86"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_87"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_88"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_89"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_90"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_91"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_92"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_93"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_94"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_95"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_96"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_97"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_98"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_99"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_100"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_101"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_102"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_103"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_104"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_105"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_106"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_107"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_108"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_109"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_110"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_111"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_112"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_113"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_114"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_115"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_116"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_117"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_118"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_119"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_120"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_121"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_122"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_123"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_124"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_125"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_126"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_127"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_128"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_129"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_130"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_131"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_132"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_133"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_134"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_135"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_136"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_137"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_138"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_139"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_140"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_141"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_142"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_143"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_144"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_145"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_146"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_147"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_148"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_149"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_150"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_151"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_152"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_153"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_154"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_155"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_156"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_157"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_158"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_159"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_160"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_161"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_162"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_163"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_164"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_165"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_166"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_167"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_168"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_169"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_170"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_171"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_172"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_173"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_174"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_175"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_176"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_177"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_178"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "random_uniform/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 25
          }
        }
      }
    }
    node_def {
      name: "random_uniform"
      op: "RandomUniformInt"
      input: "random_uniform/shape:output:0"
      input: "random_uniform/min:output:0"
      input: "random_uniform/max:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "sub/x:output:0"
      input: "random_uniform:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_uniform_1/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1"
      op: "RandomUniformInt"
      input: "random_uniform_1/shape:output:0"
      input: "random_uniform_1/min:output:0"
      input: "sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_1/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "sub_1"
      op: "Sub"
      input: "sub_1/x:output:0"
      input: "random_uniform_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sub_2"
      op: "Sub"
      input: "sub_1:z:0"
      input: "random_uniform:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones/mul"
      op: "Mul"
      input: "ones/mul/x:output:0"
      input: "sub_2:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones/mul_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones/mul_1"
      op: "Mul"
      input: "ones/mul:z:0"
      input: "ones/mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones/Less"
      op: "Less"
      input: "ones/mul_1:z:0"
      input: "ones/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones/packed/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones/packed"
      op: "Pack"
      input: "ones/packed/0:output:0"
      input: "sub_2:z:0"
      input: "ones/packed/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones"
      op: "Fill"
      input: "ones/packed:output:0"
      input: "ones/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "zeros/mul/x:output:0"
      input: "random_uniform:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros/mul_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "zeros/mul_1"
      op: "Mul"
      input: "zeros/mul:z:0"
      input: "zeros/mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul_1:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "zeros/packed/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "zeros/packed/0:output:0"
      input: "random_uniform:output:0"
      input: "zeros/packed/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_1/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_1/mul"
      op: "Mul"
      input: "ones_1/mul/x:output:0"
      input: "random_uniform_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_1/mul_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones_1/mul_1"
      op: "Mul"
      input: "ones_1/mul:z:0"
      input: "ones_1/mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_1/Less"
      op: "Less"
      input: "ones_1/mul_1:z:0"
      input: "ones_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_1/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_1/packed/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones_1/packed"
      op: "Pack"
      input: "ones_1/packed/0:output:0"
      input: "random_uniform_1:output:0"
      input: "ones_1/packed/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_1"
      op: "Fill"
      input: "ones_1/packed:output:0"
      input: "ones_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "ones:output:0"
      input: "zeros:output:0"
      input: "ones_1:output:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "mul_speech_features_normalizer_truediv"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_2/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 25
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2"
      op: "RandomUniformInt"
      input: "random_uniform_2/shape:output:0"
      input: "random_uniform_2/min:output:0"
      input: "random_uniform_2/max:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_3/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "sub_3"
      op: "Sub"
      input: "sub_3/x:output:0"
      input: "random_uniform_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_uniform_3/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_3/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_3"
      op: "RandomUniformInt"
      input: "random_uniform_3/shape:output:0"
      input: "random_uniform_3/min:output:0"
      input: "sub_3:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_4/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "sub_4"
      op: "Sub"
      input: "sub_4/x:output:0"
      input: "random_uniform_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sub_5"
      op: "Sub"
      input: "sub_4:z:0"
      input: "random_uniform_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_2/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_2/mul"
      op: "Mul"
      input: "ones_2/mul/x:output:0"
      input: "sub_5:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_2/mul_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones_2/mul_1"
      op: "Mul"
      input: "ones_2/mul:z:0"
      input: "ones_2/mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_2/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_2/Less"
      op: "Less"
      input: "ones_2/mul_1:z:0"
      input: "ones_2/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_2/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_2/packed/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones_2/packed"
      op: "Pack"
      input: "ones_2/packed/0:output:0"
      input: "sub_5:z:0"
      input: "ones_2/packed/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_2"
      op: "Fill"
      input: "ones_2/packed:output:0"
      input: "ones_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_1/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "zeros_1/mul/x:output:0"
      input: "random_uniform_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_1/mul_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "zeros_1/mul_1"
      op: "Mul"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul_1:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_1/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "zeros_1/packed/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "zeros_1/packed/0:output:0"
      input: "random_uniform_2:output:0"
      input: "zeros_1/packed/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_3/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_3/mul"
      op: "Mul"
      input: "ones_3/mul/x:output:0"
      input: "random_uniform_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_3/mul_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones_3/mul_1"
      op: "Mul"
      input: "ones_3/mul:z:0"
      input: "ones_3/mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_3/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_3/Less"
      op: "Less"
      input: "ones_3/mul_1:z:0"
      input: "ones_3/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_3/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_3/packed/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "ones_3/packed"
      op: "Pack"
      input: "ones_3/packed/0:output:0"
      input: "random_uniform_3:output:0"
      input: "ones_3/packed/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_3/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_3"
      op: "Fill"
      input: "ones_3/packed:output:0"
      input: "ones_3/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "ones_2:output:0"
      input: "zeros_1:output:0"
      input: "ones_3:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "mul:z:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_4/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_4/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_4/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 7
          }
        }
      }
    }
    node_def {
      name: "random_uniform_4"
      op: "RandomUniformInt"
      input: "random_uniform_4/shape:output:0"
      input: "random_uniform_4/min:output:0"
      input: "random_uniform_4/max:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_6/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sub_6"
      op: "Sub"
      input: "sub_6/x:output:0"
      input: "random_uniform_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_uniform_5/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_5/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_5"
      op: "RandomUniformInt"
      input: "random_uniform_5/shape:output:0"
      input: "random_uniform_5/min:output:0"
      input: "sub_6:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_7/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sub_7"
      op: "Sub"
      input: "sub_7/x:output:0"
      input: "random_uniform_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sub_8"
      op: "Sub"
      input: "sub_7:z:0"
      input: "random_uniform_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_4/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_4/mul"
      op: "Mul"
      input: "ones_4/mul/x:output:0"
      input: "sub_8:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_4/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_4/Less"
      op: "Less"
      input: "ones_4/mul:z:0"
      input: "ones_4/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_4/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_4/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_4/packed"
      op: "Pack"
      input: "ones_4/packed/0:output:0"
      input: "ones_4/packed/1:output:0"
      input: "sub_8:z:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_4"
      op: "Fill"
      input: "ones_4/packed:output:0"
      input: "ones_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_2/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "zeros_2/mul"
      op: "Mul"
      input: "zeros_2/mul/x:output:0"
      input: "random_uniform_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_2/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "zeros_2/Less"
      op: "Less"
      input: "zeros_2/mul:z:0"
      input: "zeros_2/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_2/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "zeros_2/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "zeros_2/packed"
      op: "Pack"
      input: "zeros_2/packed/0:output:0"
      input: "zeros_2/packed/1:output:0"
      input: "random_uniform_4:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros_2"
      op: "Fill"
      input: "zeros_2/packed:output:0"
      input: "zeros_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_5/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_5/mul"
      op: "Mul"
      input: "ones_5/mul/x:output:0"
      input: "random_uniform_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_5/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_5/Less"
      op: "Less"
      input: "ones_5/mul:z:0"
      input: "ones_5/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_5/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_5/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_5/packed"
      op: "Pack"
      input: "ones_5/packed/0:output:0"
      input: "ones_5/packed/1:output:0"
      input: "random_uniform_5:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_5/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_5"
      op: "Fill"
      input: "ones_5/packed:output:0"
      input: "ones_5/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "concat_2/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "concat_2"
      op: "ConcatV2"
      input: "ones_4:output:0"
      input: "zeros_2:output:0"
      input: "ones_5:output:0"
      input: "concat_2/axis:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "mul_1:z:0"
      input: "concat_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_6/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_6/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_6/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 7
          }
        }
      }
    }
    node_def {
      name: "random_uniform_6"
      op: "RandomUniformInt"
      input: "random_uniform_6/shape:output:0"
      input: "random_uniform_6/min:output:0"
      input: "random_uniform_6/max:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_9/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sub_9"
      op: "Sub"
      input: "sub_9/x:output:0"
      input: "random_uniform_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_uniform_7/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_7/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_7"
      op: "RandomUniformInt"
      input: "random_uniform_7/shape:output:0"
      input: "random_uniform_7/min:output:0"
      input: "sub_9:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sub_10/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sub_10"
      op: "Sub"
      input: "sub_10/x:output:0"
      input: "random_uniform_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sub_11"
      op: "Sub"
      input: "sub_10:z:0"
      input: "random_uniform_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_6/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_6/mul"
      op: "Mul"
      input: "ones_6/mul/x:output:0"
      input: "sub_11:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_6/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_6/Less"
      op: "Less"
      input: "ones_6/mul:z:0"
      input: "ones_6/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_6/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_6/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_6/packed"
      op: "Pack"
      input: "ones_6/packed/0:output:0"
      input: "ones_6/packed/1:output:0"
      input: "sub_11:z:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_6/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_6"
      op: "Fill"
      input: "ones_6/packed:output:0"
      input: "ones_6/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_3/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "zeros_3/mul"
      op: "Mul"
      input: "zeros_3/mul/x:output:0"
      input: "random_uniform_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_3/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "zeros_3/Less"
      op: "Less"
      input: "zeros_3/mul:z:0"
      input: "zeros_3/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "zeros_3/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "zeros_3/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "zeros_3/packed"
      op: "Pack"
      input: "zeros_3/packed/0:output:0"
      input: "zeros_3/packed/1:output:0"
      input: "random_uniform_6:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros_3/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros_3"
      op: "Fill"
      input: "zeros_3/packed:output:0"
      input: "zeros_3/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_7/mul/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_7/mul"
      op: "Mul"
      input: "ones_7/mul/x:output:0"
      input: "random_uniform_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_7/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ones_7/Less"
      op: "Less"
      input: "ones_7/mul:z:0"
      input: "ones_7/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_7/packed/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ones_7/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node_def {
      name: "ones_7/packed"
      op: "Pack"
      input: "ones_7/packed/0:output:0"
      input: "ones_7/packed/1:output:0"
      input: "random_uniform_7:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ones_7/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_7"
      op: "Fill"
      input: "ones_7/packed:output:0"
      input: "ones_7/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "concat_3/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "concat_3"
      op: "ConcatV2"
      input: "ones_6:output:0"
      input: "zeros_3:output:0"
      input: "ones_7:output:0"
      input: "concat_3/axis:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "mul_3_0"
      op: "Mul"
      input: "mul_2:z:0"
      input: "concat_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "random_uniform/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "random_uniform/max:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "random_uniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "sub/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "sub:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "random_uniform_1/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "random_uniform_1/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "random_uniform_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "sub_1/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "sub_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "sub_2:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "ones/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "ones/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "ones/mul_1/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "ones/mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "ones/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "ones/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_18"
      op: "OptionalFromValue"
      input: "ones/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_19"
      op: "OptionalFromValue"
      input: "ones/packed/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_20"
      op: "OptionalFromValue"
      input: "ones/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_21"
      op: "OptionalFromValue"
      input: "ones/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_22"
      op: "OptionalFromValue"
      input: "ones:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_23"
      op: "OptionalFromValue"
      input: "zeros/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_24"
      op: "OptionalFromValue"
      input: "zeros/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_25"
      op: "OptionalFromValue"
      input: "zeros/mul_1/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_26"
      op: "OptionalFromValue"
      input: "zeros/mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_27"
      op: "OptionalFromValue"
      input: "zeros/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_28"
      op: "OptionalFromValue"
      input: "zeros/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_29"
      op: "OptionalFromValue"
      input: "zeros/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_30"
      op: "OptionalFromValue"
      input: "zeros/packed/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_31"
      op: "OptionalFromValue"
      input: "zeros/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_32"
      op: "OptionalFromValue"
      input: "zeros/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_33"
      op: "OptionalFromValue"
      input: "zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_34"
      op: "OptionalFromValue"
      input: "ones_1/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_35"
      op: "OptionalFromValue"
      input: "ones_1/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_36"
      op: "OptionalFromValue"
      input: "ones_1/mul_1/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_37"
      op: "OptionalFromValue"
      input: "ones_1/mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_38"
      op: "OptionalFromValue"
      input: "ones_1/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_39"
      op: "OptionalFromValue"
      input: "ones_1/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_40"
      op: "OptionalFromValue"
      input: "ones_1/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_41"
      op: "OptionalFromValue"
      input: "ones_1/packed/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_42"
      op: "OptionalFromValue"
      input: "ones_1/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_43"
      op: "OptionalFromValue"
      input: "ones_1/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_44"
      op: "OptionalFromValue"
      input: "ones_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_45"
      op: "OptionalFromValue"
      input: "concat/axis:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_46"
      op: "OptionalFromValue"
      input: "concat:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_47"
      op: "OptionalFromValue"
      input: "mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_48"
      op: "OptionalFromValue"
      input: "random_uniform_2/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_49"
      op: "OptionalFromValue"
      input: "random_uniform_2/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_50"
      op: "OptionalFromValue"
      input: "random_uniform_2/max:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_51"
      op: "OptionalFromValue"
      input: "random_uniform_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_52"
      op: "OptionalFromValue"
      input: "sub_3/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_53"
      op: "OptionalFromValue"
      input: "sub_3:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_54"
      op: "OptionalFromValue"
      input: "random_uniform_3/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_55"
      op: "OptionalFromValue"
      input: "random_uniform_3/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_56"
      op: "OptionalFromValue"
      input: "random_uniform_3:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_57"
      op: "OptionalFromValue"
      input: "sub_4/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_58"
      op: "OptionalFromValue"
      input: "sub_4:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_59"
      op: "OptionalFromValue"
      input: "sub_5:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_60"
      op: "OptionalFromValue"
      input: "ones_2/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_61"
      op: "OptionalFromValue"
      input: "ones_2/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_62"
      op: "OptionalFromValue"
      input: "ones_2/mul_1/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_63"
      op: "OptionalFromValue"
      input: "ones_2/mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_64"
      op: "OptionalFromValue"
      input: "ones_2/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_65"
      op: "OptionalFromValue"
      input: "ones_2/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_66"
      op: "OptionalFromValue"
      input: "ones_2/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_67"
      op: "OptionalFromValue"
      input: "ones_2/packed/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_68"
      op: "OptionalFromValue"
      input: "ones_2/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_69"
      op: "OptionalFromValue"
      input: "ones_2/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_70"
      op: "OptionalFromValue"
      input: "ones_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_71"
      op: "OptionalFromValue"
      input: "zeros_1/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_72"
      op: "OptionalFromValue"
      input: "zeros_1/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_73"
      op: "OptionalFromValue"
      input: "zeros_1/mul_1/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_74"
      op: "OptionalFromValue"
      input: "zeros_1/mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_75"
      op: "OptionalFromValue"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_76"
      op: "OptionalFromValue"
      input: "zeros_1/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_77"
      op: "OptionalFromValue"
      input: "zeros_1/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_78"
      op: "OptionalFromValue"
      input: "zeros_1/packed/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_79"
      op: "OptionalFromValue"
      input: "zeros_1/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_80"
      op: "OptionalFromValue"
      input: "zeros_1/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_81"
      op: "OptionalFromValue"
      input: "zeros_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_82"
      op: "OptionalFromValue"
      input: "ones_3/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_83"
      op: "OptionalFromValue"
      input: "ones_3/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_84"
      op: "OptionalFromValue"
      input: "ones_3/mul_1/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_85"
      op: "OptionalFromValue"
      input: "ones_3/mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_86"
      op: "OptionalFromValue"
      input: "ones_3/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_87"
      op: "OptionalFromValue"
      input: "ones_3/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_88"
      op: "OptionalFromValue"
      input: "ones_3/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_89"
      op: "OptionalFromValue"
      input: "ones_3/packed/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_90"
      op: "OptionalFromValue"
      input: "ones_3/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_91"
      op: "OptionalFromValue"
      input: "ones_3/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_92"
      op: "OptionalFromValue"
      input: "ones_3:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_93"
      op: "OptionalFromValue"
      input: "concat_1/axis:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_94"
      op: "OptionalFromValue"
      input: "concat_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_95"
      op: "OptionalFromValue"
      input: "mul_1:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_96"
      op: "OptionalFromValue"
      input: "random_uniform_4/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_97"
      op: "OptionalFromValue"
      input: "random_uniform_4/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_98"
      op: "OptionalFromValue"
      input: "random_uniform_4/max:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_99"
      op: "OptionalFromValue"
      input: "random_uniform_4:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_100"
      op: "OptionalFromValue"
      input: "sub_6/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_101"
      op: "OptionalFromValue"
      input: "sub_6:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_102"
      op: "OptionalFromValue"
      input: "random_uniform_5/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_103"
      op: "OptionalFromValue"
      input: "random_uniform_5/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_104"
      op: "OptionalFromValue"
      input: "random_uniform_5:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_105"
      op: "OptionalFromValue"
      input: "sub_7/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_106"
      op: "OptionalFromValue"
      input: "sub_7:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_107"
      op: "OptionalFromValue"
      input: "sub_8:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_108"
      op: "OptionalFromValue"
      input: "ones_4/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_109"
      op: "OptionalFromValue"
      input: "ones_4/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_110"
      op: "OptionalFromValue"
      input: "ones_4/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_111"
      op: "OptionalFromValue"
      input: "ones_4/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_112"
      op: "OptionalFromValue"
      input: "ones_4/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_113"
      op: "OptionalFromValue"
      input: "ones_4/packed/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_114"
      op: "OptionalFromValue"
      input: "ones_4/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_115"
      op: "OptionalFromValue"
      input: "ones_4/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_116"
      op: "OptionalFromValue"
      input: "ones_4:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_117"
      op: "OptionalFromValue"
      input: "zeros_2/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_118"
      op: "OptionalFromValue"
      input: "zeros_2/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_119"
      op: "OptionalFromValue"
      input: "zeros_2/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_120"
      op: "OptionalFromValue"
      input: "zeros_2/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_121"
      op: "OptionalFromValue"
      input: "zeros_2/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_122"
      op: "OptionalFromValue"
      input: "zeros_2/packed/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_123"
      op: "OptionalFromValue"
      input: "zeros_2/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_124"
      op: "OptionalFromValue"
      input: "zeros_2/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_125"
      op: "OptionalFromValue"
      input: "zeros_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_126"
      op: "OptionalFromValue"
      input: "ones_5/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_127"
      op: "OptionalFromValue"
      input: "ones_5/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_128"
      op: "OptionalFromValue"
      input: "ones_5/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_129"
      op: "OptionalFromValue"
      input: "ones_5/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_130"
      op: "OptionalFromValue"
      input: "ones_5/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_131"
      op: "OptionalFromValue"
      input: "ones_5/packed/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_132"
      op: "OptionalFromValue"
      input: "ones_5/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_133"
      op: "OptionalFromValue"
      input: "ones_5/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_134"
      op: "OptionalFromValue"
      input: "ones_5:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_135"
      op: "OptionalFromValue"
      input: "concat_2/axis:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_136"
      op: "OptionalFromValue"
      input: "concat_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_137"
      op: "OptionalFromValue"
      input: "mul_2:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_138"
      op: "OptionalFromValue"
      input: "random_uniform_6/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_139"
      op: "OptionalFromValue"
      input: "random_uniform_6/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_140"
      op: "OptionalFromValue"
      input: "random_uniform_6/max:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_141"
      op: "OptionalFromValue"
      input: "random_uniform_6:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_142"
      op: "OptionalFromValue"
      input: "sub_9/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_143"
      op: "OptionalFromValue"
      input: "sub_9:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_144"
      op: "OptionalFromValue"
      input: "random_uniform_7/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_145"
      op: "OptionalFromValue"
      input: "random_uniform_7/min:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_146"
      op: "OptionalFromValue"
      input: "random_uniform_7:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_147"
      op: "OptionalFromValue"
      input: "sub_10/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_148"
      op: "OptionalFromValue"
      input: "sub_10:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_149"
      op: "OptionalFromValue"
      input: "sub_11:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_150"
      op: "OptionalFromValue"
      input: "ones_6/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_151"
      op: "OptionalFromValue"
      input: "ones_6/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_152"
      op: "OptionalFromValue"
      input: "ones_6/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_153"
      op: "OptionalFromValue"
      input: "ones_6/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_154"
      op: "OptionalFromValue"
      input: "ones_6/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_155"
      op: "OptionalFromValue"
      input: "ones_6/packed/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_156"
      op: "OptionalFromValue"
      input: "ones_6/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_157"
      op: "OptionalFromValue"
      input: "ones_6/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_158"
      op: "OptionalFromValue"
      input: "ones_6:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_159"
      op: "OptionalFromValue"
      input: "zeros_3/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_160"
      op: "OptionalFromValue"
      input: "zeros_3/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_161"
      op: "OptionalFromValue"
      input: "zeros_3/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_162"
      op: "OptionalFromValue"
      input: "zeros_3/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_163"
      op: "OptionalFromValue"
      input: "zeros_3/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_164"
      op: "OptionalFromValue"
      input: "zeros_3/packed/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_165"
      op: "OptionalFromValue"
      input: "zeros_3/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_166"
      op: "OptionalFromValue"
      input: "zeros_3/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_167"
      op: "OptionalFromValue"
      input: "zeros_3:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_168"
      op: "OptionalFromValue"
      input: "ones_7/mul/x:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_169"
      op: "OptionalFromValue"
      input: "ones_7/mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_170"
      op: "OptionalFromValue"
      input: "ones_7/Less/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_171"
      op: "OptionalFromValue"
      input: "ones_7/Less:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_172"
      op: "OptionalFromValue"
      input: "ones_7/packed/0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_173"
      op: "OptionalFromValue"
      input: "ones_7/packed/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_174"
      op: "OptionalFromValue"
      input: "ones_7/packed:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_175"
      op: "OptionalFromValue"
      input: "ones_7/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_176"
      op: "OptionalFromValue"
      input: "ones_7:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_177"
      op: "OptionalFromValue"
      input: "concat_3/axis:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_178"
      op: "OptionalFromValue"
      input: "concat_3:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "mul_3"
      value: "mul_3_0:z:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_100"
      value: "OptionalFromValue_100:optional:0"
    }
    ret {
      key: "optionalfromvalue_101"
      value: "OptionalFromValue_101:optional:0"
    }
    ret {
      key: "optionalfromvalue_102"
      value: "OptionalFromValue_102:optional:0"
    }
    ret {
      key: "optionalfromvalue_103"
      value: "OptionalFromValue_103:optional:0"
    }
    ret {
      key: "optionalfromvalue_104"
      value: "OptionalFromValue_104:optional:0"
    }
    ret {
      key: "optionalfromvalue_105"
      value: "OptionalFromValue_105:optional:0"
    }
    ret {
      key: "optionalfromvalue_106"
      value: "OptionalFromValue_106:optional:0"
    }
    ret {
      key: "optionalfromvalue_107"
      value: "OptionalFromValue_107:optional:0"
    }
    ret {
      key: "optionalfromvalue_108"
      value: "OptionalFromValue_108:optional:0"
    }
    ret {
      key: "optionalfromvalue_109"
      value: "OptionalFromValue_109:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_110"
      value: "OptionalFromValue_110:optional:0"
    }
    ret {
      key: "optionalfromvalue_111"
      value: "OptionalFromValue_111:optional:0"
    }
    ret {
      key: "optionalfromvalue_112"
      value: "OptionalFromValue_112:optional:0"
    }
    ret {
      key: "optionalfromvalue_113"
      value: "OptionalFromValue_113:optional:0"
    }
    ret {
      key: "optionalfromvalue_114"
      value: "OptionalFromValue_114:optional:0"
    }
    ret {
      key: "optionalfromvalue_115"
      value: "OptionalFromValue_115:optional:0"
    }
    ret {
      key: "optionalfromvalue_116"
      value: "OptionalFromValue_116:optional:0"
    }
    ret {
      key: "optionalfromvalue_117"
      value: "OptionalFromValue_117:optional:0"
    }
    ret {
      key: "optionalfromvalue_118"
      value: "OptionalFromValue_118:optional:0"
    }
    ret {
      key: "optionalfromvalue_119"
      value: "OptionalFromValue_119:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_120"
      value: "OptionalFromValue_120:optional:0"
    }
    ret {
      key: "optionalfromvalue_121"
      value: "OptionalFromValue_121:optional:0"
    }
    ret {
      key: "optionalfromvalue_122"
      value: "OptionalFromValue_122:optional:0"
    }
    ret {
      key: "optionalfromvalue_123"
      value: "OptionalFromValue_123:optional:0"
    }
    ret {
      key: "optionalfromvalue_124"
      value: "OptionalFromValue_124:optional:0"
    }
    ret {
      key: "optionalfromvalue_125"
      value: "OptionalFromValue_125:optional:0"
    }
    ret {
      key: "optionalfromvalue_126"
      value: "OptionalFromValue_126:optional:0"
    }
    ret {
      key: "optionalfromvalue_127"
      value: "OptionalFromValue_127:optional:0"
    }
    ret {
      key: "optionalfromvalue_128"
      value: "OptionalFromValue_128:optional:0"
    }
    ret {
      key: "optionalfromvalue_129"
      value: "OptionalFromValue_129:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_130"
      value: "OptionalFromValue_130:optional:0"
    }
    ret {
      key: "optionalfromvalue_131"
      value: "OptionalFromValue_131:optional:0"
    }
    ret {
      key: "optionalfromvalue_132"
      value: "OptionalFromValue_132:optional:0"
    }
    ret {
      key: "optionalfromvalue_133"
      value: "OptionalFromValue_133:optional:0"
    }
    ret {
      key: "optionalfromvalue_134"
      value: "OptionalFromValue_134:optional:0"
    }
    ret {
      key: "optionalfromvalue_135"
      value: "OptionalFromValue_135:optional:0"
    }
    ret {
      key: "optionalfromvalue_136"
      value: "OptionalFromValue_136:optional:0"
    }
    ret {
      key: "optionalfromvalue_137"
      value: "OptionalFromValue_137:optional:0"
    }
    ret {
      key: "optionalfromvalue_138"
      value: "OptionalFromValue_138:optional:0"
    }
    ret {
      key: "optionalfromvalue_139"
      value: "OptionalFromValue_139:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_140"
      value: "OptionalFromValue_140:optional:0"
    }
    ret {
      key: "optionalfromvalue_141"
      value: "OptionalFromValue_141:optional:0"
    }
    ret {
      key: "optionalfromvalue_142"
      value: "OptionalFromValue_142:optional:0"
    }
    ret {
      key: "optionalfromvalue_143"
      value: "OptionalFromValue_143:optional:0"
    }
    ret {
      key: "optionalfromvalue_144"
      value: "OptionalFromValue_144:optional:0"
    }
    ret {
      key: "optionalfromvalue_145"
      value: "OptionalFromValue_145:optional:0"
    }
    ret {
      key: "optionalfromvalue_146"
      value: "OptionalFromValue_146:optional:0"
    }
    ret {
      key: "optionalfromvalue_147"
      value: "OptionalFromValue_147:optional:0"
    }
    ret {
      key: "optionalfromvalue_148"
      value: "OptionalFromValue_148:optional:0"
    }
    ret {
      key: "optionalfromvalue_149"
      value: "OptionalFromValue_149:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_150"
      value: "OptionalFromValue_150:optional:0"
    }
    ret {
      key: "optionalfromvalue_151"
      value: "OptionalFromValue_151:optional:0"
    }
    ret {
      key: "optionalfromvalue_152"
      value: "OptionalFromValue_152:optional:0"
    }
    ret {
      key: "optionalfromvalue_153"
      value: "OptionalFromValue_153:optional:0"
    }
    ret {
      key: "optionalfromvalue_154"
      value: "OptionalFromValue_154:optional:0"
    }
    ret {
      key: "optionalfromvalue_155"
      value: "OptionalFromValue_155:optional:0"
    }
    ret {
      key: "optionalfromvalue_156"
      value: "OptionalFromValue_156:optional:0"
    }
    ret {
      key: "optionalfromvalue_157"
      value: "OptionalFromValue_157:optional:0"
    }
    ret {
      key: "optionalfromvalue_158"
      value: "OptionalFromValue_158:optional:0"
    }
    ret {
      key: "optionalfromvalue_159"
      value: "OptionalFromValue_159:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_160"
      value: "OptionalFromValue_160:optional:0"
    }
    ret {
      key: "optionalfromvalue_161"
      value: "OptionalFromValue_161:optional:0"
    }
    ret {
      key: "optionalfromvalue_162"
      value: "OptionalFromValue_162:optional:0"
    }
    ret {
      key: "optionalfromvalue_163"
      value: "OptionalFromValue_163:optional:0"
    }
    ret {
      key: "optionalfromvalue_164"
      value: "OptionalFromValue_164:optional:0"
    }
    ret {
      key: "optionalfromvalue_165"
      value: "OptionalFromValue_165:optional:0"
    }
    ret {
      key: "optionalfromvalue_166"
      value: "OptionalFromValue_166:optional:0"
    }
    ret {
      key: "optionalfromvalue_167"
      value: "OptionalFromValue_167:optional:0"
    }
    ret {
      key: "optionalfromvalue_168"
      value: "OptionalFromValue_168:optional:0"
    }
    ret {
      key: "optionalfromvalue_169"
      value: "OptionalFromValue_169:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_170"
      value: "OptionalFromValue_170:optional:0"
    }
    ret {
      key: "optionalfromvalue_171"
      value: "OptionalFromValue_171:optional:0"
    }
    ret {
      key: "optionalfromvalue_172"
      value: "OptionalFromValue_172:optional:0"
    }
    ret {
      key: "optionalfromvalue_173"
      value: "OptionalFromValue_173:optional:0"
    }
    ret {
      key: "optionalfromvalue_174"
      value: "OptionalFromValue_174:optional:0"
    }
    ret {
      key: "optionalfromvalue_175"
      value: "OptionalFromValue_175:optional:0"
    }
    ret {
      key: "optionalfromvalue_176"
      value: "OptionalFromValue_176:optional:0"
    }
    ret {
      key: "optionalfromvalue_177"
      value: "OptionalFromValue_177:optional:0"
    }
    ret {
      key: "optionalfromvalue_178"
      value: "OptionalFromValue_178:optional:0"
    }
    ret {
      key: "optionalfromvalue_18"
      value: "OptionalFromValue_18:optional:0"
    }
    ret {
      key: "optionalfromvalue_19"
      value: "OptionalFromValue_19:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_20"
      value: "OptionalFromValue_20:optional:0"
    }
    ret {
      key: "optionalfromvalue_21"
      value: "OptionalFromValue_21:optional:0"
    }
    ret {
      key: "optionalfromvalue_22"
      value: "OptionalFromValue_22:optional:0"
    }
    ret {
      key: "optionalfromvalue_23"
      value: "OptionalFromValue_23:optional:0"
    }
    ret {
      key: "optionalfromvalue_24"
      value: "OptionalFromValue_24:optional:0"
    }
    ret {
      key: "optionalfromvalue_25"
      value: "OptionalFromValue_25:optional:0"
    }
    ret {
      key: "optionalfromvalue_26"
      value: "OptionalFromValue_26:optional:0"
    }
    ret {
      key: "optionalfromvalue_27"
      value: "OptionalFromValue_27:optional:0"
    }
    ret {
      key: "optionalfromvalue_28"
      value: "OptionalFromValue_28:optional:0"
    }
    ret {
      key: "optionalfromvalue_29"
      value: "OptionalFromValue_29:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_30"
      value: "OptionalFromValue_30:optional:0"
    }
    ret {
      key: "optionalfromvalue_31"
      value: "OptionalFromValue_31:optional:0"
    }
    ret {
      key: "optionalfromvalue_32"
      value: "OptionalFromValue_32:optional:0"
    }
    ret {
      key: "optionalfromvalue_33"
      value: "OptionalFromValue_33:optional:0"
    }
    ret {
      key: "optionalfromvalue_34"
      value: "OptionalFromValue_34:optional:0"
    }
    ret {
      key: "optionalfromvalue_35"
      value: "OptionalFromValue_35:optional:0"
    }
    ret {
      key: "optionalfromvalue_36"
      value: "OptionalFromValue_36:optional:0"
    }
    ret {
      key: "optionalfromvalue_37"
      value: "OptionalFromValue_37:optional:0"
    }
    ret {
      key: "optionalfromvalue_38"
      value: "OptionalFromValue_38:optional:0"
    }
    ret {
      key: "optionalfromvalue_39"
      value: "OptionalFromValue_39:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_40"
      value: "OptionalFromValue_40:optional:0"
    }
    ret {
      key: "optionalfromvalue_41"
      value: "OptionalFromValue_41:optional:0"
    }
    ret {
      key: "optionalfromvalue_42"
      value: "OptionalFromValue_42:optional:0"
    }
    ret {
      key: "optionalfromvalue_43"
      value: "OptionalFromValue_43:optional:0"
    }
    ret {
      key: "optionalfromvalue_44"
      value: "OptionalFromValue_44:optional:0"
    }
    ret {
      key: "optionalfromvalue_45"
      value: "OptionalFromValue_45:optional:0"
    }
    ret {
      key: "optionalfromvalue_46"
      value: "OptionalFromValue_46:optional:0"
    }
    ret {
      key: "optionalfromvalue_47"
      value: "OptionalFromValue_47:optional:0"
    }
    ret {
      key: "optionalfromvalue_48"
      value: "OptionalFromValue_48:optional:0"
    }
    ret {
      key: "optionalfromvalue_49"
      value: "OptionalFromValue_49:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_50"
      value: "OptionalFromValue_50:optional:0"
    }
    ret {
      key: "optionalfromvalue_51"
      value: "OptionalFromValue_51:optional:0"
    }
    ret {
      key: "optionalfromvalue_52"
      value: "OptionalFromValue_52:optional:0"
    }
    ret {
      key: "optionalfromvalue_53"
      value: "OptionalFromValue_53:optional:0"
    }
    ret {
      key: "optionalfromvalue_54"
      value: "OptionalFromValue_54:optional:0"
    }
    ret {
      key: "optionalfromvalue_55"
      value: "OptionalFromValue_55:optional:0"
    }
    ret {
      key: "optionalfromvalue_56"
      value: "OptionalFromValue_56:optional:0"
    }
    ret {
      key: "optionalfromvalue_57"
      value: "OptionalFromValue_57:optional:0"
    }
    ret {
      key: "optionalfromvalue_58"
      value: "OptionalFromValue_58:optional:0"
    }
    ret {
      key: "optionalfromvalue_59"
      value: "OptionalFromValue_59:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_60"
      value: "OptionalFromValue_60:optional:0"
    }
    ret {
      key: "optionalfromvalue_61"
      value: "OptionalFromValue_61:optional:0"
    }
    ret {
      key: "optionalfromvalue_62"
      value: "OptionalFromValue_62:optional:0"
    }
    ret {
      key: "optionalfromvalue_63"
      value: "OptionalFromValue_63:optional:0"
    }
    ret {
      key: "optionalfromvalue_64"
      value: "OptionalFromValue_64:optional:0"
    }
    ret {
      key: "optionalfromvalue_65"
      value: "OptionalFromValue_65:optional:0"
    }
    ret {
      key: "optionalfromvalue_66"
      value: "OptionalFromValue_66:optional:0"
    }
    ret {
      key: "optionalfromvalue_67"
      value: "OptionalFromValue_67:optional:0"
    }
    ret {
      key: "optionalfromvalue_68"
      value: "OptionalFromValue_68:optional:0"
    }
    ret {
      key: "optionalfromvalue_69"
      value: "OptionalFromValue_69:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_70"
      value: "OptionalFromValue_70:optional:0"
    }
    ret {
      key: "optionalfromvalue_71"
      value: "OptionalFromValue_71:optional:0"
    }
    ret {
      key: "optionalfromvalue_72"
      value: "OptionalFromValue_72:optional:0"
    }
    ret {
      key: "optionalfromvalue_73"
      value: "OptionalFromValue_73:optional:0"
    }
    ret {
      key: "optionalfromvalue_74"
      value: "OptionalFromValue_74:optional:0"
    }
    ret {
      key: "optionalfromvalue_75"
      value: "OptionalFromValue_75:optional:0"
    }
    ret {
      key: "optionalfromvalue_76"
      value: "OptionalFromValue_76:optional:0"
    }
    ret {
      key: "optionalfromvalue_77"
      value: "OptionalFromValue_77:optional:0"
    }
    ret {
      key: "optionalfromvalue_78"
      value: "OptionalFromValue_78:optional:0"
    }
    ret {
      key: "optionalfromvalue_79"
      value: "OptionalFromValue_79:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_80"
      value: "OptionalFromValue_80:optional:0"
    }
    ret {
      key: "optionalfromvalue_81"
      value: "OptionalFromValue_81:optional:0"
    }
    ret {
      key: "optionalfromvalue_82"
      value: "OptionalFromValue_82:optional:0"
    }
    ret {
      key: "optionalfromvalue_83"
      value: "OptionalFromValue_83:optional:0"
    }
    ret {
      key: "optionalfromvalue_84"
      value: "OptionalFromValue_84:optional:0"
    }
    ret {
      key: "optionalfromvalue_85"
      value: "OptionalFromValue_85:optional:0"
    }
    ret {
      key: "optionalfromvalue_86"
      value: "OptionalFromValue_86:optional:0"
    }
    ret {
      key: "optionalfromvalue_87"
      value: "OptionalFromValue_87:optional:0"
    }
    ret {
      key: "optionalfromvalue_88"
      value: "OptionalFromValue_88:optional:0"
    }
    ret {
      key: "optionalfromvalue_89"
      value: "OptionalFromValue_89:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    ret {
      key: "optionalfromvalue_90"
      value: "OptionalFromValue_90:optional:0"
    }
    ret {
      key: "optionalfromvalue_91"
      value: "OptionalFromValue_91:optional:0"
    }
    ret {
      key: "optionalfromvalue_92"
      value: "OptionalFromValue_92:optional:0"
    }
    ret {
      key: "optionalfromvalue_93"
      value: "OptionalFromValue_93:optional:0"
    }
    ret {
      key: "optionalfromvalue_94"
      value: "OptionalFromValue_94:optional:0"
    }
    ret {
      key: "optionalfromvalue_95"
      value: "OptionalFromValue_95:optional:0"
    }
    ret {
      key: "optionalfromvalue_96"
      value: "OptionalFromValue_96:optional:0"
    }
    ret {
      key: "optionalfromvalue_97"
      value: "OptionalFromValue_97:optional:0"
    }
    ret {
      key: "optionalfromvalue_98"
      value: "OptionalFromValue_98:optional:0"
    }
    ret {
      key: "optionalfromvalue_99"
      value: "OptionalFromValue_99:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_8_cond_true_2317"
      input_arg {
        name: "readvariableop_batch_normalization_8_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_8_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_8_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_8_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_8_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_8_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_8_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_8_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_8_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_8_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_1_false_1832"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_false_1764"
      input_arg {
        name: "readvariableop_batch_normalization_4_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_4_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_4_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_4_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_4_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_4_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_4_cond_true_2264"
      input_arg {
        name: "activation_4_relu_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "activation_4_relu"
        type: DT_FLOAT
      }
    }
    ret {
      key: "activation_4_relu"
      value: "activation_4_relu_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_false_1505"
      input_arg {
        name: "readvariableop_batch_normalization_2_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_2_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_2_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_2_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_2_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_2_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_false_1648"
      input_arg {
        name: "readvariableop_batch_normalization_3_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_3_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_3_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_3_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_3_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_3_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_1_false_1573"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "speech_features_spec_augment_cond_false_295"
      input_arg {
        name: "identity_speech_features_normalizer_truediv"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_18"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_19"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_20"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_21"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_22"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_23"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_24"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_25"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_26"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_27"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_28"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_29"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_30"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_31"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_32"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_33"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_34"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_35"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_36"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_37"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_38"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_39"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_40"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_41"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_42"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_43"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_44"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_45"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_46"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_47"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_48"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_49"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_50"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_51"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_52"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_53"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_54"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_55"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_56"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_57"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_58"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_59"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_60"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_61"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_62"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_63"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_64"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_65"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_66"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_67"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_68"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_69"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_70"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_71"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_72"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_73"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_74"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_75"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_76"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_77"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_78"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_79"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_80"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_81"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_82"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_83"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_84"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_85"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_86"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_87"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_88"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_89"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_90"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_91"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_92"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_93"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_94"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_95"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_96"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_97"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_98"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_99"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_100"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_101"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_102"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_103"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_104"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_105"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_106"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_107"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_108"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_109"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_110"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_111"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_112"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_113"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_114"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_115"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_116"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_117"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_118"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_119"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_120"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_121"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_122"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_123"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_124"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_125"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_126"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_127"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_128"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_129"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_130"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_131"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_132"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_133"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_134"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_135"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_136"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_137"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_138"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_139"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_140"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_141"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_142"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_143"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_144"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_145"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_146"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_147"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_148"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_149"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_150"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_151"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_152"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_153"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_154"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_155"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_156"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_157"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_158"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_159"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_160"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_161"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_162"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_163"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_164"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_165"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_166"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_167"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_168"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_169"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_170"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_171"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_172"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_173"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_174"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_175"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_176"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_177"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_178"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_speech_features_normalizer_truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_18"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_19"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_20"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_21"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_22"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_23"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_24"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_25"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_26"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_27"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_28"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_29"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_30"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_31"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_32"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_33"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_34"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_35"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_36"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_37"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_38"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_39"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_40"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_41"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_42"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_43"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_44"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_45"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_46"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_47"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_48"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_49"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_50"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_51"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_52"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_53"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_54"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_55"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_56"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_57"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_58"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_59"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_60"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_61"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_62"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_63"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_64"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_65"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_66"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_67"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_68"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_69"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_70"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_71"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_72"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_73"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_74"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_75"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_76"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_77"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_78"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_79"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_80"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_81"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_82"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_83"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_84"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_85"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_86"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_87"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_88"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_89"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_90"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_91"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_92"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_93"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_94"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_95"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_96"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_97"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_98"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_99"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_100"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_101"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_102"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_103"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_104"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_105"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_106"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_107"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_108"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_109"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_110"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_111"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_112"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_113"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_114"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_115"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_116"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_117"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_118"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_119"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_120"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_121"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_122"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_123"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_124"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_125"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_126"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_127"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_128"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_129"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_130"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_131"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_132"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_133"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_134"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_135"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_136"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_137"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_138"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_139"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_140"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_141"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_142"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_143"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_144"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_145"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_146"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_147"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_148"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_149"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_150"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_151"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_152"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_153"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_154"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_155"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_156"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_157"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_158"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_159"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_160"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_161"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_162"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_163"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_164"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_165"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_166"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_167"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_168"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_169"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_170"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_171"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_172"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_173"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_174"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_175"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_176"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_177"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_178"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_100"
      value: "OptionalNone_100:optional:0"
    }
    ret {
      key: "optionalnone_101"
      value: "OptionalNone_101:optional:0"
    }
    ret {
      key: "optionalnone_102"
      value: "OptionalNone_102:optional:0"
    }
    ret {
      key: "optionalnone_103"
      value: "OptionalNone_103:optional:0"
    }
    ret {
      key: "optionalnone_104"
      value: "OptionalNone_104:optional:0"
    }
    ret {
      key: "optionalnone_105"
      value: "OptionalNone_105:optional:0"
    }
    ret {
      key: "optionalnone_106"
      value: "OptionalNone_106:optional:0"
    }
    ret {
      key: "optionalnone_107"
      value: "OptionalNone_107:optional:0"
    }
    ret {
      key: "optionalnone_108"
      value: "OptionalNone_108:optional:0"
    }
    ret {
      key: "optionalnone_109"
      value: "OptionalNone_109:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_110"
      value: "OptionalNone_110:optional:0"
    }
    ret {
      key: "optionalnone_111"
      value: "OptionalNone_111:optional:0"
    }
    ret {
      key: "optionalnone_112"
      value: "OptionalNone_112:optional:0"
    }
    ret {
      key: "optionalnone_113"
      value: "OptionalNone_113:optional:0"
    }
    ret {
      key: "optionalnone_114"
      value: "OptionalNone_114:optional:0"
    }
    ret {
      key: "optionalnone_115"
      value: "OptionalNone_115:optional:0"
    }
    ret {
      key: "optionalnone_116"
      value: "OptionalNone_116:optional:0"
    }
    ret {
      key: "optionalnone_117"
      value: "OptionalNone_117:optional:0"
    }
    ret {
      key: "optionalnone_118"
      value: "OptionalNone_118:optional:0"
    }
    ret {
      key: "optionalnone_119"
      value: "OptionalNone_119:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_120"
      value: "OptionalNone_120:optional:0"
    }
    ret {
      key: "optionalnone_121"
      value: "OptionalNone_121:optional:0"
    }
    ret {
      key: "optionalnone_122"
      value: "OptionalNone_122:optional:0"
    }
    ret {
      key: "optionalnone_123"
      value: "OptionalNone_123:optional:0"
    }
    ret {
      key: "optionalnone_124"
      value: "OptionalNone_124:optional:0"
    }
    ret {
      key: "optionalnone_125"
      value: "OptionalNone_125:optional:0"
    }
    ret {
      key: "optionalnone_126"
      value: "OptionalNone_126:optional:0"
    }
    ret {
      key: "optionalnone_127"
      value: "OptionalNone_127:optional:0"
    }
    ret {
      key: "optionalnone_128"
      value: "OptionalNone_128:optional:0"
    }
    ret {
      key: "optionalnone_129"
      value: "OptionalNone_129:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_130"
      value: "OptionalNone_130:optional:0"
    }
    ret {
      key: "optionalnone_131"
      value: "OptionalNone_131:optional:0"
    }
    ret {
      key: "optionalnone_132"
      value: "OptionalNone_132:optional:0"
    }
    ret {
      key: "optionalnone_133"
      value: "OptionalNone_133:optional:0"
    }
    ret {
      key: "optionalnone_134"
      value: "OptionalNone_134:optional:0"
    }
    ret {
      key: "optionalnone_135"
      value: "OptionalNone_135:optional:0"
    }
    ret {
      key: "optionalnone_136"
      value: "OptionalNone_136:optional:0"
    }
    ret {
      key: "optionalnone_137"
      value: "OptionalNone_137:optional:0"
    }
    ret {
      key: "optionalnone_138"
      value: "OptionalNone_138:optional:0"
    }
    ret {
      key: "optionalnone_139"
      value: "OptionalNone_139:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_140"
      value: "OptionalNone_140:optional:0"
    }
    ret {
      key: "optionalnone_141"
      value: "OptionalNone_141:optional:0"
    }
    ret {
      key: "optionalnone_142"
      value: "OptionalNone_142:optional:0"
    }
    ret {
      key: "optionalnone_143"
      value: "OptionalNone_143:optional:0"
    }
    ret {
      key: "optionalnone_144"
      value: "OptionalNone_144:optional:0"
    }
    ret {
      key: "optionalnone_145"
      value: "OptionalNone_145:optional:0"
    }
    ret {
      key: "optionalnone_146"
      value: "OptionalNone_146:optional:0"
    }
    ret {
      key: "optionalnone_147"
      value: "OptionalNone_147:optional:0"
    }
    ret {
      key: "optionalnone_148"
      value: "OptionalNone_148:optional:0"
    }
    ret {
      key: "optionalnone_149"
      value: "OptionalNone_149:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_150"
      value: "OptionalNone_150:optional:0"
    }
    ret {
      key: "optionalnone_151"
      value: "OptionalNone_151:optional:0"
    }
    ret {
      key: "optionalnone_152"
      value: "OptionalNone_152:optional:0"
    }
    ret {
      key: "optionalnone_153"
      value: "OptionalNone_153:optional:0"
    }
    ret {
      key: "optionalnone_154"
      value: "OptionalNone_154:optional:0"
    }
    ret {
      key: "optionalnone_155"
      value: "OptionalNone_155:optional:0"
    }
    ret {
      key: "optionalnone_156"
      value: "OptionalNone_156:optional:0"
    }
    ret {
      key: "optionalnone_157"
      value: "OptionalNone_157:optional:0"
    }
    ret {
      key: "optionalnone_158"
      value: "OptionalNone_158:optional:0"
    }
    ret {
      key: "optionalnone_159"
      value: "OptionalNone_159:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_160"
      value: "OptionalNone_160:optional:0"
    }
    ret {
      key: "optionalnone_161"
      value: "OptionalNone_161:optional:0"
    }
    ret {
      key: "optionalnone_162"
      value: "OptionalNone_162:optional:0"
    }
    ret {
      key: "optionalnone_163"
      value: "OptionalNone_163:optional:0"
    }
    ret {
      key: "optionalnone_164"
      value: "OptionalNone_164:optional:0"
    }
    ret {
      key: "optionalnone_165"
      value: "OptionalNone_165:optional:0"
    }
    ret {
      key: "optionalnone_166"
      value: "OptionalNone_166:optional:0"
    }
    ret {
      key: "optionalnone_167"
      value: "OptionalNone_167:optional:0"
    }
    ret {
      key: "optionalnone_168"
      value: "OptionalNone_168:optional:0"
    }
    ret {
      key: "optionalnone_169"
      value: "OptionalNone_169:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_170"
      value: "OptionalNone_170:optional:0"
    }
    ret {
      key: "optionalnone_171"
      value: "OptionalNone_171:optional:0"
    }
    ret {
      key: "optionalnone_172"
      value: "OptionalNone_172:optional:0"
    }
    ret {
      key: "optionalnone_173"
      value: "OptionalNone_173:optional:0"
    }
    ret {
      key: "optionalnone_174"
      value: "OptionalNone_174:optional:0"
    }
    ret {
      key: "optionalnone_175"
      value: "OptionalNone_175:optional:0"
    }
    ret {
      key: "optionalnone_176"
      value: "OptionalNone_176:optional:0"
    }
    ret {
      key: "optionalnone_177"
      value: "OptionalNone_177:optional:0"
    }
    ret {
      key: "optionalnone_178"
      value: "OptionalNone_178:optional:0"
    }
    ret {
      key: "optionalnone_18"
      value: "OptionalNone_18:optional:0"
    }
    ret {
      key: "optionalnone_19"
      value: "OptionalNone_19:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_20"
      value: "OptionalNone_20:optional:0"
    }
    ret {
      key: "optionalnone_21"
      value: "OptionalNone_21:optional:0"
    }
    ret {
      key: "optionalnone_22"
      value: "OptionalNone_22:optional:0"
    }
    ret {
      key: "optionalnone_23"
      value: "OptionalNone_23:optional:0"
    }
    ret {
      key: "optionalnone_24"
      value: "OptionalNone_24:optional:0"
    }
    ret {
      key: "optionalnone_25"
      value: "OptionalNone_25:optional:0"
    }
    ret {
      key: "optionalnone_26"
      value: "OptionalNone_26:optional:0"
    }
    ret {
      key: "optionalnone_27"
      value: "OptionalNone_27:optional:0"
    }
    ret {
      key: "optionalnone_28"
      value: "OptionalNone_28:optional:0"
    }
    ret {
      key: "optionalnone_29"
      value: "OptionalNone_29:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_30"
      value: "OptionalNone_30:optional:0"
    }
    ret {
      key: "optionalnone_31"
      value: "OptionalNone_31:optional:0"
    }
    ret {
      key: "optionalnone_32"
      value: "OptionalNone_32:optional:0"
    }
    ret {
      key: "optionalnone_33"
      value: "OptionalNone_33:optional:0"
    }
    ret {
      key: "optionalnone_34"
      value: "OptionalNone_34:optional:0"
    }
    ret {
      key: "optionalnone_35"
      value: "OptionalNone_35:optional:0"
    }
    ret {
      key: "optionalnone_36"
      value: "OptionalNone_36:optional:0"
    }
    ret {
      key: "optionalnone_37"
      value: "OptionalNone_37:optional:0"
    }
    ret {
      key: "optionalnone_38"
      value: "OptionalNone_38:optional:0"
    }
    ret {
      key: "optionalnone_39"
      value: "OptionalNone_39:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_40"
      value: "OptionalNone_40:optional:0"
    }
    ret {
      key: "optionalnone_41"
      value: "OptionalNone_41:optional:0"
    }
    ret {
      key: "optionalnone_42"
      value: "OptionalNone_42:optional:0"
    }
    ret {
      key: "optionalnone_43"
      value: "OptionalNone_43:optional:0"
    }
    ret {
      key: "optionalnone_44"
      value: "OptionalNone_44:optional:0"
    }
    ret {
      key: "optionalnone_45"
      value: "OptionalNone_45:optional:0"
    }
    ret {
      key: "optionalnone_46"
      value: "OptionalNone_46:optional:0"
    }
    ret {
      key: "optionalnone_47"
      value: "OptionalNone_47:optional:0"
    }
    ret {
      key: "optionalnone_48"
      value: "OptionalNone_48:optional:0"
    }
    ret {
      key: "optionalnone_49"
      value: "OptionalNone_49:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_50"
      value: "OptionalNone_50:optional:0"
    }
    ret {
      key: "optionalnone_51"
      value: "OptionalNone_51:optional:0"
    }
    ret {
      key: "optionalnone_52"
      value: "OptionalNone_52:optional:0"
    }
    ret {
      key: "optionalnone_53"
      value: "OptionalNone_53:optional:0"
    }
    ret {
      key: "optionalnone_54"
      value: "OptionalNone_54:optional:0"
    }
    ret {
      key: "optionalnone_55"
      value: "OptionalNone_55:optional:0"
    }
    ret {
      key: "optionalnone_56"
      value: "OptionalNone_56:optional:0"
    }
    ret {
      key: "optionalnone_57"
      value: "OptionalNone_57:optional:0"
    }
    ret {
      key: "optionalnone_58"
      value: "OptionalNone_58:optional:0"
    }
    ret {
      key: "optionalnone_59"
      value: "OptionalNone_59:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_60"
      value: "OptionalNone_60:optional:0"
    }
    ret {
      key: "optionalnone_61"
      value: "OptionalNone_61:optional:0"
    }
    ret {
      key: "optionalnone_62"
      value: "OptionalNone_62:optional:0"
    }
    ret {
      key: "optionalnone_63"
      value: "OptionalNone_63:optional:0"
    }
    ret {
      key: "optionalnone_64"
      value: "OptionalNone_64:optional:0"
    }
    ret {
      key: "optionalnone_65"
      value: "OptionalNone_65:optional:0"
    }
    ret {
      key: "optionalnone_66"
      value: "OptionalNone_66:optional:0"
    }
    ret {
      key: "optionalnone_67"
      value: "OptionalNone_67:optional:0"
    }
    ret {
      key: "optionalnone_68"
      value: "OptionalNone_68:optional:0"
    }
    ret {
      key: "optionalnone_69"
      value: "OptionalNone_69:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_70"
      value: "OptionalNone_70:optional:0"
    }
    ret {
      key: "optionalnone_71"
      value: "OptionalNone_71:optional:0"
    }
    ret {
      key: "optionalnone_72"
      value: "OptionalNone_72:optional:0"
    }
    ret {
      key: "optionalnone_73"
      value: "OptionalNone_73:optional:0"
    }
    ret {
      key: "optionalnone_74"
      value: "OptionalNone_74:optional:0"
    }
    ret {
      key: "optionalnone_75"
      value: "OptionalNone_75:optional:0"
    }
    ret {
      key: "optionalnone_76"
      value: "OptionalNone_76:optional:0"
    }
    ret {
      key: "optionalnone_77"
      value: "OptionalNone_77:optional:0"
    }
    ret {
      key: "optionalnone_78"
      value: "OptionalNone_78:optional:0"
    }
    ret {
      key: "optionalnone_79"
      value: "OptionalNone_79:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_80"
      value: "OptionalNone_80:optional:0"
    }
    ret {
      key: "optionalnone_81"
      value: "OptionalNone_81:optional:0"
    }
    ret {
      key: "optionalnone_82"
      value: "OptionalNone_82:optional:0"
    }
    ret {
      key: "optionalnone_83"
      value: "OptionalNone_83:optional:0"
    }
    ret {
      key: "optionalnone_84"
      value: "OptionalNone_84:optional:0"
    }
    ret {
      key: "optionalnone_85"
      value: "OptionalNone_85:optional:0"
    }
    ret {
      key: "optionalnone_86"
      value: "OptionalNone_86:optional:0"
    }
    ret {
      key: "optionalnone_87"
      value: "OptionalNone_87:optional:0"
    }
    ret {
      key: "optionalnone_88"
      value: "OptionalNone_88:optional:0"
    }
    ret {
      key: "optionalnone_89"
      value: "OptionalNone_89:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    ret {
      key: "optionalnone_90"
      value: "OptionalNone_90:optional:0"
    }
    ret {
      key: "optionalnone_91"
      value: "OptionalNone_91:optional:0"
    }
    ret {
      key: "optionalnone_92"
      value: "OptionalNone_92:optional:0"
    }
    ret {
      key: "optionalnone_93"
      value: "OptionalNone_93:optional:0"
    }
    ret {
      key: "optionalnone_94"
      value: "OptionalNone_94:optional:0"
    }
    ret {
      key: "optionalnone_95"
      value: "OptionalNone_95:optional:0"
    }
    ret {
      key: "optionalnone_96"
      value: "OptionalNone_96:optional:0"
    }
    ret {
      key: "optionalnone_97"
      value: "OptionalNone_97:optional:0"
    }
    ret {
      key: "optionalnone_98"
      value: "OptionalNone_98:optional:0"
    }
    ret {
      key: "optionalnone_99"
      value: "OptionalNone_99:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_true_1504"
      input_arg {
        name: "readvariableop_batch_normalization_2_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_2_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_2_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_2_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_2_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_2_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_true_2022"
      input_arg {
        name: "readvariableop_batch_normalization_6_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_6_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_6_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_6_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_6_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_6_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_1_false_1716"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_true_1388"
      input_arg {
        name: "readvariableop_batch_normalization_1_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_1_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_1_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_1_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_1_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_1_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_1_true_1572"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_true_1647"
      input_arg {
        name: "readvariableop_batch_normalization_3_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_3_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_3_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_3_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_3_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_3_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_8_cond_false_2318"
      input_arg {
        name: "readvariableop_batch_normalization_8_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_8_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_8_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_8_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_8_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_8_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_8_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_8_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_8_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_8_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_7_cond_1_true_2243"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_1_true_1456"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_1_false_1315"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_false_1389"
      input_arg {
        name: "readvariableop_batch_normalization_1_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_1_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_1_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_1_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_1_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_1_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_true_1246"
      input_arg {
        name: "readvariableop_batch_normalization_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_1_false_1457"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_true_1763"
      input_arg {
        name: "readvariableop_batch_normalization_4_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_4_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_4_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_4_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_4_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_4_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_cond_true_1335"
      input_arg {
        name: "activation_relu_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "activation_relu"
        type: DT_FLOAT
      }
    }
    ret {
      key: "activation_relu"
      value: "activation_relu_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_true_1906"
      input_arg {
        name: "readvariableop_batch_normalization_5_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_5_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_5_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_5_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_5_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_5_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_1_cond_false_1595"
      input_arg {
        name: "identity_activation_1_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_activation_1_relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_2_cond_true_1853"
      input_arg {
        name: "activation_2_relu_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "activation_2_relu"
        type: DT_FLOAT
      }
    }
    ret {
      key: "activation_2_relu"
      value: "activation_2_relu_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_2_cond_false_1854"
      input_arg {
        name: "identity_activation_2_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_activation_2_relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_1_cond_true_1594"
      input_arg {
        name: "activation_1_relu_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "activation_1_relu"
        type: DT_FLOAT
      }
    }
    ret {
      key: "activation_1_relu"
      value: "activation_1_relu_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_8_cond_1_false_2386"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_1_true_1715"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_7_cond_false_2176"
      input_arg {
        name: "readvariableop_batch_normalization_7_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_7_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_7_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_7_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_7_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_7_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_7_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_7_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_7_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_7_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_1_false_1975"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_1_true_2090"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_1_true_1974"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_false_2023"
      input_arg {
        name: "readvariableop_batch_normalization_6_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_6_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_6_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_6_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_6_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_6_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_4_cond_false_2265"
      input_arg {
        name: "identity_activation_4_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_activation_4_relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_false_1907"
      input_arg {
        name: "readvariableop_batch_normalization_5_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_5_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_5_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_5_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_5_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_5_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_3_cond_true_2112"
      input_arg {
        name: "activation_3_relu_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "activation_3_relu"
        type: DT_FLOAT
      }
    }
    ret {
      key: "activation_3_relu"
      value: "activation_3_relu_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_1_true_1314"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_false_1247"
      input_arg {
        name: "readvariableop_batch_normalization_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_7_cond_true_2175"
      input_arg {
        name: "readvariableop_batch_normalization_7_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_batch_normalization_7_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_7_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_7_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_7_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_7_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_batch_normalization_7_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_7_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_7_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_7_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_5_cond_false_2407"
      input_arg {
        name: "identity_activation_5_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_activation_5_relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_1_false_2091"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "dropout_3_cond_false_2113"
      input_arg {
        name: "identity_activation_3_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_activation_3_relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 64
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_7_cond_1_false_2244"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_8_cond_1_true_2385"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_1_true_1831"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "dropout_5_cond_true_2406"
      input_arg {
        name: "activation_5_relu_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "activation_5_relu"
        type: DT_FLOAT
      }
    }
    ret {
      key: "activation_5_relu"
      value: "activation_5_relu_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_cond_false_1336"
      input_arg {
        name: "identity_activation_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_activation_relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
                dim {
                  size: 1
                }
                dim {
                  size: 128
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 898
  min_consumer: 12
}
