name: Train
description: Dummy Training step.
inputs:
- {name: dataset, type: Dataset}
- {name: num_steps, type: Integer}
outputs:
- {name: model, type: Model}
- {name: output_message_path, type: String}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.13' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def train(
          # Use Input[T] to get a metadata-rich handle to the input artifact of type `Dataset`.
          dataset: Input[Dataset],
          # Use Output[T] to get a metadata-rich handle to the output artifact of type `Dataset`.
          model: Output[Model],
          # An input parameter of type int.
          num_steps: int,
          # An output parameter of type str.
          output_message_path: OutputPath(str),
      ):
          """Dummy Training step."""

          with open(dataset.path, 'r') as input_file:
              dataset_contents = input_file.read()

          with open(model.path, 'w') as output_file:
              for i in range(num_steps):
                  output_file.write(f'Step {i}\n=====\n')

          # Model artifact has a `.metadata` dictionary
          # to store arbitrary metadata for the output artifact.
          model.metadata['accuracy'] = 0.9

          with open(output_message_path, 'w') as output_file:
              output_file.write('Model trained successfully.')

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train
