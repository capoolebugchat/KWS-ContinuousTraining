name: Train
inputs:
- {name: model_S3_bucket, type: String}
- {name: dataset, type: Dataset}
- {name: config, type: Artifact}
outputs:
- {name: model, type: Model}
implementation:
  container:
    image: capoolebugchat/kws-training:v0.8.0
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.13' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef train(\n    model_S3_bucket: str,\n    dataset: Input[Dataset],\n\
      \    config: Input[Artifact],\n    model: Output[Model]\n) -> None:\n\n    import\
      \ logging\n    import glob\n    import yaml\n    import os\n\n    logging.info(\"\
      model path:\"+model.path)\n    logging.info(\"model URI:\"+model.uri)\n\n  \
      \  MINIO_SERVICE_HOST=\"minio-service.kubeflow.svc.cluster.local\"\n    MINIO_SERVICE_PORT=\"\
      9000\"\n    #TODO: change these to using Kubeflow's Minio Secrets\n    MINIO_SERVICE_ACCESS_KEY=\"\
      minio\"\n    MINIO_SERVICE_SECRET_KEY=\"minio123\"\n    MINIO_SERVICE_SECURITY_OPTION=False\n\
      \n    from minio import Minio\n    minio_client = Minio(\n        f\"{MINIO_SERVICE_HOST+':'+MINIO_SERVICE_PORT}\"\
      ,\n        access_key = MINIO_SERVICE_ACCESS_KEY,\n        secret_key = MINIO_SERVICE_SECRET_KEY,\n\
      \        secure     = MINIO_SERVICE_SECURITY_OPTION\n    )\n\n    logging.info(f\"\
      Connected to Minio Server at {MINIO_SERVICE_HOST}:{MINIO_SERVICE_PORT}\")\n\n\
      \    logging.info(f\"{os.listdir}\")\n    os.system( \\\n        f\"rclone mount\
      \ kf_minio://test-training-data/test-train-dataset {dataset.metadata['local_path']}\
      \ \\\n        --config ./rclone.conf \\\n        --allow-other \\\n        --log-file\
      \ rclone.log \\\n        --vfs-cache-mode full \\\n        -vv \")\n#      \
      \  --daemon\"    \n\n    logging.info(\"Mounted rclone training data folder\"\
      )\n\n    def _yaml_to_env(yaml_file, env_file, data_path):\n\n        yaml_f\
      \ = open(yaml_file,'r')\n        env_f = open(env_file,'w')\n\n        hyperparams\
      \ = yaml.safe_load(yaml_f)\n        hyperparams['data_path'] = data_path\n \
      \       print(\"Loading hyperparams:\")\n\n        for key in hyperparams:\n\
      \            logging.info(f\"{key} = {hyperparams[key]}\")\n            print(f\"\
      {key} = {hyperparams[key]}\")\n            if isinstance(hyperparams[key], str):\n\
      \                env_f.write(f\"{key} = '{hyperparams[key]}'\\n\")\n       \
      \     else: env_f.write(f\"{key} = {hyperparams[key]}\\n\")\n\n    def _train():\n\
      \        logging.info(\"Traning commencing.\")\n        os.system(\"python3\
      \ -m kws_streaming.train.model_train_eval ds_tc_resnet --alsologtostderr\")\n\
      \        logging.info(\"Training completed.\")\n\n    def _upload_local_directory_to_minio(local_path,\
      \ bucket_name, minio_path):\n        assert os.path.isdir(local_path)\n    \
      \    for local_file in glob.glob(local_path + '/**'):\n            local_file\
      \ = local_file.replace(os.sep, \"/\") # Replace \\ with / on Windows\n     \
      \       if not os.path.isfile(local_file):\n                _upload_local_directory_to_minio(\n\
      \                    local_file, bucket_name, minio_path + \"/\" + os.path.basename(local_file))\n\
      \            else:\n                remote_path = os.path.join(\n          \
      \          minio_path, local_file[1 + len(local_path):])\n                remote_path\
      \ = remote_path.replace(\n                    os.sep, \"/\")  # Replace \\ with\
      \ / on Windows\n                minio_client.fput_object(bucket_name, remote_path,\
      \ local_file)\n\n    model.metadata = {\n        \"version\":\"v0.1.1\",\n \
      \       \"S3_URI\":f\"S3://{model_S3_bucket}/saved_model\"\n        }\n\n  \
      \  logging.info(\"Loading hyperparams:\")\n    _yaml_to_env(\n        yaml_file\
      \ = config.metadata[\"local_path\"],\n        env_file = \"hparam.env\",\n \
      \       data_path = dataset.metadata[\"local_path\"])\n\n    logging.info(\"\
      Training model\")\n    _train()\n\n    logging.info(\"Uploading model\")\n \
      \   _upload_local_directory_to_minio(\n        local_path = \"./train_res/ds_tc_resnet/non_stream\"\
      ,\n        bucket_name = model_S3_bucket,\n        minio_path = \"saved_model/1\"\
      )\n\n    logging.info(\"Model uploaded to minio bucket.\")\n    logging.info(f\"\
      Training finished, check storage at minio://{model_S3_bucket}/saved_model/1\"\
      )\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train
