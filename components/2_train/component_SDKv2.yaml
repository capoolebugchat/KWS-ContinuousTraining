name: Train
inputs:
- {name: model_S3_bucket, type: String}
- {name: dataset_location, type: String}
- {name: yaml_path, type: String}
implementation:
  container:
    image: capoolebugchat/kws-training:v0.17.0
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.13' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def train(
          model_S3_bucket: str,
          dataset_location: str, # /{path-to-mount}/path/to/dataset
          yaml_path: str
          # config_dict: Optional[Dict],
          # config: Output[Artifact],
          # model: Output[Model]
      ) -> None:

          import logging
          import glob
          import yaml
          import os

          MINIO_SERVICE_HOST="minio-service.kubeflow.svc.cluster.local"
          MINIO_SERVICE_PORT="9000"
          #TODO: change these to using Kubeflow's Minio Secrets
          MINIO_SERVICE_ACCESS_KEY="minio"
          MINIO_SERVICE_SECRET_KEY="minio123"
          MINIO_SERVICE_SECURITY_OPTION=False

          from minio import Minio
          minio_client = Minio(
              f"{MINIO_SERVICE_HOST+':'+MINIO_SERVICE_PORT}",
              access_key = MINIO_SERVICE_ACCESS_KEY,
              secret_key = MINIO_SERVICE_SECRET_KEY,
              secure     = MINIO_SERVICE_SECURITY_OPTION
          )

          import os
          os.system("apt-get install tree")
          os.system("pip install mlflow")
          os.system("tree /workspace/train_dataset")

          logging.info(f"Connected to Minio Server at {MINIO_SERVICE_HOST}:{MINIO_SERVICE_PORT}")

          logging.info(f"{os.listdir}")

          def _dict_to_env(path):

              env_f = open("/workspace/hparams.env",'w')
              hyperparams = yaml.safe_load(open("path",'r'))

              print("Loading hyperparams:")
              for key in hyperparams:
                  hyperparam = hyperparams[key]
                  # if key in config_dict:
                  #     hyperparam = config_dict[key]
                  logging.info(f"{key} = {hyperparam}")
                  print(f"{key} = {hyperparam}")
                  if isinstance(hyperparam, str):
                      env_f.write(f"{key} = '{hyperparam}'\n")
                  else: env_f.write(f"{key} = {hyperparam}\n")

              return hyperparams

          import mlflow
          mlflow.set_tracking_uri("http://mlflowserver.kubeflow:5000")

          def _train():
              logging.info("Traning commencing.")
              os.system("python3 -m kws_streaming.train.model_train_eval ds_tc_resnet --alsologtostderr")
              logging.info("Training completed.")

          def _upload_local_directory_to_minio(local_path, bucket_name, minio_path):
              assert os.path.isdir(local_path)
              for local_file in glob.glob(local_path + '/**'):
                  local_file = local_file.replace(os.sep, "/") # Replace \ with / on Windows
                  if not os.path.isfile(local_file):
                      _upload_local_directory_to_minio(
                          local_file, bucket_name, minio_path + "/" + os.path.basename(local_file))
                  else:
                      remote_path = os.path.join(
                          minio_path, local_file[1 + len(local_path):])
                      remote_path = remote_path.replace(
                          os.sep, "/")  # Replace \ with / on Windows
                      minio_client.fput_object(bucket_name, remote_path, local_file)

          logging.info("Loading hyperparams:")
          hyperparams = _dict_to_env(yaml_path)
          # config.name = "Train Configuration"
          # config.metadata["contents"] = hyperparams

          logging.info("Training model")
          _train()
          model_bucket = model_S3_bucket
          model_path = "trained_models/KWS/saved_model/1"
          # model.metadata = {
          # "version":"Undesigned, Unimplemented",
          # "S3_BUCKET": model_bucket,
          # "S3_PATH": model_path,
          # "S3_URI":f"kf_minio://{model_S3_bucket}/{model_path}"
          # }

          # logging.info("Uploading model")
          # _upload_local_directory_to_minio(
          #     local_path = "./train_res/ds_tc_resnet/non_stream",
          #     bucket_name = model_S3_bucket,
          #     minio_path = model_path)

          # logging.info("Model uploaded to minio bucket.")
          # logging.info(f"Training finished, check storage at minio://{model_S3_bucket}/saved_model/1")

          mlflow.tensorflow.log_model(tf_saved_model_dir = "train_res/ds_tc_resnet/non-stream")

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train
