name: Train
inputs:
- {name: model_S3_bucket, type: String}
- {name: dataset, type: Dataset}
- {name: config, type: Artifact}
outputs:
- {name: model, type: Model}
implementation:
  container:
    image: capoolebugchat/kws-training:v0.4.0
    command:
    - sh
    - -c
    - (python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet                 --no-warn-script-location 'minio'
      'ensurepip' 'kfp==1.8.3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet                 --no-warn-script-location 'minio' 'ensurepip' 'kfp==1.8.3'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      from kfp.v2.dsl import *
      from typing import *

      def train(
          model_S3_bucket: str,
          dataset: Input[Dataset],
          config: Input[Artifact],
          model: Output[Model]
      ):

          import logging
          import glob
          import yaml
          import os

          logging.info(dataset.path)
          logging.info(dataset.metadata)
          logging.info(config.path)
          logging.info(config.metadata)

          from minio import Minio
          minio_client = Minio(
              "minio-service.kubeflow.svc.cluster.local:9000",
              access_key="minio",
              secret_key="minio123",
              secure=False
          )

          logging.info(f"connected to Minio Server at minio-service.kubeflow.svc.cluster.local:9000")

          def _yaml_to_env(yaml_file, env_file, data_path):

              yaml_f = open(yaml_file,'r')
              env_f = open(env_file,'w')
              hyperparams = yaml.safe_load(yaml_f)
              hyperparams['data_path'] = data_path
              logging.info("Loading hyperparams:")
              print("Loading hyperparams:")
              for key in hyperparams:
                  logging.info(f"{key} = {hyperparams[key]}")
                  print(f"{key} = {hyperparams[key]}")
                  if isinstance(hyperparams[key], str):
                      env_f.write(f"{key} = '{hyperparams[key]}'\n")
                  else: env_f.write(f"{key} = {hyperparams[key]}\n")

          def _train():
              logging.info("Traning commencing.")
              os.system("python -m kws_streaming.train.model_train_eval ds_tc_resnet --alsologtostderr")
              logging.info("Training completed.")

          def _upload_local_directory_to_minio(local_path, bucket_name, minio_path):
              assert os.path.isdir(local_path)
              for local_file in glob.glob(local_path + '/**'):
                  local_file = local_file.replace(os.sep, "/") # Replace \ with / on Windows
                  if not os.path.isfile(local_file):
                      _upload_local_directory_to_minio(
                          local_file, bucket_name, minio_path + "/" + os.path.basename(local_file))
                  else:
                      remote_path = os.path.join(
                          minio_path, local_file[1 + len(local_path):])
                      remote_path = remote_path.replace(
                          os.sep, "/")  # Replace \ with / on Windows
                      minio_client.fput_object(bucket_name, remote_path, local_file)

          print(config.path)
          print(dataset.path)

          model.metadata = {
              "version":"v0.1.1",
              "S3_URI":"S3://model-store/saved_model"
              }

          _yaml_to_env(
              yaml_file = config.metadata["local_path"],
              env_file = "hparam.env",
              data_path = dataset.metadata["local_path"])
          _train()
          _upload_local_directory_to_minio(
              local_path = "./train_res/ds_tc_resnet/non_stream",
              bucket_name = model_S3_bucket,
              minio_path = "saved_model/1")

          logging.info("Model uploaded to minio bucket.")

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train
