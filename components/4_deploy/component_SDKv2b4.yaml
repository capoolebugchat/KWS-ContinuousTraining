apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: deploy-2-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.13, pipelines.kubeflow.org/pipeline_compilation_time: '2022-09-08T15:13:12.787151',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Deploy", "inputs": [{"name":
      "model", "type": "Model"}], "name": "Deploy"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.13}
spec:
  entrypoint: deploy-2
  templates:
  - name: deploy
    container:
      args: [--executor_input, '{{$}}', --function_to_execute, deploy]
      command:
      - sh
      - -c
      - |2

        if ! [ -x "$(command -v pip)" ]; then
            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
        fi

        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kserve==0.8.0.2' 'kubernetes==18.20.0' 'kfp==1.8.13' && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
        \ import *\n\ndef deploy(\n    model: Input[Model],\n):\n\n    import logging\n\
        \    from kubernetes import client\n    import kserve\n    from kserve import\
        \ KServeClient\n    from kserve import constants\n    from kserve import V1beta1PredictorSpec\n\
        \    from kserve import V1beta1TFServingSpec\n    from kserve import V1beta1InferenceServiceSpec\n\
        \    from kserve import V1beta1InferenceService\n\n    default_model_spec\
        \ = V1beta1InferenceServiceSpec(\n        predictor=V1beta1PredictorSpec(\n\
        \            tensorflow=V1beta1TFServingSpec(\n                storage_uri=model.metadata[\"\
        S3_URI\"]\n                )\n            )\n        )\n\n    isvc = V1beta1InferenceService(\n\
        \        api_version=constants.KSERVE_V1BETA1,\n        kind=constants.KSERVE_KIND,\n\
        \        metadata=client.V1ObjectMeta(\n            name='auto-deployed-model',\
        \ \n            namespace='kubeflow-user-example-com'\n            ),\n  \
        \          spec=default_model_spec\n        )\n\n    client = KServeClient()\n\
        \    client.set_credentials(\n        storage_type = \"S3\",\n        namespace\
        \ = \"kubeflow-user-example-com\",\n        service_account = \"default-editor\"\
        \n    )\n    '''mlpipeline-minio-artifact -n kubeflow-user-example-com'''\n\
        \    logging.info(\"Client created\")\n\n    client.create(isvc)\n    logging.info(\"\
        ISVC created. Object sent to K8s apiserver\")\n\n    client.wait_isvc_ready(\n\
        \        name = 'auto-deployed-model',\n        namespace = 'kubeflow-user-example-com',\n\
        \        timeout_seconds = 300\n        )\n    logging.info(\"ISVC ready.\
        \ Model deployed\")\n\n"
      image: python:3.7
    inputs:
      artifacts:
      - {name: model, path: /tmp/inputs/model/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--executor_input", {"executorInput": null}, "--function_to_execute",
          "deploy"], "command": ["sh", "-c", "\nif ! [ -x \"$(command -v pip)\" ];
          then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get
          install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip
          install --quiet     --no-warn-script-location ''kserve==0.8.0.2'' ''kubernetes==18.20.0''
          ''kfp==1.8.13'' && \"$0\" \"$@\"\n", "sh", "-ec", "program_path=$(mktemp
          -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3
          -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
          "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing
          import *\n\ndef deploy(\n    model: Input[Model],\n):\n\n    import logging\n    from
          kubernetes import client\n    import kserve\n    from kserve import KServeClient\n    from
          kserve import constants\n    from kserve import V1beta1PredictorSpec\n    from
          kserve import V1beta1TFServingSpec\n    from kserve import V1beta1InferenceServiceSpec\n    from
          kserve import V1beta1InferenceService\n\n    default_model_spec = V1beta1InferenceServiceSpec(\n        predictor=V1beta1PredictorSpec(\n            tensorflow=V1beta1TFServingSpec(\n                storage_uri=model.metadata[\"S3_URI\"]\n                )\n            )\n        )\n\n    isvc
          = V1beta1InferenceService(\n        api_version=constants.KSERVE_V1BETA1,\n        kind=constants.KSERVE_KIND,\n        metadata=client.V1ObjectMeta(\n            name=''auto-deployed-model'',
          \n            namespace=''kubeflow-user-example-com''\n            ),\n            spec=default_model_spec\n        )\n\n    client
          = KServeClient()\n    client.set_credentials(\n        storage_type = \"S3\",\n        namespace
          = \"kubeflow-user-example-com\",\n        service_account = \"default-editor\"\n    )\n    ''''''mlpipeline-minio-artifact
          -n kubeflow-user-example-com''''''\n    logging.info(\"Client created\")\n\n    client.create(isvc)\n    logging.info(\"ISVC
          created. Object sent to K8s apiserver\")\n\n    client.wait_isvc_ready(\n        name
          = ''auto-deployed-model'',\n        namespace = ''kubeflow-user-example-com'',\n        timeout_seconds
          = 300\n        )\n    logging.info(\"ISVC ready. Model deployed\")\n\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "model", "type": "Model"}],
          "name": "Deploy"}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: deploy-2
    inputs:
      artifacts:
      - {name: model}
    dag:
      tasks:
      - name: deploy
        template: deploy
        arguments:
          artifacts:
          - {name: model, from: '{{inputs.artifacts.model}}'}
  arguments:
    parameters:
    - {name: model}
    artifacts:
    - name: model
      raw: {data: '{{workflow.parameters.model}}'}
  serviceAccountName: pipeline-runner
